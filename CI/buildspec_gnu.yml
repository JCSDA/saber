version: 0.2

env:
  parameter-store:
    GIT_USER: "/CodeBuild/Git_USER"
    GIT_PASS: "/CodeBuild/Git_PASS"

phases:
  install:
    commands:
      - echo Executing install phase
      - echo $CODEBUILD_WEBHOOK_TRIGGER
      - echo $CODEBUILD_WEBHOOK_BASE_REF
      - echo $CODEBUILD_WEBHOOK_ACTOR_ACCOUNT_ID
      - echo $CODEBUILD_WEBHOOK_EVENT
      - echo $CODEBUILD_BUILD_SUCCEEDING
      - echo $CODEBUILD_RESOLVED_SOURCE_VERSION

      - if [ "$CODEBUILD_WEBHOOK_EVENT" = "PULL_REQUEST_MERGED" ];
        then export CODEBUILD_GIT_BRANCH="develop";
        echo "Merging to develop";
        else CODEBUILD_GIT_BRANCH="$(git branch -a --contains $CODEBUILD_RESOLVED_SOURCE_VERSION | sed -n 2p | awk '{ printf $1 }')";
        export CODEBUILD_GIT_BRANCH=${CODEBUILD_GIT_BRANCH#remotes/origin/};
        fi

      - echo "CODEBUILD_GIT_BRANCH=${CODEBUILD_GIT_BRANCH}"
      - echo "CODEBUILD_SOURCE_VERSION=${CODEBUILD_SOURCE_VERSION}"

      - echo MPI setup for Docker
      - mkdir -p /var/run/sshd
      - ssh-keygen -A
      - sed -i 's/#PermitRootLogin yes/PermitRootLogin yes/g' /etc/ssh/sshd_config
      - sed -i 's/#RSAAuthentication yes/RSAAuthentication yes/g' /etc/ssh/sshd_config
      - sed -i 's/#PubkeyAuthentication yes/PubkeyAuthentication yes/g' /etc/ssh/sshd_config

      - groupadd jcsda -g 9999
      - useradd jcsdauser
      - mkdir -p /jcsda /build_container
      - chown -R jcsdauser:jcsda /build_container  /usr/local
      - chmod 6755 /jcsda /build_container /usr/local

      - mkdir /jcsda/.ssh ; echo "StrictHostKeyChecking no" > /jcsda/.ssh/config
      - mkdir -p /jcsda/.openmpi
      - mkdir -p /jcsda/saber-bundle
      - mkdir -p /home/jcsdauser/.openmpi
  
      - cp CI/default-mca-params.conf /home/jcsdauser/.openmpi/mca-params.conf
      - cat /home/jcsdauser/.openmpi/mca-params.conf
      - chown -R jcsdauser:jcsda /jcsda/

      - su - jcsdauser -c "ssh-keygen -f /jcsda/.ssh/id_rsa -t rsa -N ''
        && chmod 600 /jcsda/.ssh/config
        && chmod 700 /jcsda/.ssh
        && cp /jcsda/.ssh/id_rsa.pub /jcsda/.ssh/authorized_keys
        && echo MPI setup for Docker done"

  pre_build:
    commands:
      - echo Executing pre_build phase

      - git lfs install
      - cp ~/.gitconfig /home/jcsdauser/
      - cp CI/CMakeLists.txt /jcsda/saber-bundle

      - cd CI

      # fckit
      - ./clone.sh $GIT_USER $GIT_PASS fckit $CODEBUILD_GIT_BRANCH fckit /jcsda/saber-bundle release-stable
      # atlas
      - ./clone.sh $GIT_USER $GIT_PASS atlas $CODEBUILD_GIT_BRANCH atlas /jcsda/saber-bundle release-stable
      # oops
      - ./clone.sh $GIT_USER $GIT_PASS oops $CODEBUILD_GIT_BRANCH oops /jcsda/saber-bundle develop
      # saber
      - ./clone.sh $GIT_USER $GIT_PASS saber $CODEBUILD_GIT_BRANCH saber /jcsda/saber-bundle develop

      - cd /jcsda/saber-bundle
      - ls

  build:
    commands:
      - echo Executing build phase
      - su - jcsdauser -c "cd /build_container
        && ls
        && export FC=mpifort
        && export CC=mpicc
        && export CXX=mpicxx
        &&  cmake -DCMAKE_MODULE_PATH=/usr/local/share/ecbuild/cmake/ -DCMAKE_BUILD_TYPE=Debug -DENABLE_GPROF=ON -DCMAKE_CXX_COMPILER=$(which g++) -DCMAKE_C_COMPILER=$(which gcc) -DCMAKE_Fortran_COMPILER=$(which gfortran) /jcsda/saber-bundle/
        && cd saber
        && make -j4"

      - export BUILD_STATUS="0"
      - echo $BUILD_STATUS
      - echo $CODEBUILD_BUILD_SUCCEEDING

      - if [ "$CODEBUILD_BUILD_SUCCEEDING" = "1" ];
        then export BUILD_STATUS="1";
        echo "Build passed";
        fi
      - echo $BUILD_STATUS

      - su - jcsdauser -c "cd /build_container
        && ls
        && export FC=mpifort
        && export CC=mpicc
        && export CXX=mpicxx
        && cd saber
        && ctest"

  post_build:
    commands:
      - echo Executing post_build phase
      - echo $CODEBUILD_BUILD_SUCCEEDING
      - if [ "$BUILD_STATUS" = "1" ] && [ "$CODEBUILD_BUILD_SUCCEEDING" = "0" ];
        then echo "Build passed, rerun failed tests";
        su - jcsdauser -c "cd /build_container/saber
        && ctest -VV --rerun-failed";
        else echo "Build failed";
        fi
      - echo 'Connect to CodeCov'
      - cd /build_container/saber
      - pwd
      - ls
      - bash /jcsda/saber-bundle/saber/CI/codecov_script.sh
