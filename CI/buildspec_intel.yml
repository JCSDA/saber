version: 0.2

env:
  shell: bash
  parameter-store:
    GIT_USER: "/CodeBuild/Git_USER"
    GIT_PASS: "/CodeBuild/Git_PASS"

phases:
  install:
    commands:
      - echo Executing install phase

      - echo $CODEBUILD_RESOLVED_SOURCE_VERSION
      - echo $CODEBUILD_SOURCE_REPO_URL
      - echo $CODEBUILD_SOURCE_VERSION

      - echo $CODEBUILD_WEBHOOK_MERGE_COMMIT
      - echo $CODEBUILD_WEBHOOK_PREV_COMMIT
      - echo $CODEBUILD_WEBHOOK_HEAD_REF
      - echo $CODEBUILD_WEBHOOK_ACTOR_ACCOUNT_ID
      - echo $CODEBUILD_WEBHOOK_EVENT
      - echo $CODEBUILD_WEBHOOK_TRIGGER
      - echo $CODEBUILD_WEBHOOK_BASE_REF

  pre_build:
    commands:
      - echo Executing pre_build phase

      # Codebuild only runs on PUSH events if HEAD_REF
      # is refs/heads/develop (merge to develop). In this
      # case CODEBUILD_GIT_BRANCH="develop"
      #
      - if [ "$CODEBUILD_WEBHOOK_EVENT" = "PUSH" ];
        then export CODEBUILD_GIT_BRANCH="develop";
        echo "Merging to develop";
        else export CODEBUILD_GIT_BRANCH=${CODEBUILD_WEBHOOK_HEAD_REF#refs/heads/};
        fi

      # Determine the git base branch. This is the branch we are merging into.
      # It can be develop or another branch. It will be used as a fall back branch in clone.sh
      - export GIT_BASE_BRANCH=${CODEBUILD_WEBHOOK_BASE_REF#refs/heads/}

      - echo "GIT_BASE_BRANCH=${GIT_BASE_BRANCH}"
      - echo "CODEBUILD_GIT_BRANCH=${CODEBUILD_GIT_BRANCH}"
      - echo "CODEBUILD_SOURCE_VERSION=${CODEBUILD_SOURCE_VERSION}"

      # Upload branch name and commit sha as CodeBuild artifact to S3
      - mkdir -p /jcsda/artifacts
      - echo ${CODEBUILD_GIT_BRANCH} > /jcsda/artifacts/branch_name.txt
      - echo ${CODEBUILD_RESOLVED_SOURCE_VERSION} > /jcsda/artifacts/commit_sha.txt

      # initialization
      - cd CI
      - . /etc/profile.d/intel.sh

      # read cdash url from s3
      - wget https://ci-test-cdash-url.s3.amazonaws.com/cdash_url.txt
      - CDASH_URL=$(cat cdash_url.txt)

      #  Setting git credentials
      - sed -i '/ssh/d' ~/.gitconfig
      - sed '/instead/d' ~/.gitconfig
      - git config --global credential.helper store
      - touch ~/.git-credentials
      - chmod 0700 ~/.git-credentials
      - echo "https://${GIT_USER}:${GIT_PASS}@github.com" >~/.git-credentials

      # jedi-cmake
      - ./clone.sh jcsda-internal/jedi-cmake $CODEBUILD_GIT_BRANCH /jcsda/saber-bundle jedicmake ${GIT_BASE_BRANCH} develop

      # oops
      - ./clone.sh jcsda-internal/oops $CODEBUILD_GIT_BRANCH /jcsda/saber-bundle oops ${GIT_BASE_BRANCH} develop

      # vader
      - ./clone.sh jcsda-internal/vader $CODEBUILD_GIT_BRANCH /jcsda/saber-bundle vader ${GIT_BASE_BRANCH} develop

      # saber
      - ./clone.sh jcsda-internal/saber $CODEBUILD_GIT_BRANCH /jcsda/saber-bundle saber ${GIT_BASE_BRANCH} develop

      # saber-data
      - ./clone.sh jcsda-internal/saber-data $CODEBUILD_GIT_BRANCH /jcsda/saber-bundle saber-data ${GIT_BASE_BRANCH} develop

      # gsibec
      - ./clone.sh geos-esm/GSIbec $CODEBUILD_GIT_BRANCH /jcsda/saber-bundle gsibec ${GIT_BASE_BRANCH} 1.0.4

      # move CMakeLists.txt from saber/CI to bundle directory
      - cp CMakeLists.txt /jcsda/saber-bundle
      - cp -r cmake /jcsda/saber-bundle/

      # cdash upload setup
      - cp /jcsda/saber-bundle/cmake/CTestConfig.cmake /jcsda/saber-bundle/
      - sed -i "s@CDASH_URL@$CDASH_URL@g" /jcsda/saber-bundle/CTestConfig.cmake
      - chmod 777 -R /jcsda/saber-bundle

      # print list
      - cd /jcsda/saber-bundle
      - ls

  build:
    on-failure: CONTINUE
    commands:
      - echo Executing build phase
      - echo $CODEBUILD_BUILD_SUCCEEDING
      - export BUILD_STATUS="0"
      - echo $BUILD_STATUS

      - su - jedi -c "export SABER_TEST_TIER=2
        && export CC=mpiicc
        && export FC=mpiifort
        && export CXX=mpiicpc
        && export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
        && export PATH=/usr/local/lib:$PATH
        && cd /home/jedi
        && ecbuild /jcsda/saber-bundle/ -Wno-dev -DCDASH_OVERRIDE_SITE=CodeBuild -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCDASH_OVERRIDE_GIT_BRANCH=$CODEBUILD_GIT_BRANCH -DCTEST_UPDATE_VERSION_ONLY=FALSE"

      - su - jedi -c "export SABER_TEST_TIER=2
        && export CC=mpiicc
        && export FC=mpiifort
        && export CXX=mpiicpc
        && export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
        && export PATH=/usr/local/lib:$PATH
        && cd /home/jedi/saber
        && cp ../DartConfiguration.tcl .
        && sed -i 's/saber-bundle/saber-bundle\/saber/' DartConfiguration.tcl
        && sed -i 's/jedi/jedi\/saber/' DartConfiguration.tcl
        && cat DartConfiguration.tcl
        && ctest -C RelWithDebInfo -V -D ExperimentalBuild -j4"

      - if [ "$CODEBUILD_BUILD_SUCCEEDING" = "1" ];
        then export BUILD_STATUS="1";
        echo "Build passed";
        fi
      - echo $BUILD_STATUS

      - su - jedi -c "export CC=mpiicc
        && export FC=mpiifort
        && export CXX=mpiicpc
        && export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
        && export PATH=/usr/local/lib:$PATH
        && cd /home/jedi/saber
        && ctest -C RelWithDebInfo -D ExperimentalTest"

    finally:
      # upload ctest report to CDASH
      - su - jedi -c "export CC=mpiicc
        && export FC=mpiifort
        && export CXX=mpiicpc
        && export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
        && export PATH=/usr/local/lib:$PATH
        && cd /home/jedi/saber
        && ctest -C RelWithDebInfo -D ExperimentalSubmit -M Continuous -- --track Continuous --group Continuous"

  post_build:
    commands:
      - echo Executing post_build phase
      - echo $CODEBUILD_BUILD_SUCCEEDING
      - echo $BUILD_STATUS

      # upload find cdash url and upload it as CodeBuild artifact to S3
      - if [ "$BUILD_STATUS" = "1" ];
        then echo "Build & tests passed, find cdash url";
        url=$(bash /jcsda/saber-bundle/saber/CI/cdash-url.sh /home/jedi/saber/Testing  $CDASH_URL);
        echo $url;
        echo ${url} > /jcsda/artifacts/cdash-url.txt;
        cat /jcsda/artifacts/cdash-url.txt;
        else echo "Build failed";
        fi

artifacts:
  files:
    - '/jcsda/artifacts/*'
  name: saber-intel-url
