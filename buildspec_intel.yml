version: 0.2

env:
  parameter-store:
    GIT_USER: "/CodeBuild/Git_USER"
    GIT_PASS: "/CodeBuild/Git_PASS"


phases:
  install:
    commands:
      - echo Executing install phase
      - echo $CODEBUILD_WEBHOOK_TRIGGER
      - echo $CODEBUILD_WEBHOOK_BASE_REF
      - cat /codebuild/output/tmp/script.sh
      - ls -ls /codebuild/output/tmp/
      - cat /codebuild/output/tmp/env.sh

      - echo MPI setup for Docker
      - mkdir -p /var/run/sshd
      - ssh-keygen -A 
      - sed -i 's/#PermitRootLogin yes/PermitRootLogin yes/g' /etc/ssh/sshd_config
      - sed -i 's/#RSAAuthentication yes/RSAAuthentication yes/g' /etc/ssh/sshd_config
      - sed -i 's/#PubkeyAuthentication yes/PubkeyAuthentication yes/g' /etc/ssh/sshd_config

      - echo $SHELL

      - groupadd jcsda -g 9999
      - useradd -s/bin/bash jcsdauser
        && export FC=mpifort
        && export CC=mpicc
        && export CXX=mpicxx
        && cat /etc/passwd
        && echo $SHELL
        && source /etc/bash.bashrc 
        && echo $LD_LIBRARY_PATH
        && whereis $FC

      - mkdir -p /jcsda /build_container
      - chown -R jcsdauser:jcsda /build_container  /usr/local
      - chmod 6755 /jcsda /build_container /usr/local

      - mkdir /jcsda/.ssh ; echo "StrictHostKeyChecking no" > /jcsda/.ssh/config
      - mkdir -p /jcsda/.openmpi
      - mkdir -p /home/jcsdauser/.openmpi
        
      - cp default-mca-params.conf /home/jcsdauser/.openmpi/mca-params.conf
      - cat /home/jcsdauser/.openmpi/mca-params.conf
      - chown -R jcsdauser:jcsda /jcsda/

      - su - jcsdauser -c "ssh-keygen -f /jcsda/.ssh/id_rsa -t rsa -N ''
        && chmod 600 /jcsda/.ssh/config
        && chmod 700 /jcsda/.ssh
        && cp /jcsda/.ssh/id_rsa.pub /jcsda/.ssh/authorized_keys
        && echo MPI setup for Docker done"
  pre_build:
    commands:
      - echo Executing pre_build phase
      - cd ../
      - ls -ls /opt/intel/compilers_and_libraries/linux/bin/
      - sed '12s/INTEL_TARGET_ARCH=/INTEL_TARGET_ARCH=intel64/' /opt/intel/compilers_and_libraries/linux/bin/compilervars.sh
      - export COMPILERVARS_ARCHITECTURE=intel64
      - export COMPILERVARS_PLATFORM=linux
      - . /opt/intel/compilers_and_libraries/linux/bin/compilervars.sh
      - export FC=mpiifort
      - export CC=mpiicc
      - export CXX=mpiicpc
      - export PATH=/opt/intel/compilers_and_libraries_2017.1.132/linux/bin/intel64:/opt/intel/compilers_and_libraries_2017.1.132/linux/mpi/intel64/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      - export LD_LIBRARY_PATH=/opt/intel/compilers_and_libraries_2017.1.132/linux/compiler/lib/intel64:/opt/intel/compilers_and_libraries_2017.1.132/linux/compiler/lib/intel64_lin:/opt/intel/compilers_and_libraries_2017.1.132/linux/mpi/intel64/lib:/opt/intel/compilers_and_libraries_2017.1.132/linux/mpi/mic/lib:/opt/intel/compilers_and_libraries_2017.1.132/linux/compiler/lib/intel64_lin:/opt/intel/compilers_and_libraries_2017.1.132/linux/mkl/lib/intel64_lin:/usr/local/lib
      - export LIBRARY_PATH=/opt/intel/compilers_and_libraries_2017.1.132/linux/compiler/lib/intel64_lin:/opt/intel/compilers_and_libraries_2017.1.132/linux/mkl/lib/intel64_lin:/usr/local/lib

      - . /opt/intel/compilers_and_libraries/linux/bin/compilervars.sh

      - echo $LD_LIBRARY_PATH
      - echo $FC
      - echo $CC
      - echo $CXX
      - whereis $FC $CC $CXX
 
      - mpiifort='/opt/intel/compilers_and_libraries_2017.1.132/linux/mpi/intel64/bin/mpiifort'
      - mpiicc='/opt/intel/compilers_and_libraries_2017.1.132/linux/mpi/intel64/bin/mpiicc'
      - mpiicpc='/opt/intel/compilers_and_libraries_2017.1.132/linux/mpi/intel64/bin/mpiicpc'
      - export FC=mpiifort
      - export CC=mpiicc
      - export CXX=mpiicpc

        #&& export mpiifort=/opt/intel/compilers_and_libraries_2017.1.132/linux/mpi/intel64/bin/mpiifort
        #&& export mpiicc=/opt/intel/compilers_and_libraries_2017.1.132/linux/mpi/intel64/bin/mpiicc
        #&& export mpiicpc=/opt/intel/compilers_and_libraries_2017.1.132/linux/mpi/intel64/bin/mpiicpc

      - su - jcsdauser -c "echo $$
        && ps -ef $$
        && echo $PATH
        && echo $LD_LIBRARY_PATH
        && export FC=mpiifort
        && export CC=mpiicc
        && export CXX=mpiicpc
        && ls -ls /opt/intel/compilers_and_libraries_2017.1.132/linux/mpi/intel64/bin/
        && echo $FC
        && echo $CC
        && echo $CXX
        && whereis $FC $CC $CXX"

      - cat $0 | head
      - echo $$
        && ps -ef $$
        #      - bash
        #&& echo $$
        #&& ps -ef $$
        #&& sed -i '1i\#!/bin/bash' /etc/bash.bashrc
        #&& /etc/bash.bashrc
        #&& export SOME_ENV=SOMEENV
        #&& echo $SOME_ENV
        #- echo $SOME_ENV
        #- echo $0
        #- sed -i '1i\#!/bin/bash' /etc/bash.bashrc
        #- cat /etc/bash.bashrc
        #- . /etc/bash.bashrc
      - git lfs install
      - cp ~/.gitconfig /home/jcsdauser/
      - git clone https://$GIT_USER:$GIT_PASS@github.com/jcsda/saber-bundle saber-bundle
      - git clone https://$GIT_USER:$GIT_PASS@github.com/jcsda/saber saber-bundle/saber2
      - git clone https://$GIT_USER:$GIT_PASS@github.com/jcsda/fckit saber-bundle/fckit

      - mv saber-bundle /jcsda/
      - cd /jcsda/saber-bundle
      - sed -i 's/BRANCH develop UPDATE//' CMakeLists.txt
  build:
    commands:
      - echo Executing build phase
      - su - jcsdauser -c "cd /build_container 
        && ls
        && ecbuild /jcsda/saber-bundle/
        && make -j4
        && ctest" 
  post_build:
    commands:
      - echo Executing post_build phase



