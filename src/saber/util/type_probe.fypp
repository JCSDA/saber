#:include '../instrumentation.fypp'
!----------------------------------------------------------------------
! Module: type_probe
!> Probe derived type
! Author: Benjamin Menetrier
! Licensing: this code is distributed under the CeCILL-C license
! Copyright Â© 2015-... UCAR, CERFACS, METEO-FRANCE and IRIT
!----------------------------------------------------------------------
module type_probe

use iso_fortran_env, only: output_unit
!$ use omp_lib
use tools_kinds, only: kind_real,huge_real

implicit none

integer,parameter :: ninst = 999    !< Maximum number of instances
integer,parameter :: maxlevel = 100 !< Maximum number of calling levels

type timing_type
   ! Timing info
   integer :: clock_start       !< Clock start
   integer :: clock_restart     !< Clock restart
   integer :: clock_own         !< Own clock
   character(len=1024) :: subr  !< Subroutine/function name
   integer :: n                 !< Number of calls
   real(kind_real) :: total     !< Total timing
   real(kind_real) :: min       !< Minimum individual timing
   real(kind_real) :: max       !< Maximum individual timing
   real(kind_real) :: total_own !< Total timing, own clock
   real(kind_real) :: min_own   !< Minimum individual timing, own clock
   real(kind_real) :: max_own   !< Maximum individual timing, own clock
end type timing_type

type instance_type
   ! Probing info
   integer :: level                            !< Calling level
   character(len=1024),allocatable :: trace(:) !< Trace list

   ! Timing common info
   integer :: count_rate                       !< Clock count rate
   integer :: count_max                        !< Clock count maximum

   ! Timing specific info
   integer,allocatable :: trace_key(:)         !< Trace list keys
   type(timing_type),allocatable :: timing(:)  !< Timings array
   logical,allocatable :: timing_associated(:) !< Timings allocation
end type instance_type


type probe_type
   logical :: used(ninst) = .false.       !< Used instance indices
   type(instance_type) :: instance(ninst) !< Instances
contains
   procedure :: dealloc => probe_dealloc
   procedure :: get_instance => probe_get_instance
   procedure :: in => probe_in
   procedure :: out => probe_out
   procedure :: traceback => probe_traceback
end type probe_type

integer :: iinst = 0
type(probe_type) :: probe

private
public :: ninst,iinst,probe

contains

!----------------------------------------------------------------------
! Subroutine: probe_dealloc
!> Probe deallocation
!----------------------------------------------------------------------
subroutine probe_dealloc(probe)

implicit none

! Passed variable
class(probe_type),intent(inout) :: probe !< Probe

if (omp_get_thread_num()==0) then
   ! Check instance
   if ((iinst<=0).or.(iinst>ninst)) then
      write(output_unit,'(a,i4,a)') 'Error: wrong instance in probe%dealloc (',iinst,')'
      call flush(output_unit)
      error stop 5
   end if

   ! Release memory
   deallocate(probe%instance(iinst)%trace)
   deallocate(probe%instance(iinst)%trace_key)
   deallocate(probe%instance(iinst)%timing)
   deallocate(probe%instance(iinst)%timing_associated)

   ! Index not used anymore
   probe%used(iinst) = .false.
end if

end subroutine probe_dealloc

!----------------------------------------------------------------------
! Subroutine: probe_get_instance
!> Getinstance index
!----------------------------------------------------------------------
subroutine probe_get_instance(probe,iinst_in)

implicit none

! Passed variable
class(probe_type),intent(inout) :: probe !< Probe
integer,intent(inout) :: iinst_in        !< Saved index value

! Local variable
integer :: jinst,isubr

if (omp_get_thread_num()==0) then
   if ((iinst_in<=0).or.(iinst_in>ninst)) then
      ! Check if some instance indices are still available
      if (count(probe%used)==ninst) then
         write(output_unit,'(a,i4,a)') 'Error: too many instances in probe%get_instance'
         call flush(output_unit)
         error stop 6
      end if

      ! Find an instance index
      do jinst=1,ninst
         if (.not.probe%used(jinst)) then
            ! Available index
            iinst_in = jinst
            exit
         end if
      end do

      if ((iinst_in<=0).or.(iinst_in>ninst)) then
         write(output_unit,'(a,i4,a)') 'Error: wrong instance in probe%get_instance (',iinst_in,')'
         call flush(output_unit)
         error stop 5
      end if

      ! Allocation
      allocate(probe%instance(iinst_in)%trace(maxlevel))
      allocate(probe%instance(iinst_in)%trace_key(maxlevel))
      allocate(probe%instance(iinst_in)%timing(0:${subr_list_size}$-1))
      allocate(probe%instance(iinst_in)%timing_associated(0:${subr_list_size}$-1))

      ! Initialization
      probe%used(iinst_in) = .true.
      probe%instance(iinst_in)%level = 0
      call system_clock(count_rate=probe%instance(iinst_in)%count_rate,count_max=probe%instance(iinst_in)%count_max)
      do isubr=0,${subr_list_size}$-1
         probe%instance(iinst_in)%timing(isubr)%n = 0
         probe%instance(iinst_in)%timing(isubr)%total = 0.0
         probe%instance(iinst_in)%timing(isubr)%min = huge_real
         probe%instance(iinst_in)%timing(isubr)%max = 0.0
         probe%instance(iinst_in)%timing(isubr)%total_own = 0.0
         probe%instance(iinst_in)%timing(isubr)%min_own = huge_real
         probe%instance(iinst_in)%timing(isubr)%max_own = 0.0
      end do
      probe%instance(iinst_in)%timing_associated = .false.
   end if

   ! Set global index
   iinst = iinst_in
end if

end subroutine probe_get_instance

!----------------------------------------------------------------------
! Subroutine: probe_in
!> Update probe when entering a subroutine/function
!----------------------------------------------------------------------
subroutine probe_in(probe,subr,key)

implicit none

! Passed variables
class(probe_type),intent(inout) :: probe !< Probe
character(len=*),intent(in) :: subr      !< Calling subroutine/function
integer,intent(in) :: key                !< Calling subroutine/function key

! Local variables
integer :: key_prev

if (omp_get_thread_num()==0) then
   ! Check instance
   if ((iinst<=0).or.(iinst>ninst)) then
      write(output_unit,'(a,i4,a)') 'Error: wrong instance in probe%in (',iinst,') called by '//trim(subr)
      call flush(output_unit)
      error stop 5
   end if

   ! Update level
   probe%instance(iinst)%level = probe%instance(iinst)%level+1

   ! Check level
   if (probe%instance(iinst)%level>maxlevel) then
      write(output_unit,'(a,i4,a,i4)') 'Error: calling level is too high: ',probe%instance(iinst)%level,' > ',maxlevel
      call flush(output_unit)
      call probe%traceback(output_unit)
      error stop 4
   end if

   ! Update trace
   probe%instance(iinst)%trace(probe%instance(iinst)%level) = trim(subr)
   probe%instance(iinst)%trace_key(probe%instance(iinst)%level) = key

   if (key>=0) then
      ! Initialize
      probe%instance(iinst)%timing(key)%subr = trim(subr)
      probe%instance(iinst)%timing_associated(key) = .true.

      ! Get input time
      call system_clock(count=probe%instance(iinst)%timing(key)%clock_start)
      probe%instance(iinst)%timing(key)%clock_restart = probe%instance(iinst)%timing(key)%clock_start
      probe%instance(iinst)%timing(key)%clock_own = 0

      if (probe%instance(iinst)%level>1) then
         ! Get key of the previous level
          key_prev = probe%instance(iinst)%trace_key(probe%instance(iinst)%level-1)

         if (key_prev>=0) then
            ! Increment own clock
            if (probe%instance(iinst)%timing(key_prev)%clock_own+probe%instance(iinst)%timing(key)%clock_start &
 & <probe%instance(iinst)%timing(key_prev)%clock_restart) then
               probe%instance(iinst)%timing(key_prev)%clock_own = probe%instance(iinst)%timing(key_prev)%clock_own &
 & +probe%instance(iinst)%timing(key)%clock_start-probe%instance(iinst)%timing(key_prev)%clock_restart &
 & +probe%instance(iinst)%count_max
            else
               probe%instance(iinst)%timing(key_prev)%clock_own = probe%instance(iinst)%timing(key_prev)%clock_own &
 & +probe%instance(iinst)%timing(key)%clock_start-probe%instance(iinst)%timing(key_prev)%clock_restart
            end if
         end if
      end if
   end if
end if

end subroutine probe_in

!----------------------------------------------------------------------
! Subroutine: probe_out
!> Update probe when exiting a subroutine/function
!----------------------------------------------------------------------
subroutine probe_out(probe,key)

implicit none

! Passed variables
class(probe_type),intent(inout) :: probe !< Probe
integer,intent(in) :: key                !< Calling subroutine/function key

! Local variables
integer :: key_prev,clock_end
real(kind_real) :: elapsed,elapsed_own

if (omp_get_thread_num()==0) then
   ! Check instance
   if ((iinst<=0).or.(iinst>ninst)) then
      write(output_unit,'(a,i4,a)') 'Error: wrong instance in probe%out (',iinst,')'
      call flush(output_unit)
      error stop 5
   end if

   if (key>=0) then
      ! Get output time
      call system_clock(count=clock_end)

      ! Compute elapsed times
      if (clock_end<probe%instance(iinst)%timing(key)%clock_start) then
         elapsed = real(clock_end-probe%instance(iinst)%timing(key)%clock_start+probe%instance(iinst)%count_max,kind_real) &
 & /real(probe%instance(iinst)%count_rate,kind_real)
      else
         elapsed = real(clock_end-probe%instance(iinst)%timing(key)%clock_start,kind_real) &
 & /real(probe%instance(iinst)%count_rate,kind_real)
      end if
      if (probe%instance(iinst)%timing(key)%clock_own+clock_end<probe%instance(iinst)%timing(key)%clock_restart) then
         elapsed_own = real(probe%instance(iinst)%timing(key)%clock_own+clock_end-probe%instance(iinst)%timing(key)%clock_restart &
 & +probe%instance(iinst)%count_max,kind_real)/real(probe%instance(iinst)%count_rate,kind_real)
      else
         elapsed_own = real(probe%instance(iinst)%timing(key)%clock_own+clock_end &
 & -probe%instance(iinst)%timing(key)%clock_restart,kind_real)/real(probe%instance(iinst)%count_rate,kind_real)
      end if

      ! Fill timing object
      probe%instance(iinst)%timing(key)%n = probe%instance(iinst)%timing(key)%n+1
      probe%instance(iinst)%timing(key)%total = probe%instance(iinst)%timing(key)%total+elapsed
      probe%instance(iinst)%timing(key)%min = min(probe%instance(iinst)%timing(key)%min,elapsed)
      probe%instance(iinst)%timing(key)%max = max(probe%instance(iinst)%timing(key)%max,elapsed)
      probe%instance(iinst)%timing(key)%total_own = probe%instance(iinst)%timing(key)%total_own+elapsed_own
      probe%instance(iinst)%timing(key)%min_own = min(probe%instance(iinst)%timing(key)%min_own,elapsed_own)
      probe%instance(iinst)%timing(key)%max_own = max(probe%instance(iinst)%timing(key)%max_own,elapsed_own)

      if (probe%instance(iinst)%level>1) then
         ! Get key of the previous level
         key_prev = probe%instance(iinst)%trace_key(probe%instance(iinst)%level-1)

         if (key_prev>=0) then
            ! Restart own clock
            probe%instance(iinst)%timing(key_prev)%clock_restart = clock_end
         end if
      end if
   end if

   ! Update level
   probe%instance(iinst)%level = probe%instance(iinst)%level-1
end if

end subroutine probe_out

!----------------------------------------------------------------------
! Subroutine: probe_traceback
!> Print probe traceback
!----------------------------------------------------------------------
subroutine probe_traceback(probe,lunit)

implicit none

! Passed variables
class(probe_type),intent(in) :: probe !< Probe
integer,intent(in) :: lunit           !< Logical unit

! Local variables
integer :: i,indent
character(len=3) :: cindent

if (omp_get_thread_num()==0) then
   ! Check instance
   if ((iinst<=0).or.(iinst>ninst)) then
      write(output_unit,'(a,i4,a)') 'Error: wrong instance probe%traceback (',iinst,')'
      call flush(output_unit)
      error stop 5
   end if

   ! Print traceback
   write(lunit,'(a,i3,a)') '    Traceback for instance',iinst,' :'
   do i=1,min(probe%instance(iinst)%level,maxlevel)
      ! Define indentation
      indent = 3*i+4

      ! Define indentation format
      if (indent<10) then
         write(cindent,'(a,i1)') 'a',indent
      elseif (indent<100) then
         write(cindent,'(a,i2)') 'a',indent
      end if

      ! Write trace
      write(lunit,'('//trim(cindent)//',a,a)') '','|-> ',trim(probe%instance(iinst)%trace(i))
   end do

   ! Flush
   call flush(lunit)
end if

end subroutine probe_traceback

end module type_probe
