#:include '../generics.fypp'
#:include '../instrumentation.fypp'
!----------------------------------------------------------------------
! Module: tools_atlas
!> ATLAS tools
! Author: Benjamin Menetrier
! Licensing: this code is distributed under the CeCILL-C license
! Copyright 2015-... UCAR, CERFACS, METEO-FRANCE and IRIT
!----------------------------------------------------------------------
module tools_atlas

use atlas_module, only: atlas_structuredgrid,atlas_regionalgrid,atlas_field,atlas_integer,atlas_real,atlas_functionspace, &
 & atlas_functionspace_nodecolumns,atlas_functionspace_pointcloud,atlas_functionspace_structuredcolumns
use tools_const, only: zero,quarter,half,rad2deg
use tools_kinds, only: kind_int,kind_real
use tools_func, only: sphere_dist,convert_i2l,convert_l2i
use tools_netcdf, only: create_file
use type_mpl, only: mpl_type
@:use_probe()

implicit none

interface get_grid
   module procedure atlas_get_global_grid
   module procedure atlas_get_regional_grid
end interface
interface field_to_array
   #:for rank in ranks_23
      #:for dtype in dtypes_irl
         module procedure atlas_field_to_array_${dtype}$_r${rank}$
      #:endfor
   #:endfor
end interface
interface field_from_array
   #:for rank in ranks_23
      #:for dtype in dtypes_irl
         module procedure atlas_field_from_array_${dtype}$_r${rank}$
      #:endfor
   #:endfor
end interface
interface create_atlas_function_space
   module procedure atlas_create_atlas_function_space
end interface
interface get_atlas_field_size
   module procedure atlas_get_atlas_field_size
end interface

private
public :: get_grid
public :: field_to_array,field_from_array,create_atlas_function_space,get_atlas_field_size

contains

!----------------------------------------------------------------------
! Subroutine: atlas_get_global_grid
!> Define global ATLAS grid (reduced Gaussian) from minimum number of points
!----------------------------------------------------------------------
subroutine atlas_get_global_grid(mpl,nmin,agrid,n)

implicit none

! Passed variables
type(mpl_type),intent(inout) :: mpl               !< MPI data
integer,intent(in) :: nmin                        !< Minimum number of points
type(atlas_structuredgrid),intent(inout) :: agrid !< ATLAS grid
integer,intent(out),optional :: n                 !< Grid size

! Local variables
integer :: trunc
character(len=6) :: gridid

! Set name
@:set_name(atlas_get_global_grid)

! Probe in
@:probe_in()

! Check number of points
if (nmin<3) call mpl%abort('${subr}$','minimum number of points is too small')

! Get truncation
trunc = int(-4.5_kind_real+sqrt(20.25_kind_real+quarter*real(nmin,kind_real)))+1

! Define ID
write(gridid,'(a,i5.5)') 'O',trunc

! Define grid
agrid = atlas_structuredgrid(gridid)

! Define number of points
if (present(n)) n = 4*trunc**2+36*trunc

! Probe out
@:probe_out()

end subroutine atlas_get_global_grid

!----------------------------------------------------------------------
! Subroutine: atlas_get_regional_grid
!> Define regional ATLAS grid from minimum number of points
!----------------------------------------------------------------------
subroutine atlas_get_regional_grid(mpl,nmin,lon_min,lon_max,lat_min,lat_max,agrid,n)

implicit none

! Passed variables
type(mpl_type),intent(inout) :: mpl               !< MPI data
integer,intent(in) :: nmin                        !< Minimum number of points
real(kind_real),intent(in) :: lon_min             !< Minimum longitude
real(kind_real),intent(in) :: lon_max             !< Maximum longitude
real(kind_real),intent(in) :: lat_min             !< Minimum latitude
real(kind_real),intent(in) :: lat_max             !< Maximum latitude
type(atlas_structuredgrid),intent(inout) :: agrid !< ATLAS grid
integer,intent(out),optional :: n                 !< Grid size

! Local variables
integer :: nx,ny
real(kind_real) :: lat_mid,dx,dy,alpha

! Set name
@:set_name(atlas_get_global_grid)

! Probe in
@:probe_in()

! Check number of points
if (nmin<3) call mpl%abort('${subr}$','minimum number of points is too small')

! Shape ratio
lat_mid = half*(lat_min+lat_max)
call sphere_dist(lon_min,lat_mid,lon_max,lat_mid,dx)
call sphere_dist(zero,lat_min,zero,lat_max,dy)
alpha = dy/dx
nx = ceiling(sqrt(real(nmin,kind_real)/alpha))
ny = ceiling(alpha*real(nx,kind_real))

! Regional grid
agrid = atlas_regionalgrid(nx,ny,lat_max*rad2deg,lon_min*rad2deg,lat_min*rad2deg,lon_max*rad2deg)

! Define number of points
if (present(n)) n = nx*ny

! Probe out
@:probe_out()

end subroutine atlas_get_regional_grid

#:for rank in ranks_23
   #:for dtype in dtypes_ir
!----------------------------------------------------------------------
! Subroutine: atlas_field_to_array_${dtype}$_r${rank}$
!> Convert ATLAS field to field
!----------------------------------------------------------------------
subroutine atlas_field_to_array_${dtype}$_r${rank}$(afield,mpl,array,lev2d)

implicit none

! Passed variables
type(atlas_field),intent(in) :: afield               !< ATLAS field
type(mpl_type),intent(inout) :: mpl                  !< MPI data
${ftype[dtype]}$,intent(out) :: array(${dim[rank]}$) !< Array, the rightmost dimension being the vertical
character(len=*),intent(in),optional :: lev2d        !< Level for 2D variables

! Local variables
integer :: nmga,nnodes,nl0,nl2d,il0
integer :: shp(${rank}$)
${ftype[dtype]}$,pointer :: ptr_1(:),ptr_2(:,:)
character(len=1024) :: llev2d

! Set name
@:set_name(atlas_field_to_array_${dtype}$_r${rank}$)

! Probe in
@:probe_in()

! Local lev2d
llev2d = 'first'
if (present(lev2d)) llev2d = lev2d
if (.not.((trim(llev2d)=='first').or.(trim(llev2d)=='last'))) call mpl%abort('${subr}$','wrong lev2d')

! Check kind
if (afield%kind()/=${atlas_kind[dtype]}$) call mpl%abort('${subr}$','wrong kind for field '//afield%name())

! Get ATLAS field size
nmga = get_atlas_field_size(mpl,afield)

! Get number of nodes and number of levels
! - the size of the rightmost dimension of arr2d/arr3d is the number of levels (nl0)
! - the product of the other dimenstions give the number of nodes (nnodes)
shp = shape(array)
nl0 = shp(${rank}$)
nnodes = product(shp(1:${rank}$-1))

! Check number of nodes
if (nmga/=nnodes) call mpl%abort('${subr}$','wrong number of nodes for field '//afield%name())

! Initialization
array = ${zero[dtype]}$

! Copy data
! afield%levels() is 0 for 2D ATLAS fields, positive for 3D fields
! For the 2D case (afield%levels()==0), the field is copied:
! - at the first level of array if (lev2d=='first')
! - at the last level of array if (lev2d=='last')
if (afield%levels()==0) then
   if (trim(llev2d)=='first') then
      nl2d = 1
   elseif (trim(llev2d)=='last') then
      nl2d = nl0
   end if
   call afield%data(ptr_1)
   if (nmga>0) then
      #{if rank == 2}# array(:,nl2d) = ptr_1(1:nmga) #{endif}#
      #{if rank == 3}# array(:,:,nl2d) = reshape(ptr_1(1:nmga),shp(1:2)) #{endif}#
   end if
else
   if (nl0>afield%levels()) call mpl%abort('${subr}$','not enough levels in ATLAS field')
   call afield%data(ptr_2)
   if (nmga>0) then
      do il0=1,nl0
         #{if rank == 2}# array(:,il0) = ptr_2(il0,1:nmga) #{endif}#
         #{if rank == 3}# array(:,:,il0) = reshape(ptr_2(il0,1:nmga),shp(1:2)) #{endif}#
      end do
   end if
end if

! Probe out
@:probe_out()

end subroutine atlas_field_to_array_${dtype}$_r${rank}$
   #:endfor
#:endfor

#:for rank in ranks_23
!----------------------------------------------------------------------
! Subroutine: atlas_field_to_array_logical_r${rank}$
!> Convert ATLAS field to field
!----------------------------------------------------------------------
subroutine atlas_field_to_array_logical_r${rank}$(afield,mpl,array,lev2d)

implicit none

! Passed variables
type(atlas_field),intent(in) :: afield        !< ATLAS field
type(mpl_type),intent(inout) :: mpl           !< MPI data
logical,intent(out) :: array(${dim[rank]}$)   !< Array, the rightmost dimension being the vertical
character(len=*),intent(in),optional :: lev2d !< Level for 2D variables

! Local variables
integer :: shp(${rank}$)
integer,allocatable :: array_int(${dim[rank]}$)
character(len=1024) :: llev2d

! Set name
@:set_name(atlas_field_to_array_logical_r${rank}$)

! Probe in
@:probe_in()

! Local lev2d
llev2d = 'first'
if (present(lev2d)) llev2d = lev2d
if (.not.((trim(llev2d)=='first').or.(trim(llev2d)=='last'))) call mpl%abort('${subr}$','wrong lev2d')

! Allocation
shp = shape(array)
#{if rank == 2}# allocate(array_int(shp(1),shp(2))) #{endif}#
#{if rank == 3}# allocate(array_int(shp(1),shp(2),shp(3))) #{endif}#

! Get integer array
call field_to_array(afield,mpl,array_int,lev2d)

! Convert integer to logical
call convert_i2l(mpl,array_int,array)

! Release memory
deallocate(array_int)

! Probe out
@:probe_out()

end subroutine atlas_field_to_array_logical_r${rank}$
#:endfor

#:for rank in ranks_23
   #:for dtype in dtypes_ir
!----------------------------------------------------------------------
! Subroutine: atlas_field_from_array_${dtype}$_r${rank}$
!> Convert field to ATLAS field, real
!----------------------------------------------------------------------
subroutine atlas_field_from_array_${dtype}$_r${rank}$(afield,mpl,array,lev2d)

implicit none

! Passed variables
type(atlas_field),intent(inout) :: afield            !< ATLAS field
type(mpl_type),intent(inout) :: mpl                  !< MPI data
${ftype[dtype]}$,intent(in) :: array(${dim[rank]}$)  !< Array, the rightmost dimension being the vertical
character(len=*),intent(in),optional :: lev2d        !< Level for 2D variables

! Local variables
integer :: nmga,nnodes,nl0,nl2d,il0
integer :: shp(${rank}$)
${ftype[dtype]}$,pointer :: ptr_1(:),ptr_2(:,:)
character(len=1024) :: llev2d
type(atlas_functionspace) :: afunctionspace

! Set name
@:set_name(atlas_field_from_array_${dtype}$_r${rank}$)

! Probe in
@:probe_in()

! Local lev2d
llev2d = 'first'
if (present(lev2d)) llev2d = lev2d
if (.not.((trim(llev2d)=='first').or.(trim(llev2d)=='last'))) call mpl%abort('${subr}$','wrong lev2d')

! Check kind
if (afield%kind()/=${atlas_kind[dtype]}$) call mpl%abort('${subr}$','wrong kind for field '//afield%name())

! Get ATLAS field size
nmga = get_atlas_field_size(mpl,afield)

! Get number of nodes and number of levels
! - the size of the rightmost dimension of arr2d/arr3d is the number of levels (nl0)
! - the product of the other dimenstions give the number of nodes (nnodes)
shp = shape(array)
nl0 = shp(${rank}$)
nnodes = product(shp(1:${rank}$-1))

! Check number of nodes
if (nmga/=nnodes) call mpl%abort('${subr}$','wrong number of nodes for field '//afield%name())

! Copy data
! afield%levels() is 0 for 2D ATLAS fields, positive for 3D fields
! For the 2D case (afield%levels()==0), the field is copied:
! - at the first level of array if (lev2d=='first')
! - at the last level of array if (lev2d=='last')
if (afield%levels()==0) then
   if (trim(llev2d)=='first') then
      nl2d = 1
   elseif (trim(llev2d)=='last') then
      nl2d = nl0
   end if
   call afield%data(ptr_1)
   if (nmga>0) then
      #{if rank == 2}# ptr_1(1:nmga) = array(:,nl2d) #{endif}#
      #{if rank == 3}# ptr_1(1:nmga) = reshape(array(:,:,nl2d),(/product(shp(1:2))/)) #{endif}#
   end if
else
   if (nl0>afield%levels()) call mpl%abort('${subr}$','not enough levels in ATLAS field')
   call afield%data(ptr_2)
   if (nmga>0) then
      do il0=1,nl0
         #{if rank == 2}# ptr_2(il0,1:nmga) = array(:,il0) #{endif}#
         #{if rank == 3}# ptr_2(il0,1:nmga) = reshape(array(:,:,il0),(/product(shp(1:2))/)) #{endif}#
      end do
   end if
end if

! Halo exchange
afunctionspace = afield%functionspace()
call afunctionspace%halo_exchange(afield)

! Probe out
@:probe_out()

end subroutine atlas_field_from_array_${dtype}$_r${rank}$
   #:endfor
#:endfor

#:for rank in ranks_23
!----------------------------------------------------------------------
! Subroutine: atlas_field_from_array_logical_r${rank}$
!> Convert ATLAS field from field
!----------------------------------------------------------------------
subroutine atlas_field_from_array_logical_r${rank}$(afield,mpl,array,lev2d)

implicit none

! Passed variables
type(atlas_field),intent(inout) :: afield     !< ATLAS field
type(mpl_type),intent(inout) :: mpl           !< MPI data
logical,intent(in) :: array(${dim[rank]}$)    !< Array, the rightmost dimension being the vertical
character(len=*),intent(in),optional :: lev2d !< Level for 2D variables

! Local variables
integer :: shp(${rank}$)
integer,allocatable :: array_int(${dim[rank]}$)
character(len=1024) :: llev2d

! Set name
@:set_name(atlas_field_from_array_logical_r${rank}$)

! Probe in
@:probe_in()

! Local lev2d
llev2d = 'first'
if (present(lev2d)) llev2d = lev2d
if (.not.((trim(llev2d)=='first').or.(trim(llev2d)=='last'))) call mpl%abort('${subr}$','wrong lev2d')

! Allocation
shp = shape(array)
#{if rank == 2}# allocate(array_int(shp(1),shp(2))) #{endif}#
#{if rank == 3}# allocate(array_int(shp(1),shp(2),shp(3))) #{endif}#

! Convert logical to integer
call convert_l2i(array,array_int)

! Set integer array
call field_from_array(afield,mpl,array_int,lev2d)

! Release memory
deallocate(array_int)

! Probe out
@:probe_out()

end subroutine atlas_field_from_array_logical_r${rank}$
#:endfor

!----------------------------------------------------------------------
! Subroutine: atlas_create_atlas_function_space
!> Create ATLAS function space from lon/lat
!----------------------------------------------------------------------
subroutine atlas_create_atlas_function_space(nmga,lon_mga,lat_mga,afunctionspace)

implicit none

! Passed variables
integer,intent(in) :: nmga                              !< Number of nodes
real(kind_real),intent(in) :: lon_mga(nmga)             !< Longitudes [in degrees]
real(kind_real),intent(in) :: lat_mga(nmga)             !< Latitudes [in degrees]
type(atlas_functionspace),intent(out) :: afunctionspace !< ATLAS function space

! Local variables
integer :: imga
real(kind_real),pointer :: real_ptr(:,:)
type(atlas_field) :: afield

! Set name
@:set_name(atlas_create_atlas_function_space)

! Probe in
@:probe_in()

! Create lon/lat field
afield = atlas_field(name='lonlat',kind=atlas_real(kind_real),shape=(/2,nmga/))
call afield%data(real_ptr)
do imga=1,nmga
   real_ptr(1,imga) = lon_mga(imga)
   real_ptr(2,imga) = lat_mga(imga)
end do

! Create function space PointCloud
afunctionspace = atlas_functionspace_pointcloud(afield)

! Probe out
@:probe_out()

end subroutine atlas_create_atlas_function_space

!----------------------------------------------------------------------
! Function: atlas_get_atlas_field_size
!> Get the local horizontal size of an ATLAS field
!----------------------------------------------------------------------
function atlas_get_atlas_field_size(mpl,afield) result(nmga)

implicit none

! Passed variables
type(mpl_type),intent(inout) :: mpl    !< MPI data
type(atlas_field),intent(in) :: afield !< ATLAS field

! Returned variable
integer :: nmga

! Local variables
type(atlas_functionspace) :: afunctionspace
type(atlas_functionspace_nodecolumns) :: afunctionspace_nc
type(atlas_functionspace_pointcloud) :: afunctionspace_pc
type(atlas_functionspace_structuredcolumns) :: afunctionspace_sc

! Set name
@:set_name(atlas_get_atlas_field_size)

! Probe in
@:probe_in()

! Get generic functionspace
afunctionspace = afield%functionspace()

select case (afunctionspace%name())
case ('NodeColumns')
   ! Get NodeColumns function space
   afunctionspace_nc = afield%functionspace()

   ! Get number of nodes
   nmga = afunctionspace_nc%nb_nodes()
case ('PointCloud')
   ! Get PointCloud function space
   afunctionspace_pc = afield%functionspace()

   ! Get number of points
   nmga = afunctionspace_pc%size()
case ('StructuredColumns')
   ! Get StructuredColumns function space
   afunctionspace_sc = afield%functionspace()

   ! Get number of nodes
   nmga = afunctionspace_sc%size_owned()
case default
   call mpl%abort('${subr}$','wrong function space for field '//afield%name()//': '//afunctionspace%name())
end select

! Probe out
@:probe_out()

end function atlas_get_atlas_field_size

end module tools_atlas
