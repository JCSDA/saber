#:include '../generics.fypp'
#:include '../instrumentation.fypp'
!----------------------------------------------------------------------
! Module: tools_repro
!> Reproducibility functions
! Author: Benjamin Menetrier
! Licensing: this code is distributed under the CeCILL-C license
! Copyright 2015-... UCAR, CERFACS, METEO-FRANCE and IRIT
!----------------------------------------------------------------------
module tools_repro

use tools_const, only: pi
use tools_kinds, only: kind_int,kind_real
use type_probe, only: probe

implicit none

logical :: repro = .true.                  !< Reproducibility flag
real(kind_real),parameter :: rth = 1.0e-12 !< Reproducibility threshold

interface eq
  #:for dtype,ftype in types_irl
     module procedure repro_eq_${dtype}$
  #:endfor
end interface
interface inf
  #:for dtype,ftype in types_ir
     module procedure repro_inf_${dtype}$
  #:endfor
end interface
interface infeq
  #:for dtype,ftype in types_ir
     module procedure repro_infeq_${dtype}$
  #:endfor
end interface
interface sup
  #:for dtype,ftype in types_ir
     module procedure repro_sup_${dtype}$
  #:endfor
end interface
interface supeq
  #:for dtype,ftype in types_ir
     module procedure repro_supeq_${dtype}$
  #:endfor
end interface
interface indist
   module procedure repro_indist
end interface
interface small
   module procedure repro_small
end interface

private
public :: repro,rth
public :: eq,inf,infeq,sup,supeq,indist,small

contains

#:for dtype,ftype in types_irl
!----------------------------------------------------------------------
! Function: repro_eq_${dtype}$
!> Equal test for ${dtype}$
!----------------------------------------------------------------------
function repro_eq_${dtype}$(x,y) result(test)

implicit none

! Passed variables
${ftype}$,intent(in) :: x !< First real
${ftype}$,intent(in) :: y !< Second real

! Returned variable
logical :: test

! Set name
#:set subr = 'repro_eq_${dtype}$'

! Probe in
@:probe_in()

#{if dtype == 'int'}# test = (x==y) #{endif}#
#:if dtype == 'real'
   if (repro) then
      test = indist(x,y)
   else
      test = .not.(abs(x-y)>0.0)
   end if
#:endif
#{if dtype == 'logical'}# test = (x.eqv.y) #{endif}#

! Probe out
@:probe_out()

end function repro_eq_${dtype}$
#:endfor

#:for dtype,ftype in types_ir
!----------------------------------------------------------------------
! Function: repro_inf_${dtype}$
!> Inferior test for ${dtype}$
!----------------------------------------------------------------------
function repro_inf_${dtype}$(x,y) result(test)

implicit none

! Passed variables
${ftype}$,intent(in) :: x !< First real
${ftype}$,intent(in) :: y !< Second real

! Returned variable
logical :: test

! Set name
#:set subr = 'repro_inf_${dtype}$'

! Probe in
@:probe_in()

test = (x<y)
#{if dtype == 'real'}# if (repro) test = test.and.(.not.indist(x,y)) #{endif}#

! Probe out
@:probe_out()

end function repro_inf_${dtype}$
#:endfor

#:for dtype,ftype in types_ir
!----------------------------------------------------------------------
! Function: repro_infeq_${dtype}$
!> Inferior or equal test for ${dtype}$
!----------------------------------------------------------------------
function repro_infeq_${dtype}$(x,y) result(test)

implicit none

! Passed variables
${ftype}$,intent(in) :: x !< First real
${ftype}$,intent(in) :: y !< Second real

! Returned variable
logical :: test

! Set name
#:set subr = 'repro_infeq_${dtype}$'

! Probe in
@:probe_in()

test = inf(x,y).or.eq(x,y)

! Probe out
@:probe_out()

end function repro_infeq_${dtype}$
#:endfor

#:for dtype,ftype in types_ir
!----------------------------------------------------------------------
! Function: repro_sup_${dtype}$
!> Superior test for ${dtype}$
!----------------------------------------------------------------------
function repro_sup_${dtype}$(x,y) result(test)

implicit none

! Passed variables
${ftype}$,intent(in) :: x !< First real
${ftype}$,intent(in) :: y !< Second real

! Returned variable
logical :: test

! Set name
#:set subr = 'repro_sup_${dtype}$'

! Probe in
@:probe_in()

test = (x>y)
#{if dtype == 'real'}# if (repro) test = test.and.(.not.indist(x,y)) #{endif}#

! Probe out
@:probe_out()

end function repro_sup_${dtype}$
#:endfor

#:for dtype,ftype in types_ir
!----------------------------------------------------------------------
! Function: repro_supeq_${dtype}$
!> Superior or equal test for ${dtype}$
!----------------------------------------------------------------------
function repro_supeq_${dtype}$(x,y) result(test)

implicit none

! Passed variables
${ftype}$,intent(in) :: x !< First real
${ftype}$,intent(in) :: y !< Second real

! Returned variable
logical :: test

! Set name
#:set subr = 'repro_supeq_${dtype}$'

! Probe in
@:probe_in()

test = sup(x,y).or.eq(x,y)

! Probe out
@:probe_out()

end function repro_supeq_${dtype}$
#:endfor

!----------------------------------------------------------------------
! Function: repro_indist
!> Indistiguishability test
!----------------------------------------------------------------------
function repro_indist(x,y) result(test)

implicit none

! Passed variables
real(kind_real),intent(in) :: x !< First real
real(kind_real),intent(in) :: y !< Second real

! Returned variable
logical :: test

! Set name
#:set subr = 'repro_indist'

! Probe in
@:probe_in()

test = .false.
if (repro) then
      if ((abs(x)>0.0).or.(abs(y)>0.0)) then
      test = abs(x-y)<rth*(abs(x+y))
   else
      test = .true.
   end if
end if

! Probe out
@:probe_out()

end function repro_indist

!----------------------------------------------------------------------
! Function: repro_small
!> Small value test
!----------------------------------------------------------------------
function repro_small(x,y) result(test)

implicit none

! Passed variables
real(kind_real),intent(in) :: x !< First real
real(kind_real),intent(in) :: y !< Second real

! Returned variable
logical :: test

! Set name
#:set subr = 'repro_small'

! Probe in
@:probe_in()

test = .false.
if (repro) test = abs(x)<rth*abs(y)

! Probe out
@:probe_out()

end function repro_small

end module tools_repro
