#:include '../instrumentation.fypp'
!----------------------------------------------------------------------
! Module: type_vbal
!> Vertical balance derived type
! Author: Benjamin Menetrier
! Licensing: this code is distributed under the CeCILL-C license
! Copyright 2015-... UCAR, CERFACS, METEO-FRANCE and IRIT
!----------------------------------------------------------------------
module type_vbal

use fckit_mpi_module, only: fckit_mpi_sum
!$ use omp_lib
use netcdf, only: nf90_close,nf90_get_att,nf90_get_var,nf90_global,nf90_inq_grp_ncid,nf90_inq_varid,nf90_nowrite,nf90_open, &
 & nf90_put_att,nf90_put_var,nf90_write
use tools_const, only: zero,one,two,rad2deg
use tools_func, only: lonlathash
use tools_kinds, only: kind_real,nc_kind_int,nc_kind_real
use tools_repro, only: infeq
use type_bpar, only: bpar_type
use type_ens, only: ens_type
use type_geom, only: geom_type
use type_io, only: io_type
use type_mpl, only: mpl_type
use type_nam, only: nam_type
@:use_probe()
use type_rng, only: rng_type
use type_samp, only: samp_type
use type_vbal_blk, only: vbal_blk_type

implicit none

! Vertical balance derived type
type vbal_type
   ! Sampling
   type(samp_type) :: samp                     !< Sampling

   ! Vertical balance data
   logical :: allocated                        !< Allocation flag
   integer,allocatable :: h_n_s(:,:)           !< Number of neighbors for the horizontal interpolation
   integer,allocatable :: h_c2b(:,:,:)         !< Index of neighbors for the horizontal interpolation
   real(kind_real),allocatable :: h_S(:,:,:)   !< Weight of neighbors for the horizontal interpolation
   type(vbal_blk_type),allocatable :: blk(:,:) !< Vertical balance blocks

   ! I/O
   type(io_type) :: io                         !< I/O
contains
   procedure :: alloc => vbal_alloc
   procedure :: partial_dealloc => vbal_partial_dealloc
   procedure :: dealloc => vbal_dealloc
   procedure :: read => vbal_read
   procedure :: write => vbal_write
   procedure :: run_vbal => vbal_run_vbal
   procedure :: run_vbal_tests => vbal_run_vbal_tests
   procedure :: apply => vbal_apply
   procedure :: apply_inv => vbal_apply_inv
   procedure :: apply_ad => vbal_apply_ad
   procedure :: apply_inv_ad => vbal_apply_inv_ad
   procedure :: test_inverse => vbal_test_inverse
   procedure :: test_adjoint => vbal_test_adjoint
   procedure :: test_dirac => vbal_test_dirac
end type vbal_type

private
public :: vbal_type

contains

!----------------------------------------------------------------------
! Subroutine: vbal_alloc
!> Allocation
!----------------------------------------------------------------------
subroutine vbal_alloc(vbal,nam,geom,bpar)

implicit none

! Passed variables
class(vbal_type),intent(inout) :: vbal !< Vertical balance
type(nam_type),intent(in) :: nam       !< Namelist
type(geom_type),intent(in) :: geom     !< Geometry
type(bpar_type),intent(in) :: bpar     !< Block parameters

! Local variables
integer :: iv,jv

! Set name
@:set_name(vbal_alloc)

! Probe in
@:probe_in()

! Allocation
allocate(vbal%h_n_s(geom%nc0a,geom%nl0i))
allocate(vbal%h_c2b(3,geom%nc0a,geom%nl0i))
allocate(vbal%h_S(3,geom%nc0a,geom%nl0i))
allocate(vbal%blk(nam%nv,nam%nv))
do iv=1,nam%nv
   do jv=1,nam%nv
      if (bpar%vbal_block(iv,jv)) then
         call vbal%blk(iv,jv)%alloc(nam,geom,vbal%samp%nc2b,iv,jv)
      end if
   end do
end do

! Update allocation flag
vbal%allocated = .true.

! Probe out
@:probe_out()

end subroutine vbal_alloc

!----------------------------------------------------------------------
! Subroutine: vbal_partial_dealloc
!> Release memory (partial)
!----------------------------------------------------------------------
subroutine vbal_partial_dealloc(vbal)

implicit none

! Passed variables
class(vbal_type),intent(inout) :: vbal !< Vertical balance

! Local variables
integer :: iv,jv

! Set name
@:set_name(vbal_partial_dealloc)

! Probe in
@:probe_in()

! Release memory
if (allocated(vbal%blk)) then
   do jv=1,size(vbal%blk,2)
      do iv=1,size(vbal%blk,1)
         call vbal%blk(iv,jv)%partial_dealloc
      end do
   end do
end if

! Probe out
@:probe_out()

end subroutine vbal_partial_dealloc

!----------------------------------------------------------------------
! Subroutine: vbal_dealloc
!> Release memory (full)
!----------------------------------------------------------------------
subroutine vbal_dealloc(vbal)

implicit none

! Passed variables
class(vbal_type),intent(inout) :: vbal !< Vertical balance

! Local variables
integer :: iv,jv

! Set name
@:set_name(vbal_dealloc)

! Probe in
@:probe_in()

! Release memory
if (allocated(vbal%h_n_s)) deallocate(vbal%h_n_s)
if (allocated(vbal%h_c2b)) deallocate(vbal%h_c2b)
if (allocated(vbal%h_S)) deallocate(vbal%h_S)
if (allocated(vbal%blk)) then
   do jv=1,size(vbal%blk,2)
      do iv=1,size(vbal%blk,1)
         call vbal%blk(iv,jv)%dealloc
      end do
   end do
   deallocate(vbal%blk)
end if
call vbal%samp%dealloc
call vbal%io%dealloc

! Update allocation flag
vbal%allocated = .false.

! Probe out
@:probe_out()

end subroutine vbal_dealloc

!----------------------------------------------------------------------
! Subroutine: vbal_read
!> Read
!----------------------------------------------------------------------
subroutine vbal_read(vbal,mpl,rng,nam,geom,bpar,ens)

implicit none

! Passed variables
class(vbal_type),intent(inout) :: vbal !< Vertical balance
type(mpl_type),intent(inout) :: mpl    !< MPI data
type(rng_type),intent(inout) :: rng    !< Random number generator
type(nam_type),intent(inout) :: nam    !< Namelist
type(geom_type),intent(in) :: geom     !< Geometry
type(bpar_type),intent(in) :: bpar     !< Block parameters
type(ens_type), intent(inout) :: ens   !< Ensemble

! Local variables
integer :: iv,jv,ic2a,ic2b,i_s,ic0a,il0i
real(kind_real),allocatable :: hash_c2a(:),reg_c2a(:,:),reg_c2b(:,:)
character(len=1024) :: filename,grpname

! Set name
@:set_name(vbal_read)

! Probe in
@:probe_in()

! Setup sampling
write(mpl%info,'(a)') '-------------------------------------------------------------------'
call mpl%flush
write(mpl%info,'(a)') '--- Setup sampling'
call mpl%flush
call vbal%samp%setup('vbal',mpl,rng,nam,geom,ens)

! Allocation
call vbal%alloc(nam,geom,bpar)

! Read vertical balance operators
write(mpl%info,'(a)') '-------------------------------------------------------------------'
call mpl%flush
write(mpl%info,'(a)') '--- Read vertical balance operators'
call mpl%flush

! Allocation
allocate(hash_c2a(vbal%samp%nc2a))
allocate(reg_c2a(vbal%samp%nc2a,geom%nl0**2))
allocate(reg_c2b(vbal%samp%nc2b,geom%nl0**2))

! Set file name
filename = trim(nam%prefix)//'_vbal'

! Compute hash value
do ic2a=1,vbal%samp%nc2a
   hash_c2a(ic2a) = lonlathash(vbal%samp%lon_c2a(ic2a),vbal%samp%lat_c2a(ic2a))
end do

! Setup fields output
call vbal%io%init(mpl,nam,'2',vbal%samp%nc2,vbal%samp%nc2a,vbal%samp%c2a_to_c2,vbal%samp%proc_to_c2_offset,.true.,hash_c2a)
do iv=1,nam%nv
   do jv=1,nam%nv
      if (bpar%vbal_block(iv,jv)) then
         ! Define group name
         call nam%io_key_value(vbal%blk(iv,jv)%name,grpname)

         ! Read variables
         call vbal%io%fld_read(mpl,nam,filename,'reg',reg_c2a,groupname=grpname)

         ! Local values, first dimension
         call vbal%samp%com_c2_AB%ext(mpl,reg_c2a,reg_c2b)

         ! Reshape data, horizontal index as last dimension
         do ic2b=1,vbal%samp%nc2b
            vbal%blk(iv,jv)%reg(:,:,ic2b) = reshape(reg_c2b(ic2b,:),(/geom%nl0,geom%nl0/))
         end do
      end if
   end do
end do

! Initialization
vbal%h_n_s = 0
vbal%h_c2b = mpl%msv%vali
vbal%h_S = mpl%msv%valr

! Get interpolation coefficients
do il0i=1,geom%nl0i
   do i_s=1,vbal%samp%interp_c2b_to_c0a(il0i)%n_s
      ic0a = vbal%samp%interp_c2b_to_c0a(il0i)%row(i_s)
      vbal%h_n_s(ic0a,il0i) = vbal%h_n_s(ic0a,il0i)+1
      vbal%h_c2b(vbal%h_n_s(ic0a,il0i),ic0a,il0i) = vbal%samp%interp_c2b_to_c0a(il0i)%col(i_s)
      vbal%h_S(vbal%h_n_s(ic0a,il0i),ic0a,il0i) = vbal%samp%interp_c2b_to_c0a(il0i)%S(i_s)
   end do
end do

! Release memory
deallocate(hash_c2a)
deallocate(reg_c2a)
deallocate(reg_c2b)

! Probe out
@:probe_out()

end subroutine vbal_read

!----------------------------------------------------------------------
! Subroutine: vbal_write
!> Write
!----------------------------------------------------------------------
subroutine vbal_write(vbal,mpl,nam,geom,bpar)

implicit none

! Passed variables
class(vbal_type),intent(inout) :: vbal !< Vertical balance
type(mpl_type),intent(inout) :: mpl    !< MPI data
type(nam_type),intent(in) :: nam       !< Namelist
type(geom_type),intent(in) :: geom     !< Geometry
type(bpar_type),intent(in) :: bpar     !< Block parameters

! Local variables
integer :: iv,jv,ic2a,ic2b
real(kind_real) :: hash_c2a(vbal%samp%nc2a),reg_c2a(vbal%samp%nc2a,geom%nl0**2),auto_c2a(vbal%samp%nc2a,geom%nl0**2)
real(kind_real) :: cross_c2a(vbal%samp%nc2a,geom%nl0**2),auto_inv_c2a(vbal%samp%nc2a,geom%nl0**2)
character(len=1024) :: filename,grpname

! Set name
@:set_name(vbal_write)

! Probe in
@:probe_in()

! Set file name
filename = trim(nam%prefix)//'_vbal'

! Compute hash value
do ic2a=1,vbal%samp%nc2a
   hash_c2a(ic2a) = lonlathash(vbal%samp%lon_c2a(ic2a),vbal%samp%lat_c2a(ic2a))
end do

! Setup fields output
call vbal%io%init(mpl,nam,'2',vbal%samp%nc2,vbal%samp%nc2a,vbal%samp%c2a_to_c2,vbal%samp%proc_to_c2_offset,.true.,hash_c2a)

do iv=1,nam%nv
   do jv=1,nam%nv
      if (bpar%vbal_block(iv,jv)) then
         ! Define group name
         call nam%io_key_value(vbal%blk(iv,jv)%name,grpname)

         ! Reshape data for local values, horizontal index as first dimension
         do ic2a=1,vbal%samp%nc2a
            ic2b = vbal%samp%c2a_to_c2b(ic2a)
            reg_c2a(ic2a,:) = reshape(vbal%blk(iv,jv)%reg(:,:,ic2b),(/geom%nl0**2/))
            auto_c2a(ic2a,:) = reshape(vbal%blk(iv,jv)%auto(:,:,ic2b),(/geom%nl0**2/))
            cross_c2a(ic2a,:) = reshape(vbal%blk(iv,jv)%cross(:,:,ic2b),(/geom%nl0**2/))
            auto_inv_c2a(ic2a,:) = reshape(vbal%blk(iv,jv)%auto_inv(:,:,ic2b),(/geom%nl0**2/))
         end do

         ! Write variables
         call vbal%io%fld_write(mpl,nam,filename,'reg',reg_c2a,groupname=grpname)
         call vbal%io%fld_write(mpl,nam,filename,'auto',auto_c2a,groupname=grpname)
         call vbal%io%fld_write(mpl,nam,filename,'cross',cross_c2a,groupname=grpname)
         call vbal%io%fld_write(mpl,nam,filename,'auto_inv',auto_inv_c2a,groupname=grpname)
      end if
   end do
end do

! Probe out
@:probe_out()

end subroutine vbal_write

!----------------------------------------------------------------------
! Subroutine: vbal_run_vbal
!> Compute vertical balance
!----------------------------------------------------------------------
subroutine vbal_run_vbal(vbal,mpl,rng,nam,geom,bpar,ens,ensu)

implicit none

! Passed variables
class(vbal_type),intent(inout) :: vbal !< Vertical balance
type(mpl_type),intent(inout) :: mpl    !< MPI data
type(rng_type),intent(inout) :: rng    !< Random number generator
type(nam_type),intent(inout) :: nam    !< Namelist
type(geom_type),intent(in) :: geom     !< Geometry
type(bpar_type),intent(in) :: bpar     !< Block parameters
type(ens_type), intent(inout) :: ens   !< Ensemble
type(ens_type),intent(inout) :: ensu   !< Unbalanced ensemble

! Local variables
integer :: il0i,i_s,ic0a,ic2b,iv,jv,ie
real(kind_real) :: fld_c0a_1(geom%nc0a,geom%nl0),fld_c0a_2(geom%nc0a,geom%nl0)
real(kind_real),allocatable :: auto(:,:,:,:),cross(:,:,:,:)

! Set name
@:set_name(vbal_run_vbal)

! Probe in
@:probe_in()

! Setup sampling
write(mpl%info,'(a)') '-------------------------------------------------------------------'
call mpl%flush
write(mpl%info,'(a)') '--- Setup sampling'
call mpl%flush
call vbal%samp%setup('vbal',mpl,rng,nam,geom,ens)

! Compute vertical balance operators
write(mpl%info,'(a)') '-------------------------------------------------------------------'
call mpl%flush
write(mpl%info,'(a)') '--- Compute vertical balance operators'
call mpl%flush

! Allocation
call ensu%alloc(ens%ne,ens%nsub)

! Copy ensemble
call ensu%copy(mpl,nam,geom,ens)

! Allocation
allocate(auto(vbal%samp%nc1e,geom%nl0,geom%nl0,ensu%nsub))
allocate(cross(vbal%samp%nc1e,geom%nl0,geom%nl0,ensu%nsub))
call vbal%alloc(nam,geom,bpar)

! Initialization
vbal%h_n_s = 0
vbal%h_c2b = mpl%msv%vali
vbal%h_S = mpl%msv%valr

! Get interpolation coefficients
do il0i=1,geom%nl0i
   do i_s=1,vbal%samp%interp_c2b_to_c0a(il0i)%n_s
      ic0a = vbal%samp%interp_c2b_to_c0a(il0i)%row(i_s)
      vbal%h_n_s(ic0a,il0i) = vbal%h_n_s(ic0a,il0i)+1
      vbal%h_c2b(vbal%h_n_s(ic0a,il0i),ic0a,il0i) = vbal%samp%interp_c2b_to_c0a(il0i)%col(i_s)
      vbal%h_S(vbal%h_n_s(ic0a,il0i),ic0a,il0i) = vbal%samp%interp_c2b_to_c0a(il0i)%S(i_s)
   end do
end do

do iv=1,nam%nv
   do jv=1,nam%nv
      if (bpar%vbal_block(iv,jv)) then
         ! Initialization
         write(mpl%info,'(a7,a)') '','Unbalancing: '//trim(nam%variables(iv))//' with respect to unbalanced ' &
 & //trim(nam%variables(jv))
         call mpl%flush

         ! Compute auto- and cross-covariances
         call vbal%blk(iv,jv)%compute_covariances(mpl,geom,vbal%samp,ensu,auto,cross)

         ! Compute regression
         write(mpl%info,'(a10,a)') '','Compute regression: '
         call mpl%flush(.false.)
         call mpl%prog_init(vbal%samp%nc2b)
         do ic2b=1,vbal%samp%nc2b
            ! Compute
            call vbal%blk(iv,jv)%compute_regression(mpl,nam,geom,vbal%samp,ensu%nsub,auto,cross,ic2b)

            ! Update
            call mpl%prog_print(ic2b)
         end do
         call mpl%prog_final
      end if
   end do

   ! Unbalance ensemble
   if (any(bpar%vbal_block(iv,1:iv-1))) then
      write(mpl%info,'(a10,a)') '','Unbalance ensemble members: '
      call mpl%flush(.false.)
      do ie=1,ensu%ne
         write(mpl%info,'(i6)') ie
         call mpl%flush(.false.)

         ! Get member on subset Sc0
         call ensu%get_c0(mpl,iv,geom,'member',ie,fld_c0a_1)

         do jv=1,iv-1
            if (bpar%vbal_block(iv,jv)) then
               ! Get member on subset Sc0
               call ensu%get_c0(mpl,jv,geom,'member',ie,fld_c0a_2)

               ! Apply balance operator block
               call vbal%blk(iv,jv)%apply(geom,vbal%h_n_s,vbal%h_c2b,vbal%h_S,fld_c0a_2)

               ! Subtract balanced part
               fld_c0a_1 = fld_c0a_1-fld_c0a_2
            end if
         end do

         ! Set member from subset Sc0
         call ensu%set_c0(mpl,iv,geom,'member',ie,fld_c0a_1)
      end do
      write(mpl%info,'(a)') ''
      call mpl%flush

      ! Recompute ensemble mean
      call ensu%compute_mean(mpl,nam,geom)
   end if
end do

! Write balance operator
if (nam%write_vbal) call vbal%write(mpl,nam,geom,bpar)

! Release memory
deallocate(auto)
deallocate(cross)

! Probe out
@:probe_out()

end subroutine vbal_run_vbal

!----------------------------------------------------------------------
! Subroutine: vbal_run_vbal_tests
!> Compute vertical balance tests
!----------------------------------------------------------------------
subroutine vbal_run_vbal_tests(vbal,mpl,rng,nam,geom,bpar)

implicit none

! Passed variables
class(vbal_type),intent(inout) :: vbal !< Vertical balance
type(mpl_type),intent(inout) :: mpl    !< MPI data
type(rng_type),intent(inout) :: rng    !< Random number generator
type(nam_type),intent(inout) :: nam    !< Namelist
type(geom_type),intent(in) :: geom     !< Geometry
type(bpar_type),intent(in) :: bpar     !< Block parameters

! Set name
@:set_name(vbal_run_vbal_tests)

! Probe in
@:probe_in()

if (nam%check_vbal) then
   ! Test inverse
   call vbal%test_inverse(mpl,rng,nam,geom,bpar)
end if

if (nam%check_adjoints) then
   ! Test adjoint
   call vbal%test_adjoint(mpl,rng,nam,geom,bpar)
end if

if (nam%check_dirac) then
   ! Test dirac
   call vbal%test_dirac(mpl,nam,geom,bpar)
end if

! Probe out
@:probe_out()

end subroutine vbal_run_vbal_tests

!----------------------------------------------------------------------
! Subroutine: vbal_apply
!> Apply vertical balance
!----------------------------------------------------------------------
subroutine vbal_apply(vbal,nam,geom,bpar,fld)

implicit none

! Passed variables
class(vbal_type),intent(in) :: vbal                             !< Vertical balance
type(nam_type),intent(in) :: nam                                !< Namelist
type(geom_type),intent(in) :: geom                              !< Geometry
type(bpar_type),intent(in) :: bpar                              !< Block parameters
real(kind_real),intent(inout) :: fld(geom%nc0a,geom%nl0,nam%nv) !< Source/destination vector

! Local variables
integer :: iv,jv
real(kind_real) :: fld_tmp(geom%nc0a,geom%nl0),fld_out(geom%nc0a,geom%nl0,nam%nv)

! Set name
@:set_name(vbal_apply)

! Probe in
@:probe_in()

! Initialization
fld_out = fld

! Add balance component
do iv=1,nam%nv
   do jv=1,nam%nv
      if (bpar%vbal_block(iv,jv)) then
         fld_tmp = fld(:,:,jv)
         call vbal%blk(iv,jv)%apply(geom,vbal%h_n_s,vbal%h_c2b,vbal%h_S,fld_tmp)
         fld_out(:,:,iv) = fld_out(:,:,iv)+fld_tmp
      end if
   end do
end do

! Final copy
fld = fld_out

! Probe out
@:probe_out()

end subroutine vbal_apply

!----------------------------------------------------------------------
! Subroutine: vbal_apply_inv
!> Apply inverse vertical balance
!----------------------------------------------------------------------
subroutine vbal_apply_inv(vbal,nam,geom,bpar,fld)

implicit none

! Passed variables
class(vbal_type),intent(in) :: vbal                             !< Vertical balance
type(nam_type),intent(in) :: nam                                !< Namelist
type(geom_type),intent(in) :: geom                              !< Geometry
type(bpar_type),intent(in) :: bpar                              !< Block parameters
real(kind_real),intent(inout) :: fld(geom%nc0a,geom%nl0,nam%nv) !< Source/destination vector

! Local variables
integer :: iv,jv
real(kind_real) :: fld_tmp(geom%nc0a,geom%nl0),fld_out(geom%nc0a,geom%nl0,nam%nv)

! Set name
@:set_name(vbal_apply_inv)

! Probe in
@:probe_in()

! Initialization
fld_out = fld

! Remove balance component
do iv=1,nam%nv
   do jv=1,nam%nv
      if (bpar%vbal_block(iv,jv)) then
         fld_tmp = fld_out(:,:,jv)
         call vbal%blk(iv,jv)%apply(geom,vbal%h_n_s,vbal%h_c2b,vbal%h_S,fld_tmp)
         fld_out(:,:,iv) = fld_out(:,:,iv)-fld_tmp
      end if
   end do
end do

! Final copy
fld = fld_out

! Probe out
@:probe_out()

end subroutine vbal_apply_inv

!----------------------------------------------------------------------
! Subroutine: vbal_apply_ad
!> Apply adjoint vertical balance
!----------------------------------------------------------------------
subroutine vbal_apply_ad(vbal,nam,geom,bpar,fld)

implicit none

! Passed variables
class(vbal_type),intent(in) :: vbal                             !< Vertical balance
type(nam_type),intent(in) :: nam                                !< Namelist
type(geom_type),intent(in) :: geom                              !< Geometry
type(bpar_type),intent(in) :: bpar                              !< Block parameters
real(kind_real),intent(inout) :: fld(geom%nc0a,geom%nl0,nam%nv) !< Source/destination vector

! Local variables
integer :: iv,jv
real(kind_real) :: fld_tmp(geom%nc0a,geom%nl0),fld_out(geom%nc0a,geom%nl0,nam%nv)

! Set name
@:set_name(vbal_apply_ad)

! Probe in
@:probe_in()

! Initialization
fld_out = fld

! Add balance component
do iv=1,nam%nv
   do jv=1,nam%nv
      if (bpar%vbal_block(iv,jv)) then
         fld_tmp = fld(:,:,iv)
         call vbal%blk(iv,jv)%apply_ad(geom,vbal%h_n_s,vbal%h_c2b,vbal%h_S,fld_tmp)
         fld_out(:,:,jv) = fld_out(:,:,jv)+fld_tmp
      end if
   end do
end do

! Final copy
fld = fld_out

! Probe out
@:probe_out()

end subroutine vbal_apply_ad

!----------------------------------------------------------------------
! Subroutine: vbal_apply_inv_ad
!> Apply inverse adjoint vertical balance
!----------------------------------------------------------------------
subroutine vbal_apply_inv_ad(vbal,nam,geom,bpar,fld)

implicit none

! Passed variables
class(vbal_type),intent(in) :: vbal                             !< Vertical balance
type(nam_type),intent(in) :: nam                                !< Namelist
type(geom_type),intent(in) :: geom                              !< Geometry
type(bpar_type),intent(in) :: bpar                              !< Block parameters
real(kind_real),intent(inout) :: fld(geom%nc0a,geom%nl0,nam%nv) !< Source/destination vector

! Local variables
integer :: iv,jv
real(kind_real) :: fld_tmp(geom%nc0a,geom%nl0),fld_out(geom%nc0a,geom%nl0,nam%nv)

! Set name
@:set_name(vbal_apply_inv_ad)

! Probe in
@:probe_in()

! Initialization
fld_out = fld

! Remove balance component
do iv=1,nam%nv
   do jv=1,nam%nv
      if (bpar%vbal_block(iv,jv)) then
         fld_tmp = fld_out(:,:,iv)
         call vbal%blk(iv,jv)%apply_ad(geom,vbal%h_n_s,vbal%h_c2b,vbal%h_S,fld_tmp)
         fld_out(:,:,jv) = fld_out(:,:,jv)-fld_tmp
      end if
   end do
end do

! Final copy
fld = fld_out

! Probe out
@:probe_out()

end subroutine vbal_apply_inv_ad

!----------------------------------------------------------------------
! Subroutine: vbal_test_inverse
!> Test vertical balance inverse
!----------------------------------------------------------------------
subroutine vbal_test_inverse(vbal,mpl,rng,nam,geom,bpar)

implicit none

! Passed variables
class(vbal_type),intent(in) :: vbal !< Vertical balance
type(mpl_type),intent(inout) :: mpl !< MPI data
type(rng_type),intent(inout) :: rng !< Random number generator
type(nam_type),intent(in) :: nam    !< Namelist
type(geom_type),intent(in) :: geom  !< Geometry
type(bpar_type),intent(in) :: bpar  !< Block parameters

! Local variables
real(kind_real) :: mse,mse_tot
real(kind_real) :: fld(geom%nc0a,geom%nl0,nam%nv),fld_save(geom%nc0a,geom%nl0,nam%nv)

! Set name
@:set_name(vbal_test_inverse)

! Probe in
@:probe_in()

! Generate random field
call rng%rand(zero,one,fld_save)

! Direct / inverse
fld = fld_save
call vbal%apply(nam,geom,bpar,fld)
call vbal%apply_inv(nam,geom,bpar,fld)
mse = sum((fld-fld_save)**2)
call mpl%f_comm%allreduce(mse,mse_tot,fckit_mpi_sum())
write(mpl%info,'(a7,a,e15.8)') '','Vertical balance direct/inverse test:  ',mse_tot
call mpl%flush

! Inverse / direct
fld = fld_save
call vbal%apply_inv(nam,geom,bpar,fld)
call vbal%apply(nam,geom,bpar,fld)
mse = sum((fld-fld_save)**2)
call mpl%f_comm%allreduce(mse,mse_tot,fckit_mpi_sum())
write(mpl%info,'(a7,a,e15.8)') '','Vertical balance inverse/direct test:  ',mse_tot
call mpl%flush

! Direct / inverse, adjoint
fld = fld_save
call vbal%apply_ad(nam,geom,bpar,fld)
call vbal%apply_inv_ad(nam,geom,bpar,fld)
mse = sum((fld-fld_save)**2)
call mpl%f_comm%allreduce(mse,mse_tot,fckit_mpi_sum())
write(mpl%info,'(a7,a,e15.8)') '','Vertical balance direct/inverse (adjoint) test:  ',mse_tot
call mpl%flush

! Inverse / direct
fld = fld_save
call vbal%apply_inv_ad(nam,geom,bpar,fld)
call vbal%apply_ad(nam,geom,bpar,fld)
mse = sum((fld-fld_save)**2)
call mpl%f_comm%allreduce(mse,mse_tot,fckit_mpi_sum())
write(mpl%info,'(a7,a,e15.8)') '','Vertical balance inverse/direct (adjoint) test:  ',mse_tot
call mpl%flush

! Probe out
@:probe_out()

end subroutine vbal_test_inverse

!----------------------------------------------------------------------
! Subroutine: vbal_test_adjoint
!> Test vertical balance adjoint
!----------------------------------------------------------------------
subroutine vbal_test_adjoint(vbal,mpl,rng,nam,geom,bpar)

implicit none

! Passed variables
class(vbal_type),intent(in) :: vbal !< Vertical balance
type(mpl_type),intent(inout) :: mpl !< MPI data
type(rng_type),intent(inout) :: rng !< Random number generator
type(nam_type),intent(in) :: nam    !< Namelist
type(geom_type),intent(in) :: geom  !< Geometry
type(bpar_type),intent(in) :: bpar  !< Block parameters

! Local variables
integer :: iv,jv
real(kind_real) :: sum1,sum2
real(kind_real) :: fld1_blk(geom%nc0a,geom%nl0,nam%nv),fld1_dir(geom%nc0a,geom%nl0,nam%nv)
real(kind_real) :: fld1_inv(geom%nc0a,geom%nl0,nam%nv),fld1_save(geom%nc0a,geom%nl0,nam%nv)
real(kind_real) :: fld2_blk(geom%nc0a,geom%nl0,nam%nv),fld2_dir(geom%nc0a,geom%nl0,nam%nv)
real(kind_real) :: fld2_inv(geom%nc0a,geom%nl0,nam%nv),fld2_save(geom%nc0a,geom%nl0,nam%nv)

! Set name
@:set_name(vbal_test_adjoint)

! Probe in
@:probe_in()

! Generate random field
call rng%rand(zero,one,fld1_save)
call rng%rand(zero,one,fld2_save)

! Block adjoint test
fld1_blk = fld1_save
fld2_blk = fld2_save
do iv=1,nam%nv
   do jv=1,nam%nv
      if (bpar%vbal_block(iv,jv)) then
         call vbal%blk(iv,jv)%apply(geom,vbal%h_n_s,vbal%h_c2b,vbal%h_S,fld1_blk(:,:,iv))
         call vbal%blk(iv,jv)%apply_ad(geom,vbal%h_n_s,vbal%h_c2b,vbal%h_S,fld2_blk(:,:,iv))
         call mpl%dot_prod(fld1_blk(:,:,iv),fld2_save(:,:,iv),sum1)
         call mpl%dot_prod(fld2_blk(:,:,iv),fld1_save(:,:,iv),sum2)
         write(mpl%info,'(a7,a,e15.8,a,e15.8,a,e15.8)') '','Vertical balance block adjoint test:  ', &
 & sum1,' / ',sum2,' / ',two*abs(sum1-sum2)/abs(sum1+sum2)
         call mpl%flush
      end if
   end do
end do

! Direct adjoint test
fld1_dir = fld1_save
fld2_dir = fld2_save
call vbal%apply(nam,geom,bpar,fld1_dir)
call vbal%apply_ad(nam,geom,bpar,fld2_dir)

! Inverse adjoint test
fld1_inv = fld1_save
fld2_inv = fld2_save
call vbal%apply_inv(nam,geom,bpar,fld1_inv)
call vbal%apply_inv_ad(nam,geom,bpar,fld2_inv)

! Print result
call mpl%dot_prod(fld1_dir,fld2_save,sum1)
call mpl%dot_prod(fld2_dir,fld1_save,sum2)
write(mpl%info,'(a7,a,e15.8,a,e15.8,a,e15.8)') '','Vertical balance direct adjoint test:  ', &
 & sum1,' / ',sum2,' / ',two*abs(sum1-sum2)/abs(sum1+sum2)
call mpl%flush
call mpl%dot_prod(fld1_inv,fld2_save,sum1)
call mpl%dot_prod(fld2_inv,fld1_save,sum2)
write(mpl%info,'(a7,a,e15.8,a,e15.8,a,e15.8)') '','Vertical balance inverse adjoint test: ', &
 & sum1,' / ',sum2,' / ',two*abs(sum1-sum2)/abs(sum1+sum2)
call mpl%flush

! Probe out
@:probe_out()

end subroutine vbal_test_adjoint

!----------------------------------------------------------------------
! Subroutine: vbal_test_dirac
!> Apply vertical balance to diracs
!----------------------------------------------------------------------
subroutine vbal_test_dirac(vbal,mpl,nam,geom,bpar)

implicit none

! Passed variables
class(vbal_type),intent(in) :: vbal !< Vertical balance
type(mpl_type),intent(inout) :: mpl !< MPI data
type(nam_type),intent(in) :: nam    !< Namelist
type(geom_type),intent(in) :: geom  !< Geometry
type(bpar_type),intent(in) :: bpar  !< Block parameters

! Local variables
integer :: idir,iv
real(kind_real) :: fld(geom%nc0a,geom%nl0,nam%nv)
character(len=1024) :: filename

! Set name
@:set_name(vbal_test_dirac)

! Probe in
@:probe_in()

! Generate dirac field
fld = zero
do idir=1,geom%ndir
   if (geom%iprocdir(idir)==mpl%myproc) fld(geom%ic0adir(idir),geom%il0dir(idir),geom%ivdir(idir)) = one
end do

! Apply vertical balance to dirac
call vbal%apply(nam,geom,bpar,fld)

! Set filename
filename = trim(nam%prefix)//'_dirac'

! Write coordinates
call geom%io%fld_write(mpl,nam,filename,'lon',geom%lon_c0a*rad2deg,ncunit='degrees_east')
call geom%io%fld_write(mpl,nam,filename,'lat',geom%lat_c0a*rad2deg,ncunit='degrees_north')
call geom%io%fld_write(mpl,nam,filename,'vunit',geom%vunit_c0a,geom%gmask_c0a)

! Write field
do iv=1,nam%nv
   call geom%io%fld_write(mpl,nam,filename,'vbal',fld(:,:,iv),geom%gmask_c0a,trim(nam%variables(iv)))
end do

! Probe out
@:probe_out()

end subroutine vbal_test_dirac

end module type_vbal
