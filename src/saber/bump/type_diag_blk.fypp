#:include '../instrumentation.fypp'
!----------------------------------------------------------------------
! Module: type_diag_blk
!> Diagnostic block derived type
! Author: Benjamin Menetrier
! Licensing: this code is distributed under the CeCILL-C license
! Copyright 2015-... UCAR, CERFACS, METEO-FRANCE and IRIT
!----------------------------------------------------------------------
module type_diag_blk

!$ use omp_lib
use tools_const, only: zero,half,one,two,four
use tools_fit, only: condmax,diag_iso,diag_iso_full,diag_tensor_full,tensor_d2h,tensor_d2r,tensor_check_cond,fast_fit
use tools_func, only: vert_interp_size,vert_interp_setup,vert_interp
use tools_kinds, only: kind_real,huge_real
use tools_netcdf, only: define_grp,put_att,define_var,put_var
use tools_repro, only: inf,sup
use tools_wrfda
use type_avg_blk, only: avg_blk_type
use type_bpar, only: bpar_type
use type_geom, only: geom_type
use type_minim, only: minim_type
use type_mpl, only: mpl_type
use type_nam, only: nam_type
@:use_probe()
use type_samp, only: samp_type

implicit none

! Diagnostic block derived type
type diag_blk_type
   integer :: ic2a                                      !< Local index
   integer :: ib                                        !< Block index
   character(len=1024) :: prefix                        !< Prefix

   real(kind_real),allocatable :: raw(:,:,:,:)          !< Raw diagnostic
   real(kind_real),allocatable :: valid(:,:,:,:)        !< Number of valid couples
   real(kind_real),allocatable :: coef_ens_l0(:)        !< Ensemble coefficient, profile
   real(kind_real) :: coef_sta                          !< Static coefficient

   real(kind_real),allocatable :: vunit(:)              !< Vertical unit
   real(kind_real),allocatable :: fit(:,:,:,:)          !< Fit
   real(kind_real),allocatable :: fit_detail(:,:,:,:,:) !< Multi-components fit detail

   integer,allocatable :: ncmp                          !< Number of components
   real(kind_real),allocatable :: a_l0(:,:)             !< Amplitude, profiles
   real(kind_real),allocatable :: rh_l0(:,:)            !< Horizontal support radius, profiles
   real(kind_real),allocatable :: D11_l0(:,:)           !< Horizontal direct tensor, coefficient 11, profiles
   real(kind_real),allocatable :: D22_l0(:,:)           !< Horizontal direct tensor, coefficient 22, profiles
   real(kind_real),allocatable :: D12_l0(:,:)           !< Horizontal direct tensor, coefficient 12 (normalized), profiles
   real(kind_real),allocatable :: rv_l0(:,:)            !< Vertical support radius, profiles

   real(kind_real),allocatable :: coef_ens_c0a(:,:)     !< Ensemble coefficient, subset Sc0, halo A
   real(kind_real),allocatable :: coef_sta_c0a(:,:)     !< Static coefficient, subset Sc0, halo A
   real(kind_real),allocatable :: a_c0a(:,:,:)          !< Amplitudes, subset Sc0, halo A
   real(kind_real),allocatable :: rh_c0a(:,:,:)         !< Horizontal support radius, subset Sc0, halo A
   real(kind_real),allocatable :: D11_c0a(:,:,:)        !< Horizontal direct tensor, component 11, subset Sc0, halo A
   real(kind_real),allocatable :: D22_c0a(:,:,:)        !< Horizontal direct tensor, component 22, subset Sc0, halo A
   real(kind_real),allocatable :: D12_c0a(:,:,:)        !< Horizontal direct tensor, component 12 (normalized), subset Sc0, halo A
   real(kind_real),allocatable :: rv_c0a(:,:,:)         !< Vertical support radius, subset Sc0, halo A
   real(kind_real) :: wgt                               !< Weight
contains
   procedure :: alloc => diag_blk_alloc
   procedure :: partial_dealloc => diag_blk_partial_dealloc
   procedure :: dealloc => diag_blk_dealloc
   procedure :: write => diag_blk_write
   procedure :: normalization => diag_blk_normalization
   procedure :: fitting => diag_blk_fitting
   procedure :: localization => diag_blk_localization
   procedure :: hybridization => diag_blk_hybridization
   procedure :: dualens => diag_blk_dualens
end type diag_blk_type

private
public :: diag_blk_type

contains

!----------------------------------------------------------------------
! Subroutine: diag_blk_alloc
!> Allocation
!----------------------------------------------------------------------
subroutine diag_blk_alloc(diag_blk,mpl,nam,geom,bpar,samp,ic2a,ib,prefix)

implicit none

! Passed variables
class(diag_blk_type),intent(inout) :: diag_blk !< Diagnostic block
type(mpl_type),intent(inout) :: mpl            !< MPI data
type(nam_type),intent(in) :: nam               !< Namelist
type(geom_type),intent(in) :: geom             !< Geometry
type(bpar_type),intent(in) :: bpar             !< Block parameters
type(samp_type),intent(in) :: samp             !< Sampling
integer,intent(in) :: ic2a                     !< Local index
integer,intent(in) :: ib                       !< Block index
character(len=*),intent(in) :: prefix          !< Block prefix

! Set name
@:set_name(diag_blk_alloc)

! Probe in
@:probe_in()

! Set attributes
diag_blk%ic2a = ic2a
diag_blk%ib = ib
diag_blk%prefix = prefix

! Allocation
if ((ic2a==0).or.nam%local_diag) then
   allocate(diag_blk%raw(bpar%nc3(ib),bpar%nc4(ib),bpar%nl0r(ib),geom%nl0))
   allocate(diag_blk%valid(bpar%nc3(ib),bpar%nc4(ib),bpar%nl0r(ib),geom%nl0))
   allocate(diag_blk%coef_ens_l0(geom%nl0))
   allocate(diag_blk%vunit(geom%nl0))
   allocate(diag_blk%fit(bpar%nc3(ib),bpar%nc4(ib),bpar%nl0r(ib),geom%nl0))
end if

! Initialization
if ((ic2a==0).or.nam%local_diag) then
   diag_blk%raw = mpl%msv%valr
   diag_blk%valid = mpl%msv%valr
   diag_blk%coef_ens_l0 = mpl%msv%valr
   diag_blk%coef_sta = mpl%msv%valr
   diag_blk%fit = mpl%msv%valr
end if

! Vertical unit and distance
if ((ic2a==0).or.nam%local_diag) then
   if (ic2a==0) then
      diag_blk%vunit = geom%vunitavg
   else
      diag_blk%vunit = samp%vunit_c2a(ic2a,:)
   end if
end if

! Probe out
@:probe_out()

end subroutine diag_blk_alloc

!----------------------------------------------------------------------
! Subroutine: diag_blk_partial_dealloc
!> Release memory (partial)
!----------------------------------------------------------------------
subroutine diag_blk_partial_dealloc(diag_blk)

implicit none

! Passed variables
class(diag_blk_type),intent(inout) :: diag_blk !< Diagnostic block

! Set name
@:set_name(diag_blk_partial_dealloc)

! Probe in
@:probe_in()

! Release memory
if (allocated(diag_blk%raw)) deallocate(diag_blk%raw)
if (allocated(diag_blk%valid)) deallocate(diag_blk%valid)
if (allocated(diag_blk%coef_ens_l0)) deallocate(diag_blk%coef_ens_l0)
if (allocated(diag_blk%vunit)) deallocate(diag_blk%vunit)
if (allocated(diag_blk%fit)) deallocate(diag_blk%fit)
if (allocated(diag_blk%fit_detail)) deallocate(diag_blk%fit_detail)
if (allocated(diag_blk%rh_l0)) deallocate(diag_blk%rh_l0)
if (allocated(diag_blk%D11_l0)) deallocate(diag_blk%D11_l0)
if (allocated(diag_blk%D22_l0)) deallocate(diag_blk%D22_l0)
if (allocated(diag_blk%D12_l0)) deallocate(diag_blk%D12_l0)
if (allocated(diag_blk%rv_l0)) deallocate(diag_blk%rv_l0)

! Probe out
@:probe_out()

end subroutine diag_blk_partial_dealloc

!----------------------------------------------------------------------
! Subroutine: diag_blk_dealloc
!> Release memory
!----------------------------------------------------------------------
subroutine diag_blk_dealloc(diag_blk)

implicit none

! Passed variables
class(diag_blk_type),intent(inout) :: diag_blk !< Diagnostic block

! Set name
@:set_name(diag_blk_dealloc)

! Probe in
@:probe_in()

! Release memory
call diag_blk%partial_dealloc
if (allocated(diag_blk%coef_ens_c0a)) deallocate(diag_blk%coef_ens_c0a)
if (allocated(diag_blk%coef_sta_c0a)) deallocate(diag_blk%coef_sta_c0a)
if (allocated(diag_blk%rh_c0a)) deallocate(diag_blk%rh_c0a)
if (allocated(diag_blk%D11_c0a)) deallocate(diag_blk%D11_c0a)
if (allocated(diag_blk%D22_c0a)) deallocate(diag_blk%D22_c0a)
if (allocated(diag_blk%D12_c0a)) deallocate(diag_blk%D12_c0a)
if (allocated(diag_blk%rv_c0a)) deallocate(diag_blk%rv_c0a)

! Probe out
@:probe_out()

end subroutine diag_blk_dealloc

!----------------------------------------------------------------------
! Subroutine: diag_blk_write
!> Write
!----------------------------------------------------------------------
subroutine diag_blk_write(diag_blk,mpl,nam,geom,bpar,ncid,nc3_id,nc4_id,nl0r_id,nl0_1_id,nl0_2_id,ncmp_id)

implicit none

! Passed variables
class(diag_blk_type),intent(inout) :: diag_blk !< Diagnostic block
type(mpl_type),intent(inout) :: mpl            !< MPI data
type(nam_type),intent(in) :: nam               !< Namelist
type(geom_type),intent(in) :: geom             !< Geometry
type(bpar_type),intent(in) :: bpar             !< Block parameters
integer,intent(in) :: ncid                     !< NetCDF ID
integer,intent(in) :: nc3_id                   !< NetCDF ID
integer,intent(in) :: nc4_id                   !< NetCDF ID
integer,intent(in) :: nl0r_id                  !< NetCDF ID
integer,intent(in) :: nl0_1_id                 !< NetCDF ID
integer,intent(in) :: nl0_2_id                 !< NetCDF ID
integer,intent(in) :: ncmp_id                  !< NetCDF ID

! Local variables
integer :: grpid,raw_id,raw_hor_id,raw_zs_id,valid_id,coef_ens_l0_id,l0rl0_to_l0_id
integer :: fit_id,fit_hor_id,fit_zs_id,fit_detail_id,fit_detail_hor_id,fit_detail_zs_id
integer :: rh_l0_id,D11_l0_id,D22_l0_id,D12_l0_id,rv_l0_id
integer :: il0,jl0r,jl0,jl0rz,icmp

! Set name
@:set_name(diag_blk_write)

! Probe in
@:probe_in()

! Associate
associate(ib=>diag_blk%ib,ic2a=>diag_blk%ic2a)

! Define group
grpid = define_grp(mpl,ncid,diag_blk%prefix)

! Define variables
if (mpl%msv%isanynot(diag_blk%raw)) then
   raw_id = define_var(mpl,grpid,'raw','real',(/nc3_id,nc4_id,nl0r_id,nl0_1_id/))
   raw_hor_id = define_var(mpl,grpid,'raw_hor','real',(/nc3_id,nc4_id,nl0_1_id/))
   raw_zs_id = define_var(mpl,grpid,'raw_zs','real',(/nl0_2_id,nl0_1_id/))
   valid_id = define_var(mpl,grpid,'valid','real',(/nc3_id,nc4_id,nl0r_id,nl0_1_id/))
   l0rl0_to_l0_id = define_var(mpl,grpid,'l0rl0_to_l0','int',(/nl0r_id,nl0_1_id/))
end if
if (mpl%msv%isanynot(diag_blk%coef_ens_l0)) coef_ens_l0_id = define_var(mpl,grpid,'coef_ens_l0','real',(/nl0_1_id/))
if (mpl%msv%isanynot(diag_blk%fit)) then
   fit_id = define_var(mpl,grpid,'fit','real',(/nc3_id,nc4_id,nl0r_id,nl0_1_id/))
   fit_hor_id = define_var(mpl,grpid,'fit_hor','real',(/nc3_id,nc4_id,nl0_1_id/))
   fit_zs_id = define_var(mpl,grpid,'fit_zs','real',(/nl0_2_id,nl0_1_id/))
   if (nam%write_hdiag_detail) then
      fit_detail_id = define_var(mpl,grpid,'fit_detail','real',(/nc3_id,nc4_id,nl0r_id,nl0_1_id,ncmp_id/))
      fit_detail_hor_id = define_var(mpl,grpid,'fit_detail_hor','real',(/nc3_id,nc4_id,nl0_1_id,ncmp_id/))
      fit_detail_zs_id = define_var(mpl,grpid,'fit_detail_zs','real',(/nl0_2_id,nl0_1_id,ncmp_id/))
   end if
   rh_l0_id = define_var(mpl,grpid,'rh_l0','real',(/nl0_1_id/))
   if (bpar%nc4(ib)>1) then
      D11_l0_id = define_var(mpl,grpid,'D11_l0','real',(/nl0_1_id/))
      D22_l0_id = define_var(mpl,grpid,'D22_l0','real',(/nl0_1_id/))
      D12_l0_id = define_var(mpl,grpid,'D12_l0','real',(/nl0_1_id/))
   end if
   rv_l0_id = define_var(mpl,grpid,'rv_l0','real',(/nl0_1_id/))
end if

! Write variables
if (mpl%msv%isanynot(diag_blk%raw)) then
   call put_var(mpl,grpid,raw_id,diag_blk%raw)
   do il0=1,geom%nl0
      jl0rz = bpar%il0rz(il0,ib)
      call put_var(mpl,grpid,raw_hor_id,diag_blk%raw(:,:,jl0rz,il0),(/1,1,il0/))
   end do
   do il0=1,geom%nl0
      do jl0r=1,bpar%nl0r(ib)
         jl0 = bpar%l0rl0b_to_l0(jl0r,il0,ib)
         call put_var(mpl,grpid,raw_zs_id,diag_blk%raw(1,1,jl0r,il0),(/jl0,il0/))
      end do
   end do
   call put_var(mpl,grpid,valid_id,diag_blk%valid)
   call put_var(mpl,grpid,l0rl0_to_l0_id,bpar%l0rl0b_to_l0(1:bpar%nl0r(ib),:,ib))
end if
if (mpl%msv%isanynot(diag_blk%coef_ens_l0)) call put_var(mpl,grpid,coef_ens_l0_id,diag_blk%coef_ens_l0)
if (mpl%msv%isnot(diag_blk%coef_sta)) call put_att(mpl,grpid,0,'coef_sta',diag_blk%coef_sta)
if (mpl%msv%isanynot(diag_blk%fit)) then
   call put_var(mpl,grpid,fit_id,diag_blk%fit)
   do il0=1,geom%nl0
      jl0rz = bpar%il0rz(il0,ib)
      call put_var(mpl,grpid,fit_hor_id,diag_blk%fit(:,:,jl0rz,il0),(/1,1,il0/))
   end do
   do il0=1,geom%nl0
      do jl0r=1,bpar%nl0rmax
         jl0 = bpar%l0rl0b_to_l0(jl0r,il0,ib)
         call put_var(mpl,grpid,fit_zs_id,diag_blk%fit(1,1,jl0r,il0),(/jl0,il0/))
      end do
   end do
   if (nam%write_hdiag_detail) then
      call put_var(mpl,grpid,fit_detail_id,diag_blk%fit_detail)
      do icmp=1,diag_blk%ncmp
         do il0=1,geom%nl0
            jl0rz = bpar%il0rz(il0,ib)
            call put_var(mpl,grpid,fit_detail_hor_id,diag_blk%fit_detail(:,:,jl0rz,il0,icmp),(/1,1,il0,icmp/))
         end do
         do il0=1,geom%nl0
            do jl0r=1,bpar%nl0rmax
               jl0 = bpar%l0rl0b_to_l0(jl0r,il0,ib)
               call put_var(mpl,grpid,fit_detail_zs_id,diag_blk%fit_detail(1,1,jl0r,il0,icmp),(/jl0,il0,icmp/))
            end do
         end do
      end do
   end if
   call put_var(mpl,grpid,rh_l0_id,diag_blk%rh_l0)
   if (bpar%nc4(ib)>1) then
      call put_var(mpl,grpid,D11_l0_id,diag_blk%D11_l0)
      call put_var(mpl,grpid,D22_l0_id,diag_blk%D22_l0)
      call put_var(mpl,grpid,D12_l0_id,diag_blk%D12_l0)
   end if
   call put_var(mpl,grpid,rv_l0_id,diag_blk%rv_l0)
end if

! End associate
end associate

! Probe out
@:probe_out()

end subroutine diag_blk_write

!----------------------------------------------------------------------
! Subroutine: diag_blk_normalization
!> Compute diagnostic block normalization
!----------------------------------------------------------------------
subroutine diag_blk_normalization(diag_blk,geom,bpar)

implicit none

! Passed variables
class(diag_blk_type),intent(inout) :: diag_blk !< Diagnostic block
type(geom_type),intent(in) :: geom             !< Geometry
type(bpar_type),intent(in) :: bpar             !< Block parameters

! Local variables
integer :: il0,jl0rz

! Set name
@:set_name(diag_blk_normalization)

! Probe in
@:probe_in()

! Associate
associate(ib=>diag_blk%ib)

! Get diagonal values
do il0=1,geom%nl0
   jl0rz = bpar%il0rz(il0,ib)
   diag_blk%coef_ens_l0(il0) = diag_blk%raw(1,1,jl0rz,il0)
end do

! End associate
end associate

! Probe out
@:probe_out()

end subroutine diag_blk_normalization

!----------------------------------------------------------------------
! Subroutine: diag_blk_fitting
!> Compute a fit of a raw function
!----------------------------------------------------------------------
subroutine diag_blk_fitting(diag_blk,mpl,nam,geom,bpar,ncmp)

implicit none

! Passed variables
class(diag_blk_type),intent(inout) :: diag_blk !< Diagnostic block
type(mpl_type),intent(inout) :: mpl            !< MPI data
type(nam_type),intent(in) :: nam               !< Namelist
type(geom_type),intent(in) :: geom             !< Geometry
type(bpar_type),intent(in) :: bpar             !< Block parameters
integer,intent(in) :: ncmp                     !< Number of components

! Local variables
integer :: il0,jl0rz,jl0r,jl0,nl0r,il1,nl1,ilev2d,jc3,jc4,ix,icmp,jcmp
integer,allocatable :: il0_interp(:),il1inf(:),il1sup(:)
real(kind_real) :: a,m2(geom%nl0)
real(kind_real),allocatable :: raw_hor(:,:),raw_ver(:),distv(:),rinf(:),rsup(:),rh_c4l1(:,:,:),fit(:,:,:,:),fit_hor(:),fit_ver(:)
real(kind_real),allocatable :: rh_l1(:,:),D11_l1(:,:),D22_l1(:,:),D12_l1(:,:),rv_l1(:,:),a_l1(:,:)
logical :: var2d,valid
type(minim_type) :: minim

real(kind_real),parameter :: tailfac = 0.5

! Set name
@:set_name(diag_blk_fitting)

! Probe in
@:probe_in()

! Associate
associate(ib=>diag_blk%ib)

! Check for 2D variable
do il0=1,geom%nl0
   ! Get zero separation level
   jl0rz = bpar%il0rz(il0,ib)

   ! Get value at zero separation
   m2(il0) = diag_blk%raw(1,1,jl0rz,il0)
end do
if ((count(m2>zero)==1).and.(trim(nam%lev2d)=='first').and.(m2(1)>zero)) then
   var2d = .true.
   ilev2d = 1
   diag_blk%rv_l0(ilev2d,:) = zero
elseif ((count(m2>zero)==1).and.(trim(nam%lev2d)=='last').and.(m2(geom%nl0)>zero)) then
   var2d = .true.
   ilev2d = geom%nl0
   diag_blk%rv_l0(ilev2d,:) = zero
else
   var2d = .false.
end if

! Number of effective levels
if (var2d) then
   nl0r = 1
else
   nl0r = bpar%nl0r(ib)
end if

! Count interpolation levels
if (var2d) then
   nl1 = 1
else
   call vert_interp_size(geom%nl0,nam%fit_dl0,nl1)
end if

! Allocation
allocate(il0_interp(nl1))
allocate(il1inf(geom%nl0))
allocate(il1sup(geom%nl0))
allocate(rinf(geom%nl0))
allocate(rsup(geom%nl0))

! Get interpolation levels and weights
if (var2d) then
   il0_interp(1) = ilev2d
   il1inf = 1
   il1sup = 1
   rinf = zero
   rsup = zero
   rsup(ilev2d) = one
else
   call vert_interp_setup(geom%nl0,nam%fit_dl0,nl1,il0_interp,il1inf,il1sup,rinf,rsup)
end if

! Allocation
allocate(minim%disth(bpar%nc3(ib)))
allocate(minim%as(bpar%nc4(ib)))
allocate(minim%distv(nl0r))

! Minimization parameters initialization
minim%nc3 = bpar%nc3(ib)
minim%nc4 = bpar%nc4(ib)
minim%nl0r = nl0r
minim%disth = geom%disth(1:bpar%nc3(ib))
minim%as = geom%as(1:bpar%nc4(ib))
minim%hooke_rho = half
minim%hooke_tol = 1.0e-4_kind_real
minim%hooke_itermax = 10

! Allocation
allocate(rh_c4l1(bpar%nc4(ib),nl1,0:ncmp))
allocate(rv_l1(nl1,0:ncmp))
allocate(a_l1(nl1,0:ncmp))
allocate(raw_hor(bpar%nc3(ib),bpar%nc4(ib)))
allocate(raw_ver(nl0r))
allocate(distv(nl0r))
allocate(fit_hor(bpar%nc3(ib)))
allocate(fit_ver(nl0r))
allocate(rh_l1(nl1,ncmp))
if (bpar%nc4(ib)>1) then
   allocate(D11_l1(nl1,ncmp))
   allocate(D22_l1(nl1,ncmp))
   allocate(D12_l1(nl1,ncmp))
end if

do il1=1,nl1
   ! Index
   il0 = il0_interp(il1)

   ! Get zero separation level and min/max levels
   jl0rz = bpar%il0rz(il0,ib)

   ! Fast fit
   icmp = 0

   ! Horizontal fast fit for each angular sector
   do jc4=1,bpar%nc4(ib)
      call fast_fit(mpl,bpar%nc3(ib),1,geom%disth,'hor',diag_blk%raw(:,jc4,jl0rz,il0),rh_c4l1(jc4,il1,icmp))
   end do

   if (nl0r==1) then
      ! No vertical fit
      distv(1) = zero
      rv_l1(il1,icmp) = zero
   else
      ! Raw vertical function, averaged over angular sectors
      raw_ver = sum(diag_blk%raw(1,:,:,il0),dim=1)/real(bpar%nc4(ib),kind_real)

      ! Vertical distance
      do jl0r=1,nl0r
         jl0 = bpar%l0rl0b_to_l0(jl0r,il0,ib)
         distv(jl0r) = abs(diag_blk%vunit(il0)-diag_blk%vunit(jl0))
      end do

      ! Vertical fast fit
      call fast_fit(mpl,nl0r,jl0rz,distv,'ver',raw_ver,rv_l1(il1,icmp))
   end if

   ! Initial amplitude
   a_l1(il1,icmp) = one

   if (ncmp==1) then
      ! Single component (copy)
      a_l1(il1,1) = a_l1(il1,0)
      do jc4=1,bpar%nc4(ib)
         rh_c4l1(jc4,il1,1) = rh_c4l1(jc4,il1,0)
      end do
      rv_l1(il1,1) = rv_l1(il1,0)
   else
      ! Get sucessive components
      do icmp=1,ncmp
         if (mpl%msv%isallnot(rh_c4l1(:,il1,icmp-1)).and.mpl%msv%isnot(rv_l1(il1,icmp-1))) then
            ! Remove previous components from raw functions
            raw_hor = diag_blk%raw(:,:,jl0rz,il0)
            raw_ver = sum(diag_blk%raw(1,:,:,il0),dim=1)/real(bpar%nc4(ib),kind_real)
            do jcmp=1,icmp-1
               do jc4=1,bpar%nc4(ib)
                  call diag_iso(mpl,bpar%nc3(ib),geom%disth,'hor',rh_c4l1(jc4,il1,jcmp),fit_hor)
                  raw_hor(:,jc4) = raw_hor(:,jc4)-a_l1(il1,jcmp)*fit_hor
               end do
               call diag_iso(mpl,nl0r,distv,'ver',rv_l1(il1,jcmp),fit_ver)
               raw_ver = raw_ver-a_l1(il1,jcmp)*fit_ver
            end do

            ! Allocation
            minim%nx = bpar%nc4(ib)+1
            if (icmp<ncmp) minim%nx = minim%nx+1
            minim%ny = bpar%nc3(ib)*bpar%nc4(ib)+nl0r
            call minim%alloc(mpl)

            ! Vertical distance
            minim%distv = distv

            ! Control vector
            ix = 0

            ! Amplitude
            a = one
            do jcmp=1,icmp-1
               a = a-a_l1(il1,jcmp)
            end do
            if (icmp<ncmp) then
               ix = ix+1
               minim%guess(ix) = half*a
               minim%binf(ix) = zero
               minim%bsup(ix) = a
            end if            

            ! Horizontal
            do jc4=1,bpar%nc4(ib)
               ix = ix+1
               if (icmp==1) then
                  minim%guess(ix) = rh_c4l1(jc4,il1,icmp-1)
                  minim%binf(ix) = zero
                  minim%bsup(ix) = two*rh_c4l1(jc4,il1,icmp-1)
               else
                  minim%guess(ix) = half*rh_c4l1(jc4,il1,icmp-1)
                  minim%binf(ix) = zero
                  minim%bsup(ix) = rh_c4l1(jc4,il1,icmp-1)
               end if
            end do

            ! Vertical
            ix = ix+1
            if (icmp==1) then
               minim%guess(ix) = rv_l1(il1,icmp-1)
               minim%binf(ix) = zero
               minim%bsup(ix) = two*rv_l1(il1,icmp-1)
            else
               minim%guess(ix) = half*rv_l1(il1,icmp-1)
               minim%binf(ix) = zero
               minim%bsup(ix) = rv_l1(il1,icmp-1)
            end if

            ! Observations
            minim%obs(1:bpar%nc3(ib)*bpar%nc4(ib)) = reshape(raw_hor,(/bpar%nc3(ib)*bpar%nc4(ib)/))
            minim%obs(bpar%nc3(ib)*bpar%nc4(ib)+1:minim%ny) = raw_ver
            minim%cost_function = 'scale'

            ! Compute fit
            call minim%compute(mpl)

            ! Get parameters, apply bounds
            ix = 0
            if (icmp<ncmp) then
               ix = ix+1
               a_l1(il1,icmp) = max(minim%binf(ix),min(minim%x(ix),minim%bsup(ix)))
            else
               a_l1(il1,icmp) = a
            end if
            do jc4=1,bpar%nc4(ib)
               ix = ix+1
               rh_c4l1(jc4,il1,icmp) = max(minim%binf(ix),min(minim%x(ix),minim%bsup(ix)))
            end do
            ix = ix+1
            rv_l1(il1,icmp) = max(minim%binf(ix),min(minim%x(ix),minim%bsup(ix)))

            ! Release memory
            call minim%partial_dealloc
         end if
      end do
   end if

   ! Post-processing
   do icmp=1,ncmp
      if (mpl%msv%isnot(a_l1(il1,icmp)).and.mpl%msv%isallnot(rh_c4l1(:,il1,icmp)).and.mpl%msv%isnot(rv_l1(il1,icmp))) then
         ! Average values
         rh_l1(il1,icmp) = sqrt(sum(rh_c4l1(:,il1,icmp)**2)/real(bpar%nc4(ib),kind_real))
         if (bpar%nc4(ib)>1) then
            ! Allocation
            minim%nx = 3
            minim%ny = bpar%nc3(ib)*bpar%nc4(ib)
            call minim%alloc(mpl)

            ! Initialization
            minim%guess = (/rh_l1(il1,icmp)**2,rh_l1(il1,icmp)**2,zero/)
            minim%binf = (/rh_l1(il1,icmp)**2/sqrt(condmax),rh_l1(il1,icmp)**2/sqrt(condmax),-one/)
            minim%bsup = (/rh_l1(il1,icmp)**2*sqrt(condmax),rh_l1(il1,icmp)**2*sqrt(condmax),one/)
            minim%obs = reshape(diag_blk%raw(:,:,jl0rz,il0),(/minim%ny/))
            minim%cost_function = 'tensor'

            ! Compute fit
            call minim%compute(mpl)

            ! Get parameters, apply bounds
            D11_l1(il1,icmp) = max(minim%binf(1),min(minim%x(1),minim%bsup(1)))
            D22_l1(il1,icmp) = max(minim%binf(2),min(minim%x(2),minim%bsup(2)))
            D12_l1(il1,icmp) = max(minim%binf(3),min(minim%x(3),minim%bsup(3)))

            ! Check tensor conditioning
            call tensor_check_cond(D11_l1(il1,icmp),D22_l1(il1,icmp),D12_l1(il1,icmp),valid)
            if (.not.valid) then
               D11_l1(il1,icmp) = mpl%msv%valr
               D22_l1(il1,icmp) = mpl%msv%valr
               D12_l1(il1,icmp) = mpl%msv%valr
            end if

            ! Release memory
            call minim%partial_dealloc
         end if
      else
         a_l1(il1,icmp) = mpl%msv%valr
         rh_l1(il1,icmp) = mpl%msv%valr
         if (bpar%nc4(ib)>1) then
            D11_l1(il1,icmp) = mpl%msv%valr
            D22_l1(il1,icmp) = mpl%msv%valr
            D12_l1(il1,icmp) = mpl%msv%valr
         end if
      end if
   end do
end do

! Set number of components
diag_blk%ncmp = ncmp

! Allocation
allocate(diag_blk%a_l0(geom%nl0,ncmp))
allocate(diag_blk%rh_l0(geom%nl0,ncmp))
if (bpar%nc4(ib)>1) then
   allocate(diag_blk%D11_l0(geom%nl0,ncmp))
   allocate(diag_blk%D22_l0(geom%nl0,ncmp))
   allocate(diag_blk%D12_l0(geom%nl0,ncmp))
end if
allocate(diag_blk%rv_l0(geom%nl0,ncmp))

! Initialization
diag_blk%a_l0 = mpl%msv%valr
diag_blk%rh_l0 = mpl%msv%valr
if (bpar%nc4(ib)>1) then
   diag_blk%D11_l0 = mpl%msv%valr
   diag_blk%D22_l0 = mpl%msv%valr
   diag_blk%D12_l0 = mpl%msv%valr
end if
diag_blk%rv_l0 = mpl%msv%valr

! Interpolate horizontal parameters
do icmp=1,ncmp
   call vert_interp(mpl,nl1,a_l1(:,icmp),geom%nl0,il1inf,il1sup,rinf,rsup,diag_blk%a_l0(:,icmp))
   if (bpar%nc4(ib)==1) then
      call vert_interp(mpl,nl1,rh_l1(:,icmp),geom%nl0,il1inf,il1sup,rinf,rsup,diag_blk%rh_l0(:,icmp))
   else
      call vert_interp(mpl,nl1,D11_l1(:,icmp),geom%nl0,il1inf,il1sup,rinf,rsup,diag_blk%D11_l0(:,icmp))
      call vert_interp(mpl,nl1,D22_l1(:,icmp),geom%nl0,il1inf,il1sup,rinf,rsup,diag_blk%D22_l0(:,icmp))
      call vert_interp(mpl,nl1,D12_l1(:,icmp),geom%nl0,il1inf,il1sup,rinf,rsup,diag_blk%D12_l0(:,icmp))
      do il0=1,geom%nl0
         call tensor_d2r(mpl,diag_blk%D11_l0(il0,icmp),diag_blk%D22_l0(il0,icmp),diag_blk%D12_l0(il0,icmp),diag_blk%rh_l0(il0,icmp))
      end do
   end if
   call vert_interp(mpl,nl1,rv_l1(:,icmp),geom%nl0,il1inf,il1sup,rinf,rsup,diag_blk%rv_l0(:,icmp))
end do

! Release memory
deallocate(il0_interp)
deallocate(il1inf)
deallocate(il1sup)
deallocate(rinf)
deallocate(rsup)
deallocate(a_l1)
deallocate(rh_c4l1)
deallocate(rv_l1)
deallocate(rh_l1)
if (bpar%nc4(ib)>1) then
   deallocate(D11_l1)
   deallocate(D22_l1)
   deallocate(D12_l1)
end if
deallocate(raw_hor)
deallocate(raw_ver)
deallocate(distv)
call minim%dealloc

! End associate
end associate

! Probe out
@:probe_out()

end subroutine diag_blk_fitting

!----------------------------------------------------------------------
! Subroutine: diag_blk_localization
!> Diag_blk localization
!----------------------------------------------------------------------
subroutine diag_blk_localization(diag_blk,mpl,geom,bpar,avg_blk)

implicit none

! Passed variables
class(diag_blk_type),intent(inout) :: diag_blk !< Diagnostic block (localization)
type(mpl_type),intent(inout) :: mpl            !< MPI data
type(geom_type),intent(in) :: geom             !< Geometry
type(bpar_type),intent(in) :: bpar             !< Block parameters
type(avg_blk_type),intent(in) :: avg_blk       !< Averaged statistics block

! Local variables
integer :: il0,jl0r,jc3,jc4

! Set name
@:set_name(diag_blk_localization)

! Probe in
@:probe_in()

! Associate
associate(ib=>diag_blk%ib)

!$omp parallel do schedule(static) private(il0,jl0r,jc3,jc4) shared(geom,bpar,diag_blk,avg_blk)
do il0=1,geom%nl0
   do jl0r=1,bpar%nl0r(ib)
      do jc4=1,bpar%nc4(ib)
         do jc3=1,bpar%nc3(ib)
            if (mpl%msv%isnot(avg_blk%m11asysq(jc3,jc4,jl0r,il0)).and.mpl%msv%isnot(avg_blk%m11sq(jc3,jc4,jl0r,il0))) then
               ! Compute localization
               diag_blk%raw(jc3,jc4,jl0r,il0) = avg_blk%m11asysq(jc3,jc4,jl0r,il0)/avg_blk%m11sq(jc3,jc4,jl0r,il0)
               diag_blk%valid(jc3,jc4,jl0r,il0) = avg_blk%nc1a(jc3,jc4,jl0r,il0)
            else
               ! Missing value
               diag_blk%raw(jc3,jc4,jl0r,il0) = mpl%msv%valr
               diag_blk%valid(jc3,jc4,jl0r,il0) = mpl%msv%valr
            end if
         end do
      end do
   end do
end do
!$omp end parallel do

! Hybrid weight
diag_blk%coef_sta = mpl%msv%valr

! End associate
end associate

! Probe out
@:probe_out()

end subroutine diag_blk_localization

!----------------------------------------------------------------------
! Subroutine: diag_blk_hybridization
!> Diag_blk hybridization
!----------------------------------------------------------------------
subroutine diag_blk_hybridization(diag_blk,mpl,nam,geom,bpar,avg_blk)

implicit none

! Passed variables
class(diag_blk_type),intent(inout) :: diag_blk !< Diagnostic block (localization)
type(mpl_type),intent(inout) :: mpl            !< MPI data
type(nam_type),intent(in) :: nam               !< Namelist
type(geom_type),intent(in) :: geom             !< Geometry
type(bpar_type),intent(in) :: bpar             !< Block parameters
type(avg_blk_type),intent(in) :: avg_blk       !< Averaged statistics block

! Local variables
integer :: il0,jl0r,jl0,jc3,jc4,iv
real(kind_real) :: wgt,a,bc,d,e,f,num_ens,num_sta,num,den
real(kind_real) :: nam_a(geom%nl0,1),nam_rh(geom%nl0,1),nam_rv(geom%nl0,1)

! Set name
@:set_name(diag_blk_hybridization)

! Probe in
@:probe_in()

! Associate
associate(ib=>diag_blk%ib)

if (nam%forced_radii) then
   ! Compute forced localization function
   iv = bpar%b_to_v1(ib)
   nam_a(:,1) = one
   nam_rh(:,1) = nam%rh(1:geom%nl0,iv)
   nam_rv(:,1) = nam%rv(1:geom%nl0,iv)
   do jc4=1,bpar%nc4(ib)
      call diag_iso_full(mpl,bpar%nc3(ib),bpar%nl0r(ib),geom%nl0,bpar%l0rl0b_to_l0(:,:,ib),geom%disth,diag_blk%vunit,1,nam_a, &
 & nam_rh,nam_rv,diag_blk%raw(:,jc4,:,:))
   end do
   diag_blk%valid = mpl%msv%valr

   ! Compute hybrid weights
   a = zero
   bc = zero
   d = zero
   e = zero
   f = zero
   do il0=1,geom%nl0
      do jl0r=1,bpar%nl0r(ib)
         jl0 = bpar%l0rl0b_to_l0(jl0r,il0,ib)
         do jc4=1,bpar%nc4(ib)
            do jc3=1,bpar%nc3(ib)
               if (mpl%msv%isnot(avg_blk%m11asysq(jc3,jc4,jl0r,il0)).and.mpl%msv%isnot(avg_blk%m11sq(jc3,jc4,jl0r,il0)) &
 & .and.mpl%msv%isnot(avg_blk%m11sta(jc3,jc4,jl0r,il0)).and.mpl%msv%isnot(avg_blk%stasq(jc3,jc4,jl0r,il0))) then
                  wgt = geom%disth(jc3)*abs(diag_blk%vunit(jl0)-diag_blk%vunit(il0))/real(bpar%nl0r(ib)+bpar%nc3(ib),kind_real) ! TODO ?
                  a = a+wgt*diag_blk%raw(jc3,jc4,jl0r,il0)**2*avg_blk%m11sq(jc3,jc4,jl0r,il0)
                  bc = bc+wgt*diag_blk%raw(jc3,jc4,jl0r,il0)*avg_blk%m11sta(jc3,jc4,jl0r,il0)
                  d = d+wgt*avg_blk%stasq(jc3,jc4,jl0r,il0)
                  e = e+wgt*diag_blk%raw(jc3,jc4,jl0r,il0)*avg_blk%m11asysq(jc3,jc4,jl0r,il0)
                  f = f+wgt*avg_blk%m11sta(jc3,jc4,jl0r,il0)
               end if
            end do
         end do
      end do
   end do
   num_ens = e*d-bc*f
   num_sta = a*f-e*bc
   den = a*d-bc**2
   if ((num_ens>zero).and.(num_sta>zero).and.(den>zero)) then
      ! Valid numerators and denominator
      diag_blk%coef_ens_l0 = num_ens/den
      diag_blk%coef_sta = num_sta/den
   else
      ! Missing values
      diag_blk%coef_ens_l0 = mpl%msv%valr
      diag_blk%coef_sta = mpl%msv%valr
   end if
else
   ! Compute raw hybridization
   num = zero
   den = zero
   do il0=1,geom%nl0
      do jl0r=1,bpar%nl0r(ib)
         jl0 = bpar%l0rl0b_to_l0(jl0r,il0,ib)
         do jc4=1,bpar%nc4(ib)
            do jc3=1,bpar%nc3(ib)
               if (mpl%msv%isnot(avg_blk%m11asysq(jc3,jc4,jl0r,il0)).and.mpl%msv%isnot(avg_blk%m11sq(jc3,jc4,jl0r,il0)) &
 & .and.mpl%msv%isnot(avg_blk%m11sta(jc3,jc4,jl0r,il0)).and.mpl%msv%isnot(avg_blk%stasq(jc3,jc4,jl0r,il0))) then
                  wgt = geom%disth(jc3)*abs(diag_blk%vunit(jl0)-diag_blk%vunit(il0))/real(bpar%nl0r(ib)+bpar%nc3(ib),kind_real) ! TODO ?
                  num = num+wgt*(one-avg_blk%m11asysq(jc3,jc4,jl0r,il0)/avg_blk%m11sq(jc3,jc4,jl0r,il0)) &
 & *avg_blk%m11sta(jc3,jc4,jl0r,il0)
                  den = den+wgt*(avg_blk%stasq(jc3,jc4,jl0r,il0)-avg_blk%m11sta(jc3,jc4,jl0r,il0)**2 &
 & /avg_blk%m11sq(jc3,jc4,jl0r,il0))
               end if
            end do
         end do
      end do
   end do
   if ((num>zero).and.(den>zero)) then
      ! Valid numerator and denominator
      diag_blk%coef_sta = num/den

      !$omp parallel do schedule(static) private(il0,jl0r,jc3,jc4) shared(geom,bpar,diag_blk)
      do il0=1,geom%nl0
         do jl0r=1,bpar%nl0r(ib)
            do jc4=1,bpar%nc4(ib)
               do jc3=1,bpar%nc3(ib)
                  if (mpl%msv%isnot(avg_blk%m11asysq(jc3,jc4,jl0r,il0)).and.mpl%msv%isnot(diag_blk%coef_sta) &
 & .and.mpl%msv%isnot(avg_blk%m11sta(jc3,jc4,jl0r,il0)).and.mpl%msv%isnot(avg_blk%m11sq(jc3,jc4,jl0r,il0))) then
                     ! Compute localization
                     diag_blk%raw(jc3,jc4,jl0r,il0) = (avg_blk%m11asysq(jc3,jc4,jl0r,il0)-diag_blk%coef_sta &
 & *avg_blk%m11sta(jc3,jc4,jl0r,il0))/avg_blk%m11sq(jc3,jc4,jl0r,il0)
                     diag_blk%valid(jc3,jc4,jl0r,il0) = avg_blk%nc1a(jc3,jc4,jl0r,il0)

                     ! Lower bound
                     if (diag_blk%raw(jc3,jc4,jl0r,il0)<zero) then
                        diag_blk%raw(jc3,jc4,jl0r,il0) = mpl%msv%valr
                        diag_blk%valid(jc3,jc4,jl0r,il0) = mpl%msv%valr
                     end if
                  else
                     ! Missing value
                     diag_blk%raw(jc3,jc4,jl0r,il0) = mpl%msv%valr
                     diag_blk%valid(jc3,jc4,jl0r,il0) = mpl%msv%valr
                  end if
               end do
            end do
         end do
      end do
      !$omp end parallel do
   else
      ! Missing values
      diag_blk%coef_sta = mpl%msv%valr
      diag_blk%raw = mpl%msv%valr
   end if
end if

! End associate
end associate

! Probe out
@:probe_out()

end subroutine diag_blk_hybridization

!----------------------------------------------------------------------
! Subroutine: diag_blk_dualens
!> Diag_blk dualens
!----------------------------------------------------------------------
subroutine diag_blk_dualens(diag_blk,mpl,geom,bpar,avg_blk,avg_lr_blk,diag_lr_blk)

implicit none

! Passed variables
class(diag_blk_type),intent(inout) :: diag_blk   !< Diagnostic block (localization)
type(mpl_type),intent(inout) :: mpl              !< MPI data
type(geom_type),intent(in) :: geom               !< Geometry
type(bpar_type),intent(in) :: bpar               !< Block parameters
type(avg_blk_type),intent(in) :: avg_blk         !< Averaged statistics block
type(avg_blk_type),intent(in) :: avg_lr_blk      !< LR averaged statistics block
type(diag_blk_type),intent(inout) :: diag_lr_blk !< Diagnostic block (LR localization)

! Local variables
integer :: il0,jl0r,jc3,jc4
real(kind_real),allocatable :: num(:,:),num_lr(:,:),den(:,:)

! Set name
@:set_name(diag_blk_dualens)

! Probe in
@:probe_in()

! Associate
associate(ib=>diag_blk%ib)

! Allocation
allocate(num(bpar%nc3(ib),bpar%nc4(ib)))
allocate(num_lr(bpar%nc3(ib),bpar%nc4(ib)))
allocate(den(bpar%nc3(ib),bpar%nc4(ib)))

! Compute raw dual-ensemble hybridization
do il0=1,geom%nl0
   do jl0r=1,bpar%nl0r(ib)
      do jc4=1,bpar%nc4(ib)
         do jc3=1,bpar%nc3(ib)
            if (mpl%msv%isnot(avg_blk%m11asysq(jc3,jc4,jl0r,il0)).and.mpl%msv%isnot(avg_blk%m11sq(jc3,jc4,jl0r,il0)) &
 & .and.mpl%msv%isnot(avg_blk%m11lrm11asy(jc3,jc4,jl0r,il0)).and.mpl%msv%isnot(avg_blk%m11lrm11(jc3,jc4,jl0r,il0)) &
 & .and.mpl%msv%isnot(avg_lr_blk%m11sq(jc3,jc4,jl0r,il0)).and.mpl%msv%isnot(avg_blk%m11lrm11asy(jc3,jc4,jl0r,il0))) then
               num(jc3,jc4) = avg_blk%m11asysq(jc3,jc4,jl0r,il0)*avg_lr_blk%m11sq(jc3,jc4,jl0r,il0) &
 & -avg_blk%m11lrm11asy(jc3,jc4,jl0r,il0)*avg_blk%m11lrm11(jc3,jc4,jl0r,il0)
               num_lr(jc3,jc4) = avg_blk%m11lrm11asy(jc3,jc4,jl0r,il0)*avg_blk%m11sq(jc3,jc4,jl0r,il0) &
 & -avg_blk%m11asysq(jc3,jc4,jl0r,il0)*avg_blk%m11lrm11(jc3,jc4,jl0r,il0)
               den(jc3,jc4) = avg_blk%m11sq(jc3,jc4,jl0r,il0)*avg_lr_blk%m11sq(jc3,jc4,jl0r,il0) &
 & -avg_blk%m11lrm11(jc3,jc4,jl0r,il0)**2
               if ((num(jc3,jc4)>zero).and.(den(jc3,jc4)>zero)) then
                  ! Compute localization
                  diag_blk%raw(jc3,jc4,jl0r,il0) = num(jc3,jc4)/den(jc3,jc4)
                  diag_lr_blk%raw(jc3,jc4,jl0r,il0) = num_lr(jc3,jc4)/den(jc3,jc4)
                  diag_blk%valid(jc3,jc4,jl0r,il0) = avg_blk%nc1a(jc3,jc4,jl0r,il0)
                  diag_lr_blk%valid(jc3,jc4,jl0r,il0) = avg_blk%nc1a(jc3,jc4,jl0r,il0)
               else
                  ! Missing value
                  diag_blk%raw(jc3,jc4,jl0r,il0) = mpl%msv%valr
                  diag_lr_blk%raw(jc3,jc4,jl0r,il0) = mpl%msv%valr
                  diag_blk%valid(jc3,jc4,jl0r,il0) = mpl%msv%valr
                  diag_lr_blk%valid(jc3,jc4,jl0r,il0) = mpl%msv%valr
               end if
            end if
         end do
      end do
   end do
end do

! Hybrid weight
diag_blk%coef_sta = mpl%msv%valr

! Release memory
deallocate(num)
deallocate(num_lr)
deallocate(den)

! End associate
end associate

! Probe out
@:probe_out()

end subroutine diag_blk_dualens

end module type_diag_blk
