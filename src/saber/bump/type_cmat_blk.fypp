#:include '../instrumentation.fypp'
!----------------------------------------------------------------------
! Module: type_cmat_blk
!> Correlation matrix derived type
! Author: Benjamin Menetrier
! Licensing: this code is distributed under the CeCILL-C license
! Copyright 2015-... UCAR, CERFACS, METEO-FRANCE and IRIT
!----------------------------------------------------------------------
module type_cmat_blk

use tools_kinds, only: kind_real
use type_bpar, only: bpar_type
use type_geom, only: geom_type
use type_mpl, only: mpl_type
use type_nam, only: nam_type
@:use_probe()

implicit none

! C matrix block data derived type
type cmat_blk_type
   ! Attributes
   integer :: ib                                     !< Block index
   logical :: anisotropic                            !< Anisoptropic tensor flag

   ! Computational data
   real(kind_real),allocatable :: coef_ens(:,:)      !< Ensemble coefficient
   real(kind_real),allocatable :: coef_sta(:,:)      !< Static coefficient
   real(kind_real),allocatable :: rh(:,:)            !< Horizontal fit support radius
   real(kind_real),allocatable :: rv(:,:)            !< Vertical fit support radius
   real(kind_real),allocatable :: rhs(:,:)           !< Fit support radius  for sampling
   real(kind_real),allocatable :: rvs(:,:)           !< Fit support radius, for sampling
   real(kind_real) :: wgt                            !< Block weight
   real(kind_real),allocatable :: H11(:,:)           !< LCT component 11
   real(kind_real),allocatable :: H22(:,:)           !< LCT component 22
   real(kind_real),allocatable :: H33(:,:)           !< LCT component 33
   real(kind_real),allocatable :: H12(:,:)           !< LCT component 12
   real(kind_real),allocatable :: Hcoef(:,:)         !< LCT scales coefficients
   real(kind_real),allocatable :: peakness(:,:)      !< Peakness

   ! BUMP interface data
   real(kind_real),allocatable :: bump_coef_ens(:,:) !< BUMP ensemble coefficient
   real(kind_real),allocatable :: bump_coef_sta(:,:) !< BUMP static coefficient
   real(kind_real),allocatable :: bump_rh(:,:)       !< BUMP horizontal fit support radius
   real(kind_real),allocatable :: bump_rv(:,:)       !< BUMP vertical fit support radius
   real(kind_real),allocatable :: bump_D11(:,:)      !< BUMP Daley tensor component 11
   real(kind_real),allocatable :: bump_D22(:,:)      !< BUMP Daley tensor component 22
   real(kind_real),allocatable :: bump_D33(:,:)      !< BUMP Daley tensor component 33
   real(kind_real),allocatable :: bump_D12(:,:)      !< BUMP Daley tensor component 12
   real(kind_real),allocatable :: bump_Dcoef(:,:)    !< BUMP Daley tensor scales coefficients
   real(kind_real),allocatable :: bump_peakness(:,:) !< BUMP peakness
contains
   procedure :: alloc => cmat_blk_alloc
   procedure :: init => cmat_blk_init
   procedure :: partial_bump_dealloc => cmat_blk_partial_bump_dealloc
   procedure :: partial_dealloc => cmat_blk_partial_dealloc
   procedure :: dealloc => cmat_blk_dealloc
end type cmat_blk_type

private
public :: cmat_blk_type

contains

!----------------------------------------------------------------------
! Subroutine: cmat_blk_alloc
!> Allocation
!----------------------------------------------------------------------
subroutine cmat_blk_alloc(cmat_blk,geom,bpar)

implicit none

! Passed variables
class(cmat_blk_type),intent(inout) :: cmat_blk !< C matrix data block
type(geom_type),intent(in) :: geom             !< Geometry
type(bpar_type),intent(in) :: bpar             !< Block parameters

! Set name
@:set_name(cmat_blk_alloc)

! Probe in
@:probe_in()

! Associate
associate(ib=>cmat_blk%ib)

if (bpar%diag_block(ib)) then
   ! Allocation
   allocate(cmat_blk%coef_ens(geom%nc0a,geom%nl0))
   allocate(cmat_blk%coef_sta(geom%nc0a,geom%nl0))
   allocate(cmat_blk%rh(geom%nc0a,geom%nl0))
   allocate(cmat_blk%rv(geom%nc0a,geom%nl0))
   allocate(cmat_blk%rhs(geom%nc0a,geom%nl0))
   allocate(cmat_blk%rvs(geom%nc0a,geom%nl0))
   if (cmat_blk%anisotropic) then
      allocate(cmat_blk%H11(geom%nc0a,geom%nl0))
      allocate(cmat_blk%H22(geom%nc0a,geom%nl0))
      allocate(cmat_blk%H33(geom%nc0a,geom%nl0))
      allocate(cmat_blk%H12(geom%nc0a,geom%nl0))
      allocate(cmat_blk%Hcoef(geom%nc0a,geom%nl0))
   end if
   allocate(cmat_blk%peakness(geom%nc0a,geom%nl0))
end if

! End associate
end associate

! Probe out
@:probe_out()

end subroutine cmat_blk_alloc

!----------------------------------------------------------------------
! Subroutine: cmat_blk_init
!> Initialization
!----------------------------------------------------------------------
subroutine cmat_blk_init(cmat_blk,mpl,bpar)

implicit none

! Passed variables
class(cmat_blk_type),intent(inout) :: cmat_blk !< C matrix data block
type(mpl_type),intent(in) :: mpl               !< MPI data
type(bpar_type),intent(in) :: bpar             !< Block parameters

! Set name
@:set_name(cmat_blk_init)

! Probe in
@:probe_in()

! Associate
associate(ib=>cmat_blk%ib)

if (bpar%diag_block(ib)) then
   ! Initialization
   cmat_blk%coef_ens = mpl%msv%valr
   cmat_blk%coef_sta = mpl%msv%valr
   cmat_blk%rh = mpl%msv%valr
   cmat_blk%rv = mpl%msv%valr
   cmat_blk%rhs = mpl%msv%valr
   cmat_blk%rvs = mpl%msv%valr
   if (cmat_blk%anisotropic) then
      cmat_blk%H11 = mpl%msv%valr
      cmat_blk%H22 = mpl%msv%valr
      cmat_blk%H33 = mpl%msv%valr
      cmat_blk%H12 = mpl%msv%valr
      cmat_blk%Hcoef = mpl%msv%valr
   end if
   cmat_blk%peakness = mpl%msv%valr
end if

! End associate
end associate

! Probe out
@:probe_out()

end subroutine cmat_blk_init

!----------------------------------------------------------------------
! Subroutine: cmat_blk_partial_bump_dealloc
!> Release memory (partial)
!----------------------------------------------------------------------
subroutine cmat_blk_partial_bump_dealloc(cmat_blk)

implicit none

! Passed variables
class(cmat_blk_type),intent(inout) :: cmat_blk !< C matrix data block

! Set name
@:set_name(cmat_blk_partial_bump_dealloc)

! Probe in
@:probe_in()

! Release memory
if (allocated(cmat_blk%bump_coef_ens)) deallocate(cmat_blk%bump_coef_ens)
if (allocated(cmat_blk%bump_coef_sta)) deallocate(cmat_blk%bump_coef_sta)
if (allocated(cmat_blk%bump_rh)) deallocate(cmat_blk%bump_rh)
if (allocated(cmat_blk%bump_rv)) deallocate(cmat_blk%bump_rv)
if (allocated(cmat_blk%bump_D11)) deallocate(cmat_blk%bump_D11)
if (allocated(cmat_blk%bump_D22)) deallocate(cmat_blk%bump_D22)
if (allocated(cmat_blk%bump_D33)) deallocate(cmat_blk%bump_D33)
if (allocated(cmat_blk%bump_D12)) deallocate(cmat_blk%bump_D12)
if (allocated(cmat_blk%bump_Dcoef)) deallocate(cmat_blk%bump_Dcoef)
if (allocated(cmat_blk%bump_peakness)) deallocate(cmat_blk%bump_peakness)

! Probe out
@:probe_out()

end subroutine cmat_blk_partial_bump_dealloc

!----------------------------------------------------------------------
! Subroutine: cmat_blk_partial_dealloc
!> Release memory (partial)
!----------------------------------------------------------------------
subroutine cmat_blk_partial_dealloc(cmat_blk)

implicit none

! Passed variables
class(cmat_blk_type),intent(inout) :: cmat_blk !< C matrix data block

! Set name
@:set_name(cmat_blk_partial_dealloc)

! Probe in
@:probe_in()

! Release memory
call cmat_blk%partial_bump_dealloc
if (allocated(cmat_blk%rhs)) deallocate(cmat_blk%rhs)
if (allocated(cmat_blk%rvs)) deallocate(cmat_blk%rvs)
if (allocated(cmat_blk%H11)) deallocate(cmat_blk%H11)
if (allocated(cmat_blk%H22)) deallocate(cmat_blk%H22)
if (allocated(cmat_blk%H33)) deallocate(cmat_blk%H33)
if (allocated(cmat_blk%H12)) deallocate(cmat_blk%H12)
if (allocated(cmat_blk%Hcoef)) deallocate(cmat_blk%Hcoef)

! Probe out
@:probe_out()

end subroutine cmat_blk_partial_dealloc

!----------------------------------------------------------------------
! Subroutine: cmat_blk_dealloc
!> Release memory
!----------------------------------------------------------------------
subroutine cmat_blk_dealloc(cmat_blk)

implicit none

! Passed variables
class(cmat_blk_type),intent(inout) :: cmat_blk !< C matrix data block

! Set name
@:set_name(cmat_blk_dealloc)

! Probe in
@:probe_in()

! Release memory
call cmat_blk%partial_dealloc
if (allocated(cmat_blk%coef_ens)) deallocate(cmat_blk%coef_ens)
if (allocated(cmat_blk%coef_sta)) deallocate(cmat_blk%coef_sta)
if (allocated(cmat_blk%rh)) deallocate(cmat_blk%rh)
if (allocated(cmat_blk%rv)) deallocate(cmat_blk%rv)
if (allocated(cmat_blk%peakness)) deallocate(cmat_blk%peakness)

! Probe out
@:probe_out()

end subroutine cmat_blk_dealloc

end module type_cmat_blk
