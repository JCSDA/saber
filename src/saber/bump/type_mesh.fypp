#:include '../instrumentation.fypp'
!----------------------------------------------------------------------
! Module: type_mesh
!> Mesh derived type
! Author: Benjamin Menetrier
! Licensing: this code is distributed under the CeCILL-C license
! Copyright 2015-... UCAR, CERFACS, METEO-FRANCE and IRIT
!----------------------------------------------------------------------
module type_mesh

use atlas_module, only: atlas_unstructuredgrid,atlas_meshgenerator,atlas_mesh,atlas_build_edges, &
 & atlas_build_node_to_edge_connectivity,atlas_mesh_nodes,atlas_connectivity
!$ use omp_lib
use tools_const, only: zero,one,two,three,five,pi,req,rad2deg,reqkm
use tools_func, only: fletcher32,lonlatmod,sphere_dist,lonlat2xyz,xyz2lonlat,inside,vector_product,order_cc,det,zss_maxval
use tools_kinds, only: kind_long,kind_real,huge_real
use tools_qsort, only: qsort
use tools_repro, only: rth,inf
use tools_ssrfpack, only: aplyr,constr,fval,fval_op,gradl
use tools_stripack, only: trfind,trmesh,bnodes
use type_mpl, only: mpl_type
@:use_probe()
use type_rng, only: rng_type
use type_tree, only: tree_type

implicit none

integer,parameter :: nnmax = 20                          !< Maximum number of nearest neighbors in the triangle search
real(kind_real),parameter :: acc_fac = five              !< Acceptance factor for mesh neighbors
real(kind_real),parameter :: pfactor = 1.0e-10_kind_real !< Perturbation factor

! Connectivity table row derived type
type row_type
   integer :: cols                 !< Number of columns
   integer,allocatable :: nodes(:) !< Nodes indices
end type row_type

! Mesh derived type
type mesh_type
   ! Mesh structure
   integer :: n                            !< Number of points
   logical :: use_cgal                     !< Use CGAL for mesh generation
   type(row_type),allocatable :: rows(:)   !< Connectivity table rows
   integer :: maxcols                      !< Maximum number of columns
   integer,allocatable :: order(:)         !< Order of shuffled points
   integer,allocatable :: order_inv(:)     !< Inverse order of shuffled points

   ! Mesh coordinates
   real(kind_real),allocatable :: lon(:)   !< Points longitudes
   real(kind_real),allocatable :: lat(:)   !< Points latitudes
   real(kind_real),allocatable :: x(:)     !< x-coordinate
   real(kind_real),allocatable :: y(:)     !< y-coordinate
   real(kind_real),allocatable :: z(:)     !< z-coordinate

   ! STRIPACK
   integer,allocatable :: list(:)          !< STRIPACK list
   integer,allocatable :: lptr(:)          !< STRIPACK list pointer
   integer,allocatable :: lend(:)          !< STRIPACK list end
   integer :: lnew                         !< STRIPACK pointer to the first empty location in list

   ! Boundary fields
   real(kind_real),allocatable :: vbnd(:,:)       !< Hull boundary vertices
   integer,allocatable :: nbnda(:)                !< Number of mask boundary arcs
   real(kind_real),allocatable :: v1bnda(:,:,:)   !< Mask boundary arcs, first vector
   real(kind_real),allocatable :: v2bnda(:,:,:)   !< Mask boundary arcs, second vector
   real(kind_real),allocatable :: vabnda(:,:,:)   !< Mask boundary arcs, orthogonal vector
contains
   procedure :: alloc => mesh_alloc
   procedure :: init => mesh_init
   procedure :: dealloc => mesh_dealloc
   procedure :: barycentric => mesh_barycentric
   procedure :: compute_grad => mesh_compute_grad
   procedure :: compute_c1_interp => mesh_compute_c1_interp
   procedure :: compute_c1_interp_op => mesh_compute_c1_interp_op
   procedure :: count_bnda => mesh_count_bnda
   procedure :: get_bnda => mesh_get_bnda
   procedure :: check_arc => mesh_check_arc
end type mesh_type

private
public :: mesh_type

contains

!----------------------------------------------------------------------
! Subroutine: mesh_alloc
!> Allocation
!----------------------------------------------------------------------
subroutine mesh_alloc(mesh,n,use_cgal)

implicit none

! Passed variables
class(mesh_type),intent(inout) :: mesh !< Mesh
integer,intent(in) :: n                !< Mesh size
logical,intent(in) :: use_cgal         !< Use CGAL option

! Set name
@:set_name(mesh_alloc)

! Probe in
@:probe_in()

! Initialization
mesh%n = n
mesh%use_cgal = use_cgal

! Allocation
allocate(mesh%order(mesh%n))
allocate(mesh%order_inv(mesh%n))
allocate(mesh%lon(mesh%n))
allocate(mesh%lat(mesh%n))
allocate(mesh%x(mesh%n))
allocate(mesh%y(mesh%n))
allocate(mesh%z(mesh%n))
allocate(mesh%rows(mesh%n))
if (.not.mesh%use_cgal) then
   allocate(mesh%list(6*(mesh%n-2)))
   allocate(mesh%lptr(6*(mesh%n-2)))
   allocate(mesh%lend(mesh%n))
end if

! Probe out
@:probe_out()

end subroutine mesh_alloc

!----------------------------------------------------------------------
! Subroutine: mesh_init
!> Intialization
!----------------------------------------------------------------------
subroutine mesh_init(mesh,mpl,rng,lon,lat,hull_bnd)

implicit none

! Passed variables
class(mesh_type),intent(inout) :: mesh    !< Mesh
type(mpl_type),intent(inout) :: mpl       !< MPI data
type(rng_type),intent(inout) :: rng       !< Random number generator
real(kind_real),intent(in) :: lon(mesh%n) !< Longitudes
real(kind_real),intent(in) :: lat(mesh%n) !< Latitudes
logical,intent(in),optional :: hull_bnd   !< Flag to compute hull boundary vertices

! Local variables
integer :: i,j,k,cols,maxedge,jtab(mesh%n),nb,ib
integer,allocatable :: nodes(:,:),order(:),near(:),next(:),bnd(:)
integer,pointer :: row(:)
integer(kind_long) :: hash_long
real(kind_real) :: lon_pert(mesh%n),lat_pert(mesh%n)
real(kind_real),allocatable :: lonlat(:,:),dist(:),x(:),y(:),z(:)
logical :: lhull_bnd,init
type(atlas_unstructuredgrid) :: agrid
type(atlas_mesh) :: amesh
type(atlas_meshgenerator) :: ameshgenerator
type(atlas_mesh_nodes) :: anodes
type(atlas_connectivity) :: aconnectivity

! Set name
@:set_name(mesh_init)

! Probe in
@:probe_in()

! Local flag
lhull_bnd = .false.
if (present(hull_bnd)) lhull_bnd = hull_bnd

! Copy lon/lat
mesh%lon = lon
mesh%lat = lat

! Reorder points
call qsort(mesh%n,mesh%lon,mesh%lat,mesh%order,.false.)

! Shuffle order (more efficient to compute the Delaunay triangulation)
call rng%resync(mpl)
call rng%rand(1,mesh%n,jtab)
call rng%desync(mpl)
do i=mesh%n,2,-1
   k = mesh%order(jtab(i))
   mesh%order(jtab(i)) = mesh%order(i)
   mesh%order(i) = k
end do

! Inverse order
do i=1,mesh%n
   mesh%order_inv(mesh%order(i)) = i
end do

! Reorder lon/lat
mesh%lon = mesh%lon(mesh%order)
mesh%lat = mesh%lat(mesh%order)

! Transform to cartesian coordinates
do i=1,mesh%n
   call lonlat2xyz(mpl,mesh%lon(i),mesh%lat(i),mesh%x(i),mesh%y(i),mesh%z(i))
end do

! Perturb grid coordinates to avoid colinear points
do i=1,mesh%n
   ! Compute hash
   hash_long = int(fletcher32((/mesh%lon(i),mesh%lat(i)/)),kind_long)

   ! Generate pseudo-random numbers between -1e-10 and 1e-10 from the hash
   call rng%lcg(lon_pert(i),hash_long)
   call rng%lcg(lat_pert(i),hash_long)
   lon_pert(i) = pfactor*(two*lon_pert(i)-one)
   lat_pert(i) = pfactor*(two*lat_pert(i)-one)

   ! Perturb grid coordinates
   mesh%lon(i) = mesh%lon(i)+lon_pert(i)
   mesh%lat(i) = mesh%lat(i)+lat_pert(i)

   ! Apply bounds
   call lonlatmod(mesh%lon(i),mesh%lat(i))
end do

if (mesh%use_cgal) then
   ! Use ATLAS/CGAL mesh

   ! Allocation
   allocate(lonlat(2,mesh%n))

   ! Copy coordinates and convert to degrees
   lonlat(1,:) = mesh%lon*rad2deg
   lonlat(2,:) = mesh%lat*rad2deg

   ! Create unstructured grid
   agrid = atlas_unstructuredgrid(lonlat)

   ! Mesh generator
   ameshgenerator = atlas_meshgenerator('delaunay')

   ! Create mesh from grid
   amesh = ameshgenerator%generate(agrid)

   ! Build connectivity
   call atlas_build_edges(amesh)
   call atlas_build_node_to_edge_connectivity(amesh)

   ! Get connectivity
   anodes = amesh%nodes()
   aconnectivity = anodes%edge_connectivity()

   ! Check number of rows
   if (aconnectivity%rows()/=mesh%n) call mpl%abort('${subr}$','number of rows should be equal to the number of points')

   ! Allocation
   maxedge = 0
   do i=1,mesh%n
      call aconnectivity%row(i,row,cols)
      mesh%rows(i)%cols = cols
      maxedge = max(maxedge,zss_maxval(row(1:cols)))
      allocate(mesh%rows(i)%nodes(mesh%rows(i)%cols))
   end do
   allocate(nodes(maxedge,2))

   ! Fill nodes for each edge
   nodes = mpl%msv%vali
   do i=1,mesh%n
      call aconnectivity%row(i,row,cols)
      do j=1,mesh%rows(i)%cols
         k = row(j)
         if (mpl%msv%is(nodes(k,1))) then
            ! First point
            nodes(k,1) = i
         elseif (mpl%msv%is(nodes(k,2))) then
            ! Second point
            nodes(k,2) = i
         else
            ! Error
            call mpl%abort('${subr}$','third node for the same edge')
         end if
      end do
   end do

   ! Fill nodes index in connectivity list
   do i=1,mesh%n
      call aconnectivity%row(i,row,cols)
      do j=1,mesh%rows(i)%cols
         k = row(j)
         if (i==nodes(k,1)) then
            ! Node is first point
            mesh%rows(i)%nodes(j) = nodes(k,2)
         elseif (i==nodes(k,2)) then
            ! Node is second point
            mesh%rows(i)%nodes(j) = nodes(k,1)
         else
            ! Error
            call mpl%abort('${subr}$','no node for the this edge')
         end if
      end do
   end do

   ! Sort nodes in counter-clockwise order
   do i=1,mesh%n
      ! Allocation
      allocate(x(mesh%rows(i)%cols))
      allocate(y(mesh%rows(i)%cols))
      allocate(z(mesh%rows(i)%cols))
      allocate(order(mesh%rows(i)%cols))

      ! Copy coordinates
      x = mesh%x(mesh%rows(i)%nodes)
      y = mesh%y(mesh%rows(i)%nodes)
      z = mesh%z(mesh%rows(i)%nodes)

      ! Sort nodes
      call order_cc(mpl,mesh%lon(i),mesh%lat(i),mesh%rows(i)%cols,x,y,z,order)
      mesh%rows(i)%nodes = mesh%rows(i)%nodes(order)

      ! Release memory
      deallocate(x)
      deallocate(y)
      deallocate(z)
      deallocate(order)
   end do

   ! Release memory
   deallocate(lonlat)
   deallocate(nodes)
   call agrid%final()
   call amesh%final()
   call ameshgenerator%final()
   call anodes%final()
   call aconnectivity%final()
else
   ! Use STRIPACK

   ! Allocation
   allocate(near(mesh%n))
   allocate(next(mesh%n))
   allocate(dist(mesh%n))

   ! Create mesh
   mesh%list = 0
   mesh%lend = 0
   mesh%lnew = 0

   ! Call TRMESH
   call trmesh(mpl,mesh%n,mesh%x,mesh%y,mesh%z,mesh%list,mesh%lptr,mesh%lend,mesh%lnew,near,next,dist)

   ! Count neighbors
   do i=1,mesh%n
      mesh%rows(i)%cols = 0
      j = mesh%lend(i)
      init = .true.
      do while ((j/=mesh%lend(i)).or.init)
         mesh%rows(i)%cols = mesh%rows(i)%cols+1
         j = mesh%lptr(j)
         init = .false.
      end do
   end do

   ! Find neighbors indices
   do i=1,mesh%n
      allocate(mesh%rows(i)%nodes(mesh%rows(i)%cols))
      mesh%rows(i)%cols = 0
      j = mesh%lend(i)
      init = .true.
      do while ((j/=mesh%lend(i)).or.init)
         mesh%rows(i)%cols = mesh%rows(i)%cols+1
         mesh%rows(i)%nodes(mesh%rows(i)%cols) = abs(mesh%list(j))
         j = mesh%lptr(j)
         init = .false.
      end do
   end do

   ! Release memory
   deallocate(near)
   deallocate(next)
   deallocate(dist)
end if

! Maximum number of columns
mesh%maxcols = 0
do i=1,mesh%n
   mesh%maxcols = max(mesh%maxcols,mesh%rows(i)%cols)
end do

do i=1,mesh%n
   ! Unperturb grid coordinates
   mesh%lon(i) = mesh%lon(i)-lon_pert(i)
   mesh%lat(i) = mesh%lat(i)-lat_pert(i)

   ! Apply bounds
   call lonlatmod(mesh%lon(i),mesh%lat(i))
end do

if (lhull_bnd) then
   ! Allocation
   allocate(bnd(mesh%n))

   ! Get bboundary nodes
   call bnodes(mesh%n,mesh%list,mesh%lptr,mesh%lend,bnd,nb)

   ! Allocation
   allocate(mesh%vbnd(3,nb))

   ! Copy boundary vertices
   do ib=1,nb
      mesh%vbnd(:,ib) = (/mesh%x(bnd(ib)),mesh%y(bnd(ib)),mesh%z(bnd(ib))/)
   end do

   ! Release memory
   deallocate(bnd)
end if

! Probe out
@:probe_out()

end subroutine mesh_init

!----------------------------------------------------------------------
! Subroutine: mesh_dealloc
!> Release memory
!----------------------------------------------------------------------
subroutine mesh_dealloc(mesh)

implicit none

! Passed variables
class(mesh_type),intent(inout) :: mesh !< Mesh

! Local variables
integer :: i

! Set name
@:set_name(mesh_dealloc)

! Probe in
@:probe_in()

! Release memory
if (allocated(mesh%order)) deallocate(mesh%order)
if (allocated(mesh%order_inv)) deallocate(mesh%order_inv)
if (allocated(mesh%lon)) deallocate(mesh%lon)
if (allocated(mesh%lat)) deallocate(mesh%lat)
if (allocated(mesh%x)) deallocate(mesh%x)
if (allocated(mesh%y)) deallocate(mesh%y)
if (allocated(mesh%z)) deallocate(mesh%z)
if (allocated(mesh%rows)) then
   do i=1,mesh%n
      if (allocated(mesh%rows(i)%nodes)) deallocate(mesh%rows(i)%nodes)
   end do
   deallocate(mesh%rows)
end if
if (allocated(mesh%list)) deallocate(mesh%list)
if (allocated(mesh%lptr)) deallocate(mesh%lptr)
if (allocated(mesh%lend)) deallocate(mesh%lend)
if (allocated(mesh%vbnd)) deallocate(mesh%vbnd)
if (allocated(mesh%nbnda)) deallocate(mesh%nbnda)
if (allocated(mesh%v1bnda)) deallocate(mesh%v1bnda)
if (allocated(mesh%v2bnda)) deallocate(mesh%v2bnda)
if (allocated(mesh%vabnda)) deallocate(mesh%vabnda)

! Probe out
@:probe_out()

end subroutine mesh_dealloc

!----------------------------------------------------------------------
! Subroutine: mesh_barycentric
!> Compute barycentric coordinates
!----------------------------------------------------------------------
subroutine mesh_barycentric(mesh,mpl,lon,lat,tree,b,ib)

implicit none

! Passed variables
class(mesh_type),intent(in) :: mesh !< Mesh
type(mpl_type),intent(inout) :: mpl !< MPI data
real(kind_real),intent(in) :: lon   !< Longitude
real(kind_real),intent(in) :: lat   !< Latitude
type(tree_type),intent(in) :: tree  !< Tree
real(kind_real),intent(out) :: b(3) !< Barycentric weights
integer,intent(out) :: ib(3)        !< Barycentric indices

! Local variables
integer :: i,j,k,knext,nn,l,order(3)
integer,allocatable :: nn_index(:)
real(kind_real) :: xyz(3),pi(3),pk(3),pknext(3)
real(kind_real),allocatable :: nn_dist(:)
logical :: found,cflag(3),valid

! Set name
@:set_name(mesh_barycentric)

! Probe in
@:probe_in()

! Transform to cartesian coordinates
call lonlat2xyz(mpl,lon,lat,xyz(1),xyz(2),xyz(3))

if (mesh%use_cgal) then
   ! Initialization
   found = .false.
   nn = 1
   ib = mpl%msv%vali
   b = mpl%msv%valr

   do while ((.not.found).and.(nn<=nnmax))
      ! Allocation
      if (nn>mesh%n) call mpl%abort('${subr}$','cannot find a triangle containing this point')
      allocate(nn_index(nn))
      allocate(nn_dist(nn))

      ! Find the next nearest neighbor
      call tree%find_nearest_neighbors(lon,lat,nn,nn_index,nn_dist)
      i = mesh%order_inv(nn_index(nn))

      ! Check distance
      if (nn_dist(nn)>zero) then
         ! Loop over neigbors
         do j=1,mesh%rows(i)%cols
            ! Find the two other vertices of the triangle
            k = mesh%rows(i)%nodes(j)
            if (j<mesh%rows(i)%cols) then
               knext = mesh%rows(i)%nodes(j+1)
            else
               knext = mesh%rows(i)%nodes(1)
            end if

            ! Compute weights
            pi = (/mesh%x(i),mesh%y(i),mesh%z(i)/)
            pk = (/mesh%x(k),mesh%y(k),mesh%z(k)/)
            pknext = (/mesh%x(knext),mesh%y(knext),mesh%z(knext)/)
            call det(pk,pknext,xyz,b(1),cflag(1))
            call det(pknext,pi,xyz,b(2),cflag(2))
            call det(pi,pk,xyz,b(3),cflag(3))

            ! Check if the points are colinear
            if (count(cflag)>=2) then
               ! At least two non-flat triangles, check if weights are positive
               valid = .true.
               do l=1,3
                  if (cflag(l)) valid = valid.and.(b(l)>zero)
               end do
               if (valid) then
                  ib(1) = nn_index(nn)
                  ib(2) = mesh%order(k)
                  ib(3) = mesh%order(knext)
                  b = max(b,zero)
                  b = b/sum(b)
                  found = .true.
                  exit
               end if
            elseif (count(cflag)==0) then
               ! Only flat triangles, pick the two closest nodes
               deallocate(nn_index)
               deallocate(nn_dist)
               allocate(nn_index(3))
               allocate(nn_dist(3))
               call tree%find_nearest_neighbors(lon,lat,3,nn_index,nn_dist)
               ib = nn_index
               b(1) = nn_dist(2)
               b(2) = nn_dist(1)
               b(3) = zero
               b = b/sum(b)
               found = .true.
               exit
            end if
         end do
      else
         ib(1) = nn_index(nn)
         ib(2) = nn_index(nn)
         ib(3) = nn_index(nn)
         b(1) = one
         b(2) = zero
         b(3) = zero
      end if

      ! Release memory
      deallocate(nn_index)
      deallocate(nn_dist)

      ! Update number of neighbors
      nn = nn+1
   end do
else
   ! Allocation
   allocate(nn_index(1))

   ! Find the next nearest neighbor
   call tree%find_nearest_neighbors(lon,lat,1,nn_index)

   ! Compute barycentric coordinates
   b = zero
   ib = 0
   call trfind(nn_index(1),xyz,mesh%n,mesh%x,mesh%y,mesh%z,mesh%list,mesh%lptr,mesh%lend,b(1),b(2),b(3),ib(1),ib(2),ib(3))

   ! Transform indices
   if (all(ib>0)) then
      ib = mesh%order(ib)
   else
      ib = mpl%msv%vali
   end if

   ! Release memory
   deallocate(nn_index)
end if

! Order
if (mpl%msv%isallnot(ib)) then
   call qsort(3,ib,order)
   b = b(order)
end if

! Probe out
@:probe_out()

end subroutine mesh_barycentric

!----------------------------------------------------------------------
! Subroutine: mesh_compute_grad
!> Compute gradient (SSRF local gradient estimator)
!----------------------------------------------------------------------
subroutine mesh_compute_grad(mesh,mpl,i,field,g)

implicit none

! Passed variables
class(mesh_type),intent(in) :: mesh         !< Mesh
type(mpl_type),intent(inout) :: mpl         !< MPI data
integer,intent(in) :: i                     !< Index
real(kind_real),intent(in) :: field(mesh%n) !< Field
real(kind_real),intent(out) :: g(3)         !< Gradient

! Local variables
integer :: ieff
real(kind_real) :: field_eff(mesh%n)

! Set name
@:set_name(mesh_compute_grad)

! Probe in
@:probe_in()

! Inverse order
ieff = mesh%order_inv(i)

! Transform field
field_eff = field(mesh%order)

! Compute gradient
call gradl(mpl,mesh%n,ieff,mesh%x,mesh%y,mesh%z,field_eff,mesh%list,mesh%lptr,mesh%lend,g)

! Probe out
@:probe_out()

end subroutine mesh_compute_grad

!----------------------------------------------------------------------
! Subroutine: mesh_compute_c1_interp
!> Compute C1 interpolation (SSRF estimator)
!----------------------------------------------------------------------
subroutine mesh_compute_c1_interp(mesh,mpl,tree_src,field_src,n_dst,lon_dst,lat_dst,field_dst,grad_src)

implicit none

! Passed variables
class(mesh_type),intent(in) :: mesh                       !< Mesh
type(mpl_type),intent(inout) :: mpl                       !< MPI data
type(tree_type),intent(in) :: tree_src                    !< Source tree
real(kind_real),intent(in) :: field_src(mesh%n)           !< Source field
integer,intent(in) :: n_dst                               !< Destination size
real(kind_real),intent(in) :: lon_dst(n_dst)              !< Destination longitudes
real(kind_real),intent(in) :: lat_dst(n_dst)              !< Destination latitudes
real(kind_real),intent(out) :: field_dst(n_dst)           !< Destination field
real(kind_real),intent(in),optional :: grad_src(mesh%n,3) !< Source gradient (optional)

! Local variables
integer :: i_dst,nn_index(1),ib(3)
real(kind_real) :: field_eff(mesh%n),xyz(3),b(3),p1(3),p2(3),p3(3),g1(3),g2(3),g3(3)

! Set name
@:set_name(mesh_compute_c1_interp)

! Probe in
@:probe_in()

! Transform field
field_eff = field_src(mesh%order)

do i_dst=1,n_dst
   ! Transform to cartesian coordinates
   call lonlat2xyz(mpl,lon_dst(i_dst),lat_dst(i_dst),xyz(1),xyz(2),xyz(3))

   ! Find the next nearest neighbor
   call tree_src%find_nearest_neighbors(lon_dst(i_dst),lat_dst(i_dst),1,nn_index)

   ! Compute barycentric coordinates
   b = zero
   ib = 0
   call trfind(nn_index(1),xyz,mesh%n,mesh%x,mesh%y,mesh%z,mesh%list,mesh%lptr,mesh%lend,b(1),b(2),b(3),ib(1),ib(2),ib(3))

   ! Vertices
   p1 = (/mesh%x(ib(1)),mesh%y(ib(1)),mesh%z(ib(1))/)
   p2 = (/mesh%x(ib(2)),mesh%y(ib(2)),mesh%z(ib(2))/)
   p3 = (/mesh%x(ib(3)),mesh%y(ib(3)),mesh%z(ib(3))/)

   if (present(grad_src)) then
      ! Copy gradient
      g1 = grad_src(mesh%order(ib(1)),:)
      g2 = grad_src(mesh%order(ib(2)),:)
      g3 = grad_src(mesh%order(ib(3)),:)
   else
      ! Compute gradient
      call gradl(mpl,mesh%n,ib(1),mesh%x,mesh%y,mesh%z,field_eff,mesh%list,mesh%lptr,mesh%lend,g1)
      call gradl(mpl,mesh%n,ib(2),mesh%x,mesh%y,mesh%z,field_eff,mesh%list,mesh%lptr,mesh%lend,g2)
      call gradl(mpl,mesh%n,ib(3),mesh%x,mesh%y,mesh%z,field_eff,mesh%list,mesh%lptr,mesh%lend,g3)
   end if

   ! Normalize the coordinates
   b = b/sum(b)

   ! Get interpolated value
   field_dst(i_dst) = fval(mpl,b(1),b(2),b(3),p1,p2,p3,field_eff(ib(1)),field_eff(ib(2)),field_eff(ib(3)),g1,g2,g3)
end do

! Probe out
@:probe_out()

end subroutine mesh_compute_c1_interp

!----------------------------------------------------------------------
! Subroutine: mesh_compute_c1_interp_op
!> Compute C1 interpolation operator (indices and weights)
!----------------------------------------------------------------------
subroutine mesh_compute_c1_interp_op(mesh,mpl,b,ib,af,ag)

implicit none

! Passed variables
class(mesh_type),intent(in) :: mesh    !< Mesh
type(mpl_type),intent(inout) :: mpl    !< MPI data
real(kind_real),intent(out) :: b(3)    !< Barycentric weights
integer,intent(out) :: ib(3)           !< Barycentric indices
real(kind_real),intent(out) :: af(3)   !< Function weights
real(kind_real),intent(out) :: ag(3,3) !< Gradient weights

! Local variables
real(kind_real) :: p1(3),p2(3),p3(3)

! Set name
@:set_name(mesh_compute_c1_interp_op)

! Probe in
@:probe_in()

! Vertices coordinates
p1 = (/mesh%x(mesh%order_inv(ib(1))),mesh%y(mesh%order_inv(ib(1))),mesh%z(mesh%order_inv(ib(1)))/)
p2 = (/mesh%x(mesh%order_inv(ib(2))),mesh%y(mesh%order_inv(ib(2))),mesh%z(mesh%order_inv(ib(2)))/)
p3 = (/mesh%x(mesh%order_inv(ib(3))),mesh%y(mesh%order_inv(ib(3))),mesh%z(mesh%order_inv(ib(3)))/)

! Get SSRF operator
call fval_op(mpl,b(1),b(2),b(3),p1,p2,p3,af,ag)

! Probe out
@:probe_out()

end subroutine mesh_compute_c1_interp_op

!----------------------------------------------------------------------
! Subroutine: mesh_count_bnda
!> Count boundary arcs
!----------------------------------------------------------------------
subroutine mesh_count_bnda(mesh,gmask,nbnda)

implicit none

! Passed variables
class(mesh_type),intent(in) :: mesh !< Mesh
logical,intent(in) :: gmask(mesh%n) !< Mask
integer,intent(out) :: nbnda        !< Number of boundary nodes

! Local variables
integer :: i,ii,j,k,kk,knext,kknext

! Set name
@:set_name(mesh_count_bnda)

! Probe in
@:probe_in()

! Initialiation
nbnda = 0

! Loop over points
do i=1,mesh%n
   ii = mesh%order(i)
   if (.not.gmask(ii)) then
      ! Loop over neigbors
      do j=1,mesh%rows(i)%cols
         k = mesh%rows(i)%nodes(j)
         kk = mesh%order(k)
         if (j<mesh%rows(i)%cols) then
            knext = mesh%rows(i)%nodes(j+1)
         else
            knext = mesh%rows(i)%nodes(1)
         end if
         kknext = mesh%order(knext)
         if (.not.gmask(kk).and.gmask(kknext)) nbnda = nbnda+1
      end do
   end if
end do

! Probe out
@:probe_out()

end subroutine mesh_count_bnda

!----------------------------------------------------------------------
! Subroutine: mesh_get_bnda
!> Get boundary arcs
!----------------------------------------------------------------------
subroutine mesh_get_bnda(mesh,gmask,nbnda,bnda_index)

implicit none

! Passed variables
class(mesh_type),intent(in) :: mesh        !< Mesh
logical,intent(in) :: gmask(mesh%n)        !< Mask
integer,intent(in) :: nbnda                !< Number of boundary nodes
integer,intent(out) :: bnda_index(2,nbnda) !< Boundary node index

! Local variables
integer :: ibnda,i,ii,j,k,kk,knext,kknext

! Set name
@:set_name(mesh_get_bnda)

! Probe in
@:probe_in()

! Initialiation
ibnda = 0
bnda_index = 0

! Loop over points
do i=1,mesh%n
   ii = mesh%order(i)
   if (.not.gmask(ii)) then
      ! Loop over neigbors
      do j=1,mesh%rows(i)%cols
         k = mesh%rows(i)%nodes(j)
         kk = mesh%order(k)
         if (j<mesh%rows(i)%cols) then
            knext = mesh%rows(i)%nodes(j+1)
         else
            knext = mesh%rows(i)%nodes(1)
         end if
         kknext = mesh%order(knext)
         if (.not.gmask(kk).and.gmask(kknext)) then
            ibnda = ibnda+1
            bnda_index(1,ibnda) = ii
            bnda_index(2,ibnda) = kk
         end if
      end do
   end if
end do

! Probe out
@:probe_out()

end subroutine mesh_get_bnda

!----------------------------------------------------------------------
! Subroutine: mesh_check_arc
!> Check if an arc is crossing mask boundaries
!----------------------------------------------------------------------
subroutine mesh_check_arc(mesh,mpl,lon_s,lat_s,lon_e,lat_e,il0,valid,prt)

implicit none

! Passed variables
class(mesh_type),intent(in) :: mesh !< Mesh
type(mpl_type),intent(inout) :: mpl !< MPI data
real(kind_real),intent(in) :: lon_s !< First point longitude
real(kind_real),intent(in) :: lat_s !< First point latitude
real(kind_real),intent(in) :: lon_e !< Second point longitude
real(kind_real),intent(in) :: lat_e !< Second point latitude
integer,intent(in) :: il0           !< Level
logical,intent(inout) :: valid      !< True for valid arcs
logical,intent(in),optional :: prt  !< Print values (very useful for debugging)

! Local variables
integer :: ibnda
real(kind_real) :: v1(3),v2(3),va(3),vp(3),t(4),tmin,tmax
logical :: lprt

! Set name
@:set_name(mesh_check_arc)

! Probe in
@:probe_in()

! Local flag
lprt = .false.
if (present(prt)) lprt = prt

if (valid) then
   ! Transform to cartesian coordinates
   call lonlat2xyz(mpl,lon_s,lat_s,v1(1),v1(2),v1(3))
   call lonlat2xyz(mpl,lon_e,lat_e,v2(1),v2(2),v2(3))

   ! Compute arc orthogonal vector
   call vector_product(v1,v2,va)

   ! Check if arc is crossing boundary arcs
   do ibnda=1,mesh%nbnda(il0)
      if (valid) then
         ! Compute factors
         call vector_product(va,mesh%vabnda(:,ibnda,il0),vp)
         call det(v1,va,vp,t(1))
         call det(v2,va,vp,t(2))
         call det(mesh%v1bnda(:,ibnda,il0),mesh%vabnda(:,ibnda,il0),vp,t(3))
         call det(mesh%v2bnda(:,ibnda,il0),mesh%vabnda(:,ibnda,il0),vp,t(4))
         t(1) = -t(1)
         t(3) = -t(3)

         ! Get min/max
         tmin = minval(t)
         tmax = maxval(t)

         if ((abs(tmin)>rth).and.(abs(tmax)>rth)) then
            valid = (tmin*tmax<zero)
         else
            valid = .true.
         end if

         ! Print results
         if (lprt) then
            write(mpl%debug,'(a,i5,f12.8,f12.8,l2)') 'in mesh_arc test: ',ibnda,tmin,tmax,valid
            call mpl%flush
         end if
      end if
   end do
end if

! Probe out
@:probe_out()

end subroutine mesh_check_arc

end module type_mesh
