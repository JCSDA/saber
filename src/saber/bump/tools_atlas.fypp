#:include 'generics.fypp'
#:include 'instrumentation.fypp'
!----------------------------------------------------------------------
! Module: tools_atlas
!> ATLAS tools
! Author: Benjamin Menetrier
! Licensing: this code is distributed under the CeCILL-C license
! Copyright 2015-... UCAR, CERFACS, METEO-FRANCE and IRIT
!----------------------------------------------------------------------
module tools_atlas

use atlas_module, only: atlas_structuredgrid,atlas_regionalgrid,atlas_field,atlas_integer,atlas_real,atlas_functionspace, &
 & atlas_functionspace_nodecolumns,atlas_functionspace_pointcloud,atlas_functionspace_structuredcolumns
use tools_const, only: zero,quarter,half,rad2deg
use tools_kinds, only: kind_int,kind_real
use tools_func, only: sphere_dist,convert_i2l,convert_l2i
use type_mpl, only: mpl_type
@:use_probe()

implicit none

interface get_grid
   module procedure atlas_get_global_grid
   module procedure atlas_get_regional_grid
end interface
interface field_to_array
   #:for dtype in dtypes_irl
      module procedure atlas_field_to_array_${dtype}$
   #:endfor
end interface
interface field_from_array
    #:for dtype in dtypes_ir
      module procedure atlas_field_from_array_${dtype}$
    #:endfor
end interface
interface get_atlas_functionspace_size
   module procedure atlas_get_atlas_functionspace_size
end interface
interface get_atlas_field_size
   module procedure atlas_get_atlas_field_size
end interface

private
public :: get_grid
public :: field_to_array,field_from_array,get_atlas_functionspace_size,get_atlas_field_size

contains

!----------------------------------------------------------------------
! Subroutine: atlas_get_global_grid
!> Define global ATLAS grid (reduced Gaussian) from minimum number of points
!----------------------------------------------------------------------
subroutine atlas_get_global_grid(mpl,nmin,agrid,n)

implicit none

! Passed variables
type(mpl_type),intent(inout) :: mpl               !< MPI data
integer,intent(in) :: nmin                        !< Minimum number of points
type(atlas_structuredgrid),intent(inout) :: agrid !< ATLAS grid
integer,intent(out),optional :: n                 !< Grid size

! Local variables
integer :: trunc
character(len=6) :: gridid

! Set name
@:set_name(atlas_get_global_grid)

! Probe in
@:probe_in()

! Check number of points
if (nmin<3) call mpl%abort('${subr}$','minimum number of points is too small')

! Get truncation
trunc = int(-4.5_kind_real+sqrt(20.25_kind_real+quarter*real(nmin,kind_real)))+1

! Define ID
write(gridid,'(a,i5.5)') 'O',trunc

! Define grid
agrid = atlas_structuredgrid(gridid)

! Define number of points
if (present(n)) n = 4*trunc**2+36*trunc

! Probe out
@:probe_out()

end subroutine atlas_get_global_grid

!----------------------------------------------------------------------
! Subroutine: atlas_get_regional_grid
!> Define regional ATLAS grid from minimum number of points
!----------------------------------------------------------------------
subroutine atlas_get_regional_grid(mpl,nmin,lon_min,lon_max,lat_min,lat_max,agrid,n)

implicit none

! Passed variables
type(mpl_type),intent(inout) :: mpl               !< MPI data
integer,intent(in) :: nmin                        !< Minimum number of points
real(kind_real),intent(in) :: lon_min             !< Minimum longitude
real(kind_real),intent(in) :: lon_max             !< Maximum longitude
real(kind_real),intent(in) :: lat_min             !< Minimum latitude
real(kind_real),intent(in) :: lat_max             !< Maximum latitude
type(atlas_structuredgrid),intent(inout) :: agrid !< ATLAS grid
integer,intent(out),optional :: n                 !< Grid size

! Local variables
integer :: nx,ny
real(kind_real) :: lat_mid,dx,dy,alpha

! Set name
@:set_name(atlas_get_global_grid)

! Probe in
@:probe_in()

! Check number of points
if (nmin<3) call mpl%abort('${subr}$','minimum number of points is too small')

! Shape ratio
lat_mid = half*(lat_min+lat_max)
call sphere_dist(lon_min,lat_mid,lon_max,lat_mid,dx)
call sphere_dist(zero,lat_min,zero,lat_max,dy)
alpha = dy/dx
nx = ceiling(sqrt(real(nmin,kind_real)/alpha))
ny = ceiling(alpha*real(nx,kind_real))

! Regional grid
agrid = atlas_regionalgrid(nx,ny,lat_max*rad2deg,lon_min*rad2deg,lat_min*rad2deg,lon_max*rad2deg)

! Define number of points
if (present(n)) n = nx*ny

! Probe out
@:probe_out()

end subroutine atlas_get_regional_grid

 #:for dtype in dtypes_ir
!----------------------------------------------------------------------
! Subroutine: atlas_field_to_array_${dtype}$
!> Convert ATLAS field to field
!----------------------------------------------------------------------
subroutine atlas_field_to_array_${dtype}$(afield,mpl,array,lev2d)

implicit none

! Passed variables
type(atlas_field),intent(in) :: afield        !< ATLAS field
type(mpl_type),intent(inout) :: mpl           !< MPI data
${ftype[dtype]}$,intent(out) :: array(:,:)    !< Array
character(len=*),intent(in),optional :: lev2d !< Level for 2D variables

! Local variables
integer :: nmga,nnodes,nl0,nl2d,il0
${ftype[dtype]}$,pointer :: ptr(:,:)
character(len=1024) :: llev2d

! Set name
@:set_name(atlas_field_to_array_${dtype}$)

! Probe in
@:probe_in()

! Local lev2d
llev2d = 'first'
if (present(lev2d)) llev2d = lev2d
if (.not.((trim(llev2d)=='first').or.(trim(llev2d)=='last'))) call mpl%abort('${subr}$','wrong lev2d')

! Check kind
if (afield%kind()/=${atlas_kind[dtype]}$) call mpl%abort('${subr}$','wrong kind for field '//afield%name())

! Get ATLAS field size
nmga = get_atlas_field_size(mpl,afield)

! Get number of nodes and number of levels
nnodes = size(array,1)
nl0 = size(array,2)

! Check number of nodes
if (nmga/=nnodes) call mpl%abort('${subr}$','wrong number of nodes for field '//afield%name())

! Initialization
array = ${zero[dtype]}$

! Copy data
! For the 2D case (afield%levels()==1), the field is copied:
! - at the first level of array if (lev2d=='first')
! - at the last level of array if (lev2d=='last')
call afield%data(ptr)
if (afield%levels()==1) then
   if (trim(llev2d)=='first') then
      nl2d = 1
   elseif (trim(llev2d)=='last') then
      nl2d = nl0
   end if
   if (nmga>0) array(:,nl2d) = ptr(1,1:nmga)
else
   if (nl0>afield%levels()) call mpl%abort('${subr}$','not enough levels in ATLAS field')
   if (nmga>0) then
      do il0=1,nl0
         array(:,il0) = ptr(il0,1:nmga)
      end do
   end if
end if

! Probe out
@:probe_out()

end subroutine atlas_field_to_array_${dtype}$
#:endfor

!----------------------------------------------------------------------
! Subroutine: atlas_field_to_array_logical
!> Convert ATLAS field to field
!----------------------------------------------------------------------
subroutine atlas_field_to_array_logical(afield,mpl,array,lev2d)

implicit none

! Passed variables
type(atlas_field),intent(in) :: afield        !< ATLAS field
type(mpl_type),intent(inout) :: mpl           !< MPI data
logical,intent(out) :: array(:,:)             !< Array
character(len=*),intent(in),optional :: lev2d !< Level for 2D variables

! Local variables
integer,allocatable :: array_int(:,:)
character(len=1024) :: llev2d

! Set name
@:set_name(atlas_field_to_array_logical)

! Probe in
@:probe_in()

! Local lev2d
llev2d = 'first'
if (present(lev2d)) llev2d = lev2d
if (.not.((trim(llev2d)=='first').or.(trim(llev2d)=='last'))) call mpl%abort('${subr}$','wrong lev2d')

! Allocation
allocate(array_int(size(array,1),size(array,2)))

! Get integer array
call field_to_array(afield,mpl,array_int,lev2d)

! Convert integer to logical
call convert_i2l(mpl,array_int,array)

! Release memory
deallocate(array_int)

! Probe out
@:probe_out()

end subroutine atlas_field_to_array_logical

#:for dtype in dtypes_ir
!----------------------------------------------------------------------
! Subroutine: atlas_field_from_array_${dtype}$
!> Convert field to ATLAS field
!----------------------------------------------------------------------
subroutine atlas_field_from_array_${dtype}$(afield,mpl,array,lev2d)

implicit none

! Passed variables
type(atlas_field),intent(inout) :: afield     !< ATLAS field
type(mpl_type),intent(inout) :: mpl           !< MPI data
${ftype[dtype]}$,intent(in) :: array(:,:)     !< Array
character(len=*),intent(in),optional :: lev2d !< Level for 2D variables

! Local variables
integer :: nmga,nnodes,nl0,nl2d,il0
${ftype[dtype]}$,pointer :: ptr(:,:)
character(len=1024) :: llev2d

! Set name
@:set_name(atlas_field_from_array_${dtype}$)

! Probe in
@:probe_in()

! Local lev2d
llev2d = 'first'
if (present(lev2d)) llev2d = lev2d
if (.not.((trim(llev2d)=='first').or.(trim(llev2d)=='last'))) call mpl%abort('${subr}$','wrong lev2d')

! Check kind
if (afield%kind()/=${atlas_kind[dtype]}$) call mpl%abort('${subr}$','wrong kind for field '//afield%name())

! Get ATLAS field size
nmga = get_atlas_field_size(mpl,afield)

! Get number of nodes and number of levels
nnodes = size(array,1)
nl0 = size(array,2)

! Check number of nodes
if (nmga/=nnodes) call mpl%abort('${subr}$','wrong number of nodes for field '//afield%name())

! Copy data
! For the 2D case (afield%levels()==1), the field is copied:
! - at the first level of array if (lev2d=='first')
! - at the last level of array if (lev2d=='last')
call afield%data(ptr)
ptr(:,:) = ${zero[dtype]}$
if (afield%levels()==1) then
   if (trim(llev2d)=='first') then
      nl2d = 1
   elseif (trim(llev2d)=='last') then
      nl2d = nl0
   end if
   if (nmga>0) ptr(1,1:nmga) = array(:,nl2d)
else
   if (nl0>afield%levels()) call mpl%abort('${subr}$','not enough levels in ATLAS field')
   if (nmga>0) then
      do il0=1,nl0
         ptr(il0,1:nmga) = array(:,il0)
      end do
   end if
end if

! Probe out
@:probe_out()

end subroutine atlas_field_from_array_${dtype}$
#:endfor

!----------------------------------------------------------------------
! Function: atlas_get_atlas_functionspace_size
!> Get the local horizontal size of an ATLAS function space
!----------------------------------------------------------------------
function atlas_get_atlas_functionspace_size(mpl,afunctionspace) result(nmga)

implicit none

! Passed variables
type(mpl_type),intent(inout) :: mpl                    !< MPI data
type(atlas_functionspace),intent(in) :: afunctionspace !< ATLAS function space

! Returned variable
integer :: nmga

! Local variables
type(atlas_functionspace_nodecolumns) :: afunctionspace_nc
type(atlas_functionspace_pointcloud) :: afunctionspace_pc
type(atlas_functionspace_structuredcolumns) :: afunctionspace_sc

! Set name
@:set_name(atlas_get_atlas_functionspace_size)

! Probe in
@:probe_in()

select case (afunctionspace%name())
case ('NodeColumns')
   ! Get NodeColumns function space
   afunctionspace_nc = afunctionspace

   ! Get number of nodes
   nmga = afunctionspace_nc%nb_nodes()
case ('PointCloud')
   ! Get PointCloud function space
   afunctionspace_pc = afunctionspace

   ! Get number of points
   nmga = afunctionspace_pc%size()
case ('StructuredColumns')
   ! Get StructuredColumns function space
   afunctionspace_sc = afunctionspace

   ! Get number of nodes
   nmga = afunctionspace_sc%size()
case default
   call mpl%abort('${subr}$','wrong function space '//afunctionspace%name())
end select

! Probe out
@:probe_out()

end function atlas_get_atlas_functionspace_size

!----------------------------------------------------------------------
! Function: atlas_get_atlas_field_size
!> Get the local horizontal size of an ATLAS field
!----------------------------------------------------------------------
function atlas_get_atlas_field_size(mpl,afield) result(nmga)

implicit none

! Passed variables
type(mpl_type),intent(inout) :: mpl    !< MPI data
type(atlas_field),intent(in) :: afield !< ATLAS field

! Returned variable
integer :: nmga

! Local variables
type(atlas_functionspace) :: afunctionspace

! Set name
@:set_name(atlas_get_atlas_field_size)

! Probe in
@:probe_in()

! Get generic function space
afunctionspace = afield%functionspace()

! Get function space size
nmga = get_atlas_functionspace_size(mpl,afunctionspace)

! Probe out
@:probe_out()

end function atlas_get_atlas_field_size

end module tools_atlas
