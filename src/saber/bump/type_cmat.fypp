#:include '../instrumentation.fypp'
!----------------------------------------------------------------------
! Module: type_cmat
!> C matrix derived type
! Author: Benjamin Menetrier
! Licensing: this code is distributed under the CeCILL-C license
! Copyright 2015-... UCAR, CERFACS, METEO-FRANCE and IRIT
!----------------------------------------------------------------------
module type_cmat

use fckit_mpi_module, only: fckit_mpi_sum
use tools_const, only: zero,one,rad2deg,reqkm,req
use tools_fit, only: tensor_d2r
use tools_func, only: convert_l2i,convert_i2l,zss_sum
use tools_kinds, only: kind_real,huge_real
use tools_netcdf, only: create_file,open_file,define_grp,inquire_grp,put_att,get_att,define_dim,inquire_var,define_var,close_file
use type_bpar, only: bpar_type
use type_cmat_blk, only: cmat_blk_type
use type_diag, only: diag_type
use type_geom, only: geom_type
use type_hdiag, only: hdiag_type
use type_mom, only: mom_type
use type_mpl, only: mpl_type
use type_nam, only: nam_type
@:use_probe()
use type_rng, only: rng_type
use type_samp, only: samp_type

implicit none

! C matrix derived type
type cmat_type
   character(len=1024) :: prefix             !< Prefix
   type(cmat_blk_type),allocatable :: blk(:) !< C matrix blocks
   logical :: allocated                      !< Allocation flag
contains
   procedure :: alloc => cmat_alloc
   procedure :: init => cmat_init
   procedure :: partial_dealloc => cmat_partial_dealloc
   procedure :: dealloc => cmat_dealloc
   procedure :: from_hdiag => cmat_from_hdiag
   procedure :: from_nam => cmat_from_nam
   procedure :: from_bump => cmat_from_bump
   procedure :: setup_sampling => cmat_setup_sampling
end type cmat_type

private
public :: cmat_type

contains

!----------------------------------------------------------------------
! Subroutine: cmat_alloc
!> C matrix allocation
!----------------------------------------------------------------------
subroutine cmat_alloc(cmat,geom,bpar,anisotropic)

implicit none

! Passed variables
class(cmat_type),intent(inout) :: cmat               !< C matrix
type(geom_type),intent(in) :: geom                   !< Geometry
type(bpar_type),intent(in) :: bpar                   !< Block parameters
logical,intent(in),optional :: anisotropic(bpar%nbe) !< Anisotropic flag

! Local variables
integer :: ib

! Set name
@:set_name(cmat_alloc)

! Probe in
@:probe_in()

! Allocation
if (.not.allocated(cmat%blk)) allocate(cmat%blk(bpar%nbe))
do ib=1,bpar%nbe
   if (bpar%B_block(ib).and.bpar%fit_block(ib)) then
      ! Anisotropy flag
      cmat%blk(ib)%ib = ib
      cmat%blk(ib)%anisotropic = (bpar%nc4(ib)>1)
      if (present(anisotropic)) cmat%blk(ib)%anisotropic = anisotropic(ib)
      call cmat%blk(ib)%alloc(geom,bpar)
   end if
end do

! Update allocation flag
cmat%allocated = .true.

! Probe out
@:probe_out()

end subroutine cmat_alloc

!----------------------------------------------------------------------
! Subroutine: cmat_init
!> C matrix initialization
!----------------------------------------------------------------------
subroutine cmat_init(cmat,mpl,bpar)

implicit none

! Passed variables
class(cmat_type),intent(inout) :: cmat !< C matrix
type(mpl_type),intent(inout) :: mpl    !< MPI data
type(bpar_type),intent(in) :: bpar     !< Block parameters

! Local variables
integer :: ib

! Set name
@:set_name(cmat_init)

! Probe in
@:probe_in()

! Initialize blocks
do ib=1,bpar%nbe
   if (bpar%B_block(ib).and.bpar%fit_block(ib)) call cmat%blk(ib)%init(mpl,bpar)
end do

! Probe out
@:probe_out()

end subroutine cmat_init

!----------------------------------------------------------------------
! Subroutine: cmat_partial_dealloc
!> Release memory (partial)
!----------------------------------------------------------------------
subroutine cmat_partial_dealloc(cmat)

implicit none

! Passed variables
class(cmat_type),intent(inout) :: cmat !< C matrix

! Local variables
integer :: ib

! Set name
@:set_name(cmat_partial_dealloc)

! Probe in
@:probe_in()

! Release memory
if (allocated(cmat%blk)) then
   do ib=1,size(cmat%blk)
      call cmat%blk(ib)%partial_dealloc
   end do
end if

! Update allocation flag
cmat%allocated = .false.

! Probe out
@:probe_out()

end subroutine cmat_partial_dealloc

!----------------------------------------------------------------------
! Subroutine: cmat_dealloc
!> Release memory
!----------------------------------------------------------------------
subroutine cmat_dealloc(cmat)

implicit none

! Passed variables
class(cmat_type),intent(inout) :: cmat !< C matrix

! Local variables
integer :: ib

! Set name
@:set_name(cmat_dealloc)

! Probe in
@:probe_in()

! Release memory
if (allocated(cmat%blk)) then
   do ib=1,size(cmat%blk)
      call cmat%blk(ib)%dealloc
   end do
   deallocate(cmat%blk)
end if

! Update allocation flag
cmat%allocated = .false.

! Probe out
@:probe_out()

end subroutine cmat_dealloc

!----------------------------------------------------------------------
! Subroutine: cmat_from_hdiag
!> Import HDIAG into C matrix
!----------------------------------------------------------------------
subroutine cmat_from_hdiag(cmat,mpl,nam,geom,bpar,hdiag)

implicit none

! Passed variables
class(cmat_type),intent(inout) :: cmat !< C matrix
type(mpl_type),intent(inout) :: mpl    !< MPI data
type(nam_type),intent(in) :: nam       !< Namelist
type(geom_type),intent(in) :: geom     !< Geometry
type(bpar_type),intent(in) :: bpar     !< Block parameters
type(hdiag_type),intent(in) :: hdiag   !< Hybrid diagnostics

! Local variables
integer :: ib

! Set name
@:set_name(cmat_from_hdiag)

! Probe in
@:probe_in()

if (.not.cmat%allocated) then
   ! Allocation
   call cmat%alloc(geom,bpar)

   ! Initialization
   call cmat%init(mpl,bpar)
end if

! Convolution parameters
do ib=1,bpar%nbe
   if (bpar%B_block(ib)) then
      if (bpar%fit_block(ib)) then
         ! Copy fields
         select case (trim(nam%method))
         case ('cor')
            cmat%blk(ib)%coef_ens = one
            cmat%blk(ib)%coef_sta = zero
            cmat%blk(ib)%rh = hdiag%cor1%blk(0,ib)%rh_c0a
            if (bpar%nc4(ib)>1) then
               cmat%blk(ib)%D11 = hdiag%cor1%blk(0,ib)%D11_c0a
               cmat%blk(ib)%D22 = hdiag%cor1%blk(0,ib)%D22_c0a
               cmat%blk(ib)%D12 = hdiag%cor1%blk(0,ib)%D12_c0a
            end if
            cmat%blk(ib)%rv = hdiag%cor1%blk(0,ib)%rv_c0a
            cmat%blk(ib)%ncmp = hdiag%cor1%blk(0,ib)%ncmp
         case ('loc')
            if (nam%nonunit_diag) then
               cmat%blk(ib)%coef_ens = hdiag%loc1%blk(0,ib)%coef_ens_c0a
            else
               cmat%blk(ib)%coef_ens = one
            end if
            cmat%blk(ib)%coef_sta = zero
            cmat%blk(ib)%rh = hdiag%loc1%blk(0,ib)%rh_c0a
            if (bpar%nc4(ib)>1) then
               cmat%blk(ib)%D11 = hdiag%loc1%blk(0,ib)%D11_c0a
               cmat%blk(ib)%D22 = hdiag%loc1%blk(0,ib)%D22_c0a
               cmat%blk(ib)%D12 = hdiag%loc1%blk(0,ib)%D12_c0a
            end if
            cmat%blk(ib)%rv = hdiag%loc1%blk(0,ib)%rv_c0a
            cmat%blk(ib)%ncmp = hdiag%loc1%blk(0,ib)%ncmp
         case ('hyb-avg','hyb-rnd')
            if (nam%nonunit_diag) then
               cmat%blk(ib)%coef_ens = hdiag%loc2%blk(0,ib)%coef_ens_c0a
            else
               cmat%blk(ib)%coef_ens = one
            end if
            cmat%blk(ib)%coef_sta = hdiag%loc2%blk(0,ib)%coef_sta_c0a
            cmat%blk(ib)%rh = hdiag%loc2%blk(0,ib)%rh_c0a
            if (bpar%nc4(ib)>1) then
               cmat%blk(ib)%D11 = hdiag%loc2%blk(0,ib)%D11_c0a
               cmat%blk(ib)%D22 = hdiag%loc2%blk(0,ib)%D22_c0a
               cmat%blk(ib)%D12 = hdiag%loc2%blk(0,ib)%D12_c0a
            end if
            cmat%blk(ib)%rv = hdiag%loc2%blk(0,ib)%rv_c0a
            cmat%blk(ib)%ncmp = hdiag%loc2%blk(0,ib)%ncmp
         case ('dual-ens')
            call mpl%abort('${subr}$','dual-ens not ready yet for C matrix')
         case default
            call mpl%abort('${subr}$','cmat not implemented yet for this method')
         end select
      end if

      ! Copy weight
      select case (trim(nam%method))
      case ('cor')
         cmat%blk(ib)%wgt = one
      case ('loc')
         cmat%blk(ib)%wgt = sum(hdiag%loc1%blk(0,ib)%coef_ens_l0)/real(geom%nl0,kind_real)
      case ('hyb-avg','hyb-rnd')
         cmat%blk(ib)%wgt = sum(hdiag%loc2%blk(0,ib)%coef_ens_l0)/real(geom%nl0,kind_real)
      case ('dual-ens')
         call mpl%abort('${subr}$','dual-ens not ready yet for C matrix')
      case default
         call mpl%abort('${subr}$','cmat not implemented yet for this method')
      end select
   end if
end do

! Probe out
@:probe_out()

end subroutine cmat_from_hdiag

!----------------------------------------------------------------------
! Subroutine: cmat_from_nam
!> Import radii into C matrix
!----------------------------------------------------------------------
subroutine cmat_from_nam(cmat,mpl,nam,geom,bpar)

implicit none

! Passed variables
class(cmat_type),intent(inout) :: cmat !< C matrix
type(mpl_type),intent(inout) :: mpl    !< MPI data
type(nam_type),intent(in) :: nam       !< Namelist
type(geom_type),intent(in) :: geom     !< Geometry
type(bpar_type),intent(in) :: bpar     !< Block parameters

! Local variables
integer :: ib,iv,il0

! Set name
@:set_name(cmat_from_nam)

! Probe in
@:probe_in()

write(mpl%info,'(a)') '-------------------------------------------------------------------'
call mpl%flush
write(mpl%info,'(a)') '--- Copy namelist radii into C matrix'
call mpl%flush

if (.not.cmat%allocated) then
   ! Allocation
   call cmat%alloc(geom,bpar)

   ! Initialization
   call cmat%init(mpl,bpar)
end if

! Convolution parameters
do iv=0,nam%nv
   ib = bpar%v_to_b(iv)
   if (ib>0) then
      if (bpar%B_block(ib).and.bpar%nicas_block(ib)) then
         ! Copy support radii and number of components
         do il0=1,geom%nl0
            cmat%blk(ib)%rh(:,il0) = nam%rh(il0,iv)
            cmat%blk(ib)%rv(:,il0) = nam%rv(il0,iv)
         end do
         cmat%blk(ib)%ncmp = nam%ncmp(iv)

         ! Set coefficients
         cmat%blk(ib)%coef_ens = one
         cmat%blk(ib)%coef_sta = zero
         cmat%blk(ib)%wgt = one
      end if
   end if
end do

! Probe out
@:probe_out()

end subroutine cmat_from_nam

!----------------------------------------------------------------------
! Subroutine: cmat_from_bump
!> Import C matrix from BUMP
!----------------------------------------------------------------------
subroutine cmat_from_bump(cmat,mpl,geom,bpar)

implicit none

! Passed variables
class(cmat_type),intent(inout) :: cmat !< C matrix
type(mpl_type),intent(inout) :: mpl    !< MPI data
type(geom_type),intent(in) :: geom     !< Geometry
type(bpar_type),intent(in) :: bpar     !< Block parameters

! Local variables
integer :: ib,ic0a,il0
logical :: anisotropic(bpar%nbe),from_bump(bpar%nbe)

! Set name
@:set_name(cmat_from_bump)

! Probe in
@:probe_in()

! Check BUMP import
do ib=1,bpar%nbe
   ! Initialization
   anisotropic(ib) = .false.
   from_bump(ib) = .false.

   if (bpar%B_block(ib).and.bpar%nicas_block(ib)) then
      ! Anisotropic
      anisotropic(ib) = (allocated(cmat%blk(ib)%bump_D11).and.allocated(cmat%blk(ib)%bump_D22).and.allocated(cmat%blk(ib)%bump_D12))

      ! Define import configuration
      from_bump(ib) = .true.
      from_bump(ib) = from_bump(ib).and.(allocated(cmat%blk(ib)%bump_rh).or.anisotropic(ib))
      from_bump(ib) = from_bump(ib).and.allocated(cmat%blk(ib)%bump_rv)
   end if
end do

if (.not.cmat%allocated) then
   ! Allocation
   call cmat%alloc(geom,bpar,anisotropic)

   ! Initialization
   call cmat%init(mpl,bpar)
end if

do ib=1,bpar%nbe
   if (bpar%B_block(ib).and.bpar%nicas_block(ib)) then
      if (from_bump(ib)) then
         write(mpl%info,'(a7,a,a)') '','Block ',trim(bpar%blockname(ib))
         call mpl%flush

         ! Copy values
         if (from_bump(ib)) then
            write(mpl%info,'(a10,a)') '','BUMP import:'
            call mpl%flush

            ! Coefficient and weight
            if (allocated(cmat%blk(ib)%bump_coef_ens)) then
               cmat%blk(ib)%coef_ens = cmat%blk(ib)%bump_coef_ens
            else
               cmat%blk(ib)%coef_ens = one
            end if
            cmat%blk(ib)%wgt = zss_sum(cmat%blk(ib)%coef_ens,mask=geom%gmask_c0a)
            call mpl%f_comm%allreduce(cmat%blk(ib)%wgt,fckit_mpi_sum())
            cmat%blk(ib)%wgt = cmat%blk(ib)%wgt/real(sum(geom%nc0_gmask(1:geom%nl0)),kind_real)

            ! Horizontal
            if (cmat%blk(ib)%anisotropic) then
               cmat%blk(ib)%D11 = cmat%blk(ib)%bump_D11
               cmat%blk(ib)%D22 = cmat%blk(ib)%bump_D22
               cmat%blk(ib)%D12 = cmat%blk(ib)%bump_D12
               do il0=1,geom%nl0
                  do ic0a=1,geom%nc0a
                     call tensor_d2r(mpl,cmat%blk(ib)%D11(ic0a,il0),cmat%blk(ib)%D22(ic0a,il0),cmat%blk(ib)%D12(ic0a,il0), &
 & cmat%blk(ib)%rh(ic0a,il0))
                  end do
               end do
            else
               cmat%blk(ib)%rh = cmat%blk(ib)%bump_rh
            end if

            ! Vertical
            cmat%blk(ib)%rv = cmat%blk(ib)%bump_rv

            ! Number of components
            cmat%blk(ib)%ncmp = cmat%blk(ib)%bump_ncmp
         end if
      end if
   end if

   ! Release memory (partial)
   call cmat%blk(ib)%partial_bump_dealloc
end do

! Probe out
@:probe_out()

end subroutine cmat_from_bump

!----------------------------------------------------------------------
! Subroutine: cmat_setup_sampling
!> Setup C matrix sampling
!----------------------------------------------------------------------
subroutine cmat_setup_sampling(cmat,mpl,nam,geom,bpar)

implicit none

! Passed variables
class(cmat_type),intent(inout) :: cmat !< C matrix
type(mpl_type),intent(inout) :: mpl    !< MPI data
type(nam_type),intent(in) :: nam       !< Namelist
type(geom_type),intent(in) :: geom     !< Geometry
type(bpar_type),intent(in) :: bpar     !< Block parameters

! Local variables
integer :: ib,il0,ic0a,il0i
real(kind_real) :: rhs,rvs
real(kind_real),allocatable :: rh_c0a(:)

! Set name
@:set_name(cmat_setup_sampling)

! Probe in
@:probe_in()

! Sampling parameters
if (trim(nam%strategy)=='specific_multivariate') then
   do il0=1,geom%nl0
      do ic0a=1,geom%nc0a
         ! Get minimum
         rhs = huge_real
         rvs = huge_real
         do ib=1,bpar%nb
            if (bpar%B_block(ib).and.bpar%nicas_block(ib)) then
               rhs = min(rhs,cmat%blk(ib)%rh(ic0a,il0))
               rvs = min(rvs,cmat%blk(ib)%rv(ic0a,il0))
            end if
         end do

         ! Copy minimum
         do ib=1,bpar%nb
            if (bpar%B_block(ib).and.bpar%nicas_block(ib)) then
               cmat%blk(ib)%rhs(ic0a,il0) = rhs
               cmat%blk(ib)%rvs(ic0a,il0) = rvs
            end if
         end do
      end do
   end do
else
   ! Copy
   do ib=1,bpar%nbe
      if (bpar%B_block(ib).and.bpar%nicas_block(ib)) then
         cmat%blk(ib)%rhs = cmat%blk(ib)%rh
         cmat%blk(ib)%rvs = cmat%blk(ib)%rv
      end if
   end do
end if

select case (trim(nam%diag_draw_type))
case ('random_coast')
   ! More points around coasts
   if (geom%nc0a>0) then
      if (all(geom%gmask_c0a)) call mpl%abort('${subr}$','random_coast is not relevant if there is no coast')
   end if

   ! Allocation
   allocate(rh_c0a(geom%nc0a))

   do il0=1,geom%nl0
      ! Define modulation factor
      il0i = geom%l0_to_l0i(il0)
      do ic0a=1,geom%nc0a
         if (geom%gmask_c0a(ic0a,il0)) then
            rh_c0a(ic0a) = exp(-geom%mdist_c0a(ic0a,il0i)/nam%Lcoast)
         else
            rh_c0a(ic0a) = one
         end if
      end do
      rh_c0a = nam%rcoast+(one-nam%rcoast)*(one-rh_c0a)

      ! Apply modulation factor
      do ic0a=1,geom%nc0a
         if (geom%gmask_c0a(ic0a,il0)) then
            do ib=1,bpar%nb
               if (bpar%B_block(ib).and.bpar%nicas_block(ib)) then
                  cmat%blk(ib)%rhs(ic0a,il0) = cmat%blk(ib)%rhs(ic0a,il0)*rh_c0a(ic0a)
               end if
            end do
         end if
      end do
   end do

   ! Release memory
   deallocate(rh_c0a)
end select

! Probe out
@:probe_out()

end subroutine cmat_setup_sampling

end module type_cmat
