#:include '../instrumentation.fypp'
!----------------------------------------------------------------------
! Module: type_hdiag
!> Hybrid diagnostics derived type
! Author: Benjamin Menetrier
! Licensing: this code is distributed under the CeCILL-C license
! Copyright 2015-... UCAR, CERFACS, METEO-FRANCE and IRIT
!----------------------------------------------------------------------
module type_hdiag

use tools_const, only: zero,rad2deg
use tools_kinds, only: kind_real
use tools_netcdf, only: create_file,define_grp,define_dim,define_var,put_var,close_file
use type_avg, only: avg_type
use type_bpar, only: bpar_type
use type_diag, only: diag_type
use type_ens, only: ens_type
use type_geom, only: geom_type
use type_mom, only: mom_type
use type_mpl, only: mpl_type
use type_nam, only: nam_type
@:use_probe()
use type_rng, only: rng_type
use type_samp, only: samp_type

implicit none

! Hybrid diagnostics derived type
type hdiag_type
   type(avg_type) :: avg1   !< Averaged statistics, first ensemble
   type(avg_type) :: avg2   !< Averaged statistics, second ensemble
   type(avg_type) :: avg_wgt !< Averaged statistics weights
   type(diag_type) :: cov1  !< Covariance, first ensemble
   type(diag_type) :: cov2  !< Covariance, second ensemble
   type(diag_type) :: cor1  !< Correlation, first ensemble
   type(diag_type) :: cor2  !< Correlation, second ensemble
   type(diag_type) :: loc1  !< Localization, first ensemble
   type(diag_type) :: loc2  !< Localization, second ensemble
   type(diag_type) :: loc3  !< Localization, low-resolution ensemble
contains
   procedure :: partial_dealloc => hdiag_partial_dealloc
   procedure :: dealloc => hdiag_dealloc
   procedure :: write => hdiag_write
   procedure :: run_hdiag => hdiag_run_hdiag
end type hdiag_type

private
public :: hdiag_type

contains

!----------------------------------------------------------------------
! Subroutine: hdiag_partial_dealloc
!> Release memory (partial)
!----------------------------------------------------------------------
subroutine hdiag_partial_dealloc(hdiag)

implicit none

! Passed variables
class(hdiag_type),intent(inout) :: hdiag !< Hybrid diagnostics

! Set name
@:set_name(hdiag_partial_dealloc)

! Probe in
@:probe_in()

! Release memory
call hdiag%avg1%dealloc
call hdiag%avg2%dealloc
call hdiag%avg_wgt%dealloc
call hdiag%cov1%partial_dealloc
call hdiag%cov2%partial_dealloc
call hdiag%cor1%partial_dealloc
call hdiag%cor2%partial_dealloc
call hdiag%loc1%partial_dealloc
call hdiag%loc2%partial_dealloc
call hdiag%loc3%partial_dealloc

! Probe out
@:probe_out()

end subroutine hdiag_partial_dealloc

!----------------------------------------------------------------------
! Subroutine: hdiag_dealloc
!> Release memory
!----------------------------------------------------------------------
subroutine hdiag_dealloc(hdiag)

implicit none

! Passed variables
class(hdiag_type),intent(inout) :: hdiag !< Hybrid diagnostics

! Set name
@:set_name(hdiag_dealloc)

! Probe in
@:probe_in()

! Release memory
call hdiag%avg1%dealloc
call hdiag%avg2%dealloc
call hdiag%avg_wgt%dealloc
call hdiag%cov1%dealloc
call hdiag%cov2%dealloc
call hdiag%cor1%dealloc
call hdiag%cor2%dealloc
call hdiag%loc1%dealloc
call hdiag%loc2%dealloc
call hdiag%loc3%dealloc

! Probe out
@:probe_out()

end subroutine hdiag_dealloc

!----------------------------------------------------------------------
! Subroutine: hdiag_write
!> Write diagnostics
!----------------------------------------------------------------------
subroutine hdiag_write(hdiag,mpl,nam,geom,bpar,samp,mom1)

implicit none

! Passed variables
class(hdiag_type),intent(inout) :: hdiag !< Hybrid diagnostics
type(mpl_type),intent(inout) :: mpl      !< MPI data
type(nam_type),intent(inout) :: nam      !< Namelist
type(geom_type),intent(in) :: geom       !< Geometry
type(bpar_type),intent(in) :: bpar       !< Block parameters
type(samp_type),intent(in) :: samp       !< Sampling
type(mom_type),intent(in) :: mom1        !< Moments, first ensemble

! Local variables
integer :: ncid,grpid,nc3_id,nc4_id,nl0r_id,nl0_1_id,nl0_2_id,disth_id,as_id,vunit_id,nc0_id,nl0_id,lon_id,lat_id
integer :: fld_id(nam%nv),ens_id(nam%nv),cor_id(nam%nv)
integer :: ildwv,ic2a,ib,iv
character(len=1024) :: filename,grpname

! Set name
@:set_name(hdiag_write)

! Probe in
@:probe_in()

do ildwv=0,nam%nldwv
   ! Initialization
   if (ildwv==0) then
      ic2a = mpl%msv%vali
      if (mpl%main) ic2a = 0
      filename = trim(nam%prefix)//'_diag'
   else
      ic2a = samp%ldwv_to_c2a(ildwv)
      filename = trim(nam%prefix)//'_diag_'//trim(nam%name_ldwv(ildwv))
   end if

   if (mpl%msv%isnot(ic2a)) then
      ! Open file
      ncid = create_file(mpl,filename,0)

      do ib=1,bpar%nbe
         if (bpar%diag_block(ib)) then
            ! Get group name
            call nam%io_key_value(bpar%blockname(ib),grpname)

            ! Define group
            grpid = define_grp(mpl,ncid,grpname)

            ! Define dimensions
            nc3_id = define_dim(mpl,grpid,'nc3',bpar%nc3(ib))
            nc4_id = define_dim(mpl,grpid,'nc4',bpar%nc4(ib))
            nl0r_id = define_dim(mpl,grpid,'nl0r',bpar%nl0r(ib))
            nl0_1_id = define_dim(mpl,grpid,'nl0_1',geom%nl0)
            nl0_2_id = define_dim(mpl,grpid,'nl0_2',geom%nl0)

            ! Define coordinates
            disth_id = define_var(mpl,grpid,'disth','real',(/nc3_id/))
            as_id = define_var(mpl,grpid,'as','real',(/nc4_id/))
            vunit_id = define_var(mpl,grpid,'vunit','real',(/nl0_1_id/))

            ! Write coordinates
            call put_var(mpl,grpid,disth_id,geom%disth(1:bpar%nc3(ib)))
            call put_var(mpl,grpid,as_id,geom%as(1:bpar%nc4(ib)))
            call put_var(mpl,grpid,vunit_id,geom%vunitavg)

            ! Write ensemble 1 correlation
            call hdiag%cor1%blk(ic2a,ib)%write(mpl,geom,bpar,grpid,nc3_id,nc4_id,nl0r_id,nl0_1_id,nl0_2_id)

            select case (trim(nam%method))
            case ('hyb-avg','hyb-rnd','dual-ens')
               ! Write ensemble 2 correlation
               select case (trim(nam%method))
               case ('hyb-avg','hyb-rnd')
                  call hdiag%cor2%blk(ic2a,ib)%write(mpl,geom,bpar,grpid,nc3_id,nc4_id,nl0r_id,nl0_1_id,nl0_2_id)
               case ('dual-ens')
                  call hdiag%cor2%blk(ic2a,ib)%write(mpl,geom,bpar,grpid,nc3_id,nc4_id,nl0r_id,nl0_1_id,nl0_2_id)
               end select
            end select

            select case (trim(nam%method))
            case ('loc','hyb-avg','hyb-rnd','dual-ens')
               ! Write localization
               call hdiag%loc1%blk(ic2a,ib)%write(mpl,geom,bpar,grpid,nc3_id,nc4_id,nl0r_id,nl0_1_id,nl0_2_id)
            end select

            select case (trim(nam%method))
            case ('hyb-avg','hyb-rnd')
               ! Write static hybridization
               call hdiag%loc2%blk(ic2a,ib)%write(mpl,geom,bpar,grpid,nc3_id,nc4_id,nl0r_id,nl0_1_id,nl0_2_id)
            end select

            if (trim(nam%method)=='dual-ens') then
               ! Write dual-ensemble hybridization
               call hdiag%loc2%blk(ic2a,ib)%write(mpl,geom,bpar,grpid,nc3_id,nc4_id,nl0r_id,nl0_1_id,nl0_2_id)
               call hdiag%loc3%blk(ic2a,ib)%write(mpl,geom,bpar,grpid,nc3_id,nc4_id,nl0r_id,nl0_1_id,nl0_2_id)
            end if
         end if
      end do

      ! Compute and write full vertical covariance
      if (trim(nam%strategy)=='diag_all') call hdiag%avg1%full_vertical_covariance(mpl,nam,geom,bpar,ncid)

      ! Close file
      call close_file(mpl,ncid)
   end if
end do

! Write dirac test
if (nam%check_dirac.and.nam%write_c0) then
   ! Open file
   filename = trim(nam%prefix)//'_dirac'
   ncid = create_file(mpl,filename)

   ! Define dimensions
   nc0_id = define_dim(mpl,ncid,'nc0',geom%nc0)
   nl0_id = define_dim(mpl,ncid,'nl0',geom%nl0)

   ! Define variables
   lon_id = define_var(mpl,ncid,'lon','real',(/nc0_id/),unitname='degrees_east')
   lat_id = define_var(mpl,ncid,'lat','real',(/nc0_id/),unitname='degrees_north')
   vunit_id = define_var(mpl,ncid,'vunit','real',(/nc0_id,nl0_id/))
   do iv=1,nam%nv
      ! Define group
      fld_id(iv) = define_grp(mpl,ncid,nam%variables(iv))

      ! Define variable
      ens_id(iv) = define_var(mpl,fld_id(iv),'ens','real',(/nc0_id,nl0_id/))
      cor_id(iv) = define_var(mpl,fld_id(iv),'cor','real',(/nc0_id,nl0_id/))
   end do

   ! Write variables
   call geom%io%fld_write(mpl,ncid,lon_id,geom%lon_c0a*rad2deg)
   call geom%io%fld_write(mpl,ncid,lat_id,geom%lat_c0a*rad2deg)
   call geom%io%fld_write(mpl,ncid,vunit_id,geom%vunit_c0a,geom%gmask_c0a)
   do iv=1,nam%nv
      call geom%io%fld_write(mpl,fld_id(iv),ens_id(iv),mom1%dirac(:,:,iv),geom%gmask_c0a)
      call geom%io%fld_write(mpl,fld_id(iv),cor_id(iv),hdiag%cor1%dirac(:,:,iv),geom%gmask_c0a)
   end do

   ! Close file
   call close_file(mpl,ncid)
end if

! Probe out
@:probe_out()

end subroutine hdiag_write

!----------------------------------------------------------------------
! Subroutine: hdiag_run_hdiag
!> HDIAG driver
!----------------------------------------------------------------------
subroutine hdiag_run_hdiag(hdiag,mpl,nam,geom,bpar,samp,mom1,mom2)

implicit none

! Passed variables
class(hdiag_type),intent(inout) :: hdiag   !< Hybrid diagnostics
type(mpl_type),intent(inout) :: mpl        !< MPI data
type(nam_type),intent(inout) :: nam        !< Namelist
type(geom_type),intent(in) :: geom         !< Geometry
type(bpar_type),intent(in) :: bpar         !< Block parameters
type(samp_type),intent(in) :: samp         !< Sampling
type(mom_type),intent(in) :: mom1          !< Moments, first ensemble
type(mom_type),intent(in),optional :: mom2 !< Moments, second ensemble

! Set name
@:set_name(hdiag_run_hdiag)

! Probe in
@:probe_in()

! Compute statistics
write(mpl%info,'(a)') '-------------------------------------------------------------------'
call mpl%flush
write(mpl%info,'(a)') '--- Compute statistics'
call mpl%flush

! Compute ensemble 1 statistics
write(mpl%info,'(a7,a)') '','Ensemble 1:'
call mpl%flush
call hdiag%avg1%compute(mpl,nam,geom,bpar,samp,mom1,nam%ne,'avg1')

select case(trim(nam%method))
case ('hyb-rnd','dual-ens')
   ! Compute ensemble 2 statistics
   write(mpl%info,'(a7,a)') '','Ensemble 2:'
   call mpl%flush
   call hdiag%avg2%compute(mpl,nam,geom,bpar,samp,mom2,nam%ens2_ne,'avg2')
case ('hyb-avg')
   ! Copy ensemble 1 statistics
   call hdiag%avg2%alloc(nam,geom,bpar,samp,nam%ens2_ne,nam%ens2_nsub,'avg2')
   call hdiag%avg2%copy(hdiag%avg1)
end select

select case (trim(nam%method))
case ('hyb-avg','hyb-rnd','dual-ens')
   ! Compute cross-ensembles statistics
   write(mpl%info,'(a7,a)') '','Cross-ensembles:'
   call mpl%flush
   select case (trim(nam%method))
   case ('hyb-avg','hyb-rnd')
      call hdiag%avg1%compute_hyb(mpl,nam,geom,bpar,samp,hdiag%avg2)
   case ('dual-ens')
      call hdiag%avg1%compute_deh(mpl,nam,geom,bpar,samp,mom1,mom2)
   end select
end select

if ((bpar%nbe>bpar%nb).and.bpar%diag_block(bpar%nbe)) then
   ! Compute block-averaged statistics
   write(mpl%info,'(a)') '-------------------------------------------------------------------'
   call mpl%flush
   write(mpl%info,'(a)') '--- Compute block-averaged statistics'
   call mpl%flush

   ! Copy weight
   write(mpl%info,'(a7,a)') '','Copy weight'
   call mpl%flush
   call hdiag%avg_wgt%copy_wgt(geom,bpar,hdiag%avg1)

   ! Compute ensemble 1 block-averaged statistics
   write(mpl%info,'(a7,a)') '','Ensemble 1:'
   call mpl%flush
   call hdiag%avg1%compute_bwavg(mpl,nam,geom,bpar,samp,hdiag%avg_wgt)

   select case (trim(nam%method))
   case ('hyb-avg','hyb-rnd','dual-ens')
      ! Compute ensemble 2 block-averaged statistics
      write(mpl%info,'(a7,a)') '','Ensemble 2:'
      call mpl%flush
      call hdiag%avg2%compute_bwavg(mpl,nam,geom,bpar,samp,hdiag%avg_wgt)

      ! Compute cross-ensembles block-averaged statistics
      write(mpl%info,'(a7,a)') '','Cross-ensembles:'
      call mpl%flush
      select case (trim(nam%method))
      case ('hyb-avg','hyb-rnd')
         call hdiag%avg1%compute_bwavg_hyb(mpl,nam,geom,bpar,samp,hdiag%avg_wgt)
      case ('dual-ens')
         call hdiag%avg1%compute_bwavg_deh(mpl,nam,geom,bpar,samp,hdiag%avg_wgt)
      end select
   end select
end if

write(mpl%info,'(a)') '-------------------------------------------------------------------'
call mpl%flush
write(mpl%info,'(a)') '--- Compute covariance'
call mpl%flush

! Compute ensemble 1 covariance
write(mpl%info,'(a7,a)') '','Ensemble 1:'
call mpl%flush
call hdiag%cov1%covariance(mpl,nam,geom,bpar,samp,hdiag%avg1,'cov')

select case (trim(nam%method))
case ('hyb-avg','hyb-rnd','dual-ens')
   ! Compute ensemble 2 covariance
   write(mpl%info,'(a7,a)') '','Ensemble 2:'
   call mpl%flush
   select case (trim(nam%method))
   case ('hyb-avg','hyb-rnd')
      call hdiag%cov2%covariance(mpl,nam,geom,bpar,samp,hdiag%avg2,'cov_sta')
   case ('dual-ens')
      call hdiag%cov2%covariance(mpl,nam,geom,bpar,samp,hdiag%avg2,'cov_lr')
   end select
end select

write(mpl%info,'(a)') '-------------------------------------------------------------------'
call mpl%flush
write(mpl%info,'(a)') '--- Compute correlation'
call mpl%flush

! Compute ensemble 1 correlation
write(mpl%info,'(a7,a)') '','Ensemble 1:'
call mpl%flush
call hdiag%cor1%correlation(mpl,nam,geom,bpar,samp,hdiag%avg1,'cor')

select case (trim(nam%method))
case ('hyb-avg','hyb-rnd','dual-ens')
   ! Compute ensemble 2 correlation
   write(mpl%info,'(a7,a)') '','Ensemble 2:'
   call mpl%flush
   select case (trim(nam%method))
   case ('hyb-avg','hyb-rnd')
      call hdiag%cor2%correlation(mpl,nam,geom,bpar,samp,hdiag%avg2,'cor_sta')
   case ('dual-ens')
      call hdiag%cor2%correlation(mpl,nam,geom,bpar,samp,hdiag%avg2,'cor_lr')
   end select
end select

select case (trim(nam%method))
case ('loc','hyb-avg','hyb-rnd','dual-ens')
   ! Compute localization
   write(mpl%info,'(a)') '-------------------------------------------------------------------'
   call mpl%flush
   write(mpl%info,'(a)') '--- Compute localization'
   call mpl%flush
   write(mpl%info,'(a7,a)') '','Ensemble 1:'
   call mpl%flush
   call hdiag%loc1%localization(mpl,nam,geom,bpar,samp,hdiag%avg1,'loc')
end select

select case (trim(nam%method))
case ('hyb-avg','hyb-rnd')
   ! Compute static hybridization
   write(mpl%info,'(a)') '-------------------------------------------------------------------'
   call mpl%flush
   write(mpl%info,'(a)') '--- Compute static hybridization'
   call mpl%flush
   write(mpl%info,'(a7,a)') '','Ensemble 1 and 2:'
   call mpl%flush
   call hdiag%loc2%hybridization(mpl,nam,geom,bpar,samp,hdiag%avg1,'loc_hyb')
end select

if (trim(nam%method)=='dual-ens') then
   ! Compute dual-ensemble hybridization diagnostic and fit
   write(mpl%info,'(a)') '-------------------------------------------------------------------'
   call mpl%flush
   write(mpl%info,'(a)') '--- Compute dual-ensemble hybridization'
   call mpl%flush
   write(mpl%info,'(a7,a)') '','Ensembles 1 and 2:'
   call mpl%flush
   call hdiag%loc2%dualens(mpl,nam,geom,bpar,samp,hdiag%avg1,hdiag%avg2,hdiag%loc3,'loc_deh','loc_deh_lr')
end if

! Write diagnostics
if (nam%write_hdiag) then
   write(mpl%info,'(a)') '-------------------------------------------------------------------'
   call mpl%flush
   write(mpl%info,'(a)') '--- Write diagnostics'
   call mpl%flush
   call hdiag%write(mpl,nam,geom,bpar,samp,mom1)
end if

! Probe out
@:probe_out()

end subroutine hdiag_run_hdiag

end module type_hdiag
