#:include '../instrumentation.fypp'
!----------------------------------------------------------------------
! Module: type_cv
!> Control vector derived type
! Author: Benjamin Menetrier
! Licensing: this code is distributed under the CeCILL-C license
! Copyright 2015-... UCAR, CERFACS, METEO-FRANCE and IRIT
!----------------------------------------------------------------------
module type_cv

use tools_kinds, only: kind_real
use type_cv_blk, only: cv_blk_type
@:use_probe()

implicit none

! Control vector derived type
type cv_type
   integer :: n                            !< Total control variable size
   integer :: nb                           !< Number of blocks
   type(cv_blk_type),allocatable :: blk(:) !< Control variable blocks
   integer,allocatable :: b_to_g(:)        !< CV block to NICAS group
contains
   procedure :: pack => cv_pack
   procedure :: unpack => cv_unpack
end type cv_type

private
public :: cv_type

contains

!----------------------------------------------------------------------
! Subroutine: cv_pack
!> Pack
!----------------------------------------------------------------------
subroutine cv_pack(cv,pcv)

! Passed variables
class(cv_type),intent(in) :: cv          !< Control variable
real(kind_real),intent(out) :: pcv(cv%n) !< Packed control variable

! Local variable
integer :: ib,icmp,offset

! Set name
@:set_name(cv_pack)

! Probe in
@:probe_in()

! Initialization
offset = 0

do ib=1,cv%nb
   do icmp=1,cv%blk(ib)%ncmp
      if (cv%blk(ib)%cmp(icmp)%n>0) then
         ! Pack control variable
         pcv(offset+1:offset+cv%blk(ib)%cmp(icmp)%n) = cv%blk(ib)%cmp(icmp)%alpha

         ! Update
         offset = offset+cv%blk(ib)%cmp(icmp)%n
      end if
   end do
end do

! Probe out
@:probe_out()

end subroutine cv_pack

!----------------------------------------------------------------------
! Subroutine: cv_unpack
!> Unpack
!----------------------------------------------------------------------
subroutine cv_unpack(cv,pcv)

! Passed variables
class(cv_type),intent(inout) :: cv      !< Control variable
real(kind_real),intent(in) :: pcv(cv%n) !< Packed control variable

! Local variable
integer :: ib,icmp,offset

! Set name
@:set_name(cv_unpack)

! Probe in
@:probe_in()

! Initialization
offset = 0

do ib=1,cv%nb
   do icmp=1,cv%blk(ib)%ncmp
      if (cv%blk(ib)%cmp(icmp)%n>0) then
         ! Unpack control variable
         cv%blk(ib)%cmp(icmp)%alpha = pcv(offset+1:offset+cv%blk(ib)%cmp(icmp)%n)

         ! Update
        offset = offset+cv%blk(ib)%cmp(icmp)%n
      end if
   end do
end do

! Probe out
@:probe_out()

end subroutine cv_unpack

end module type_cv
