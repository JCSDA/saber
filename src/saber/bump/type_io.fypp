#:include 'instrumentation.fypp'
#:include 'generics.fypp'
!----------------------------------------------------------------------
! Module: type_io
!> I/O derived type
! Author: Benjamin Menetrier
! Licensing: this code is distributed under the CeCILL-C license
! Copyright 2015-... UCAR, CERFACS and METEO-FRANCE
!----------------------------------------------------------------------
module type_io

use fckit_mpi_module, only: fckit_mpi_comm,fckit_mpi_sum,fckit_mpi_status
use tools_const, only: pi,deg2rad,rad2deg,reqkm
use tools_func, only: cx_to_proc,cx_to_cxa,convert_i2l,convert_l2i
use tools_kinds, only: kind_int,kind_real
use tools_netcdf, only: put_att,define_dim,check_dim,define_var,inquire_var,put_var,get_var
use tools_qsort, only: qsort
use type_com, only: com_type
use type_mpl, only: mpl_type
@:use_probe()

implicit none

! I/O derived type
type io_type
   ! Initialization flag
   logical :: initialized = .false.           !< Initialization flag

   ! Unstructured grid parameters
   character(len=1) :: x                      !< Subset index
   integer :: ncx                             !< Number of subset Scx points
   integer :: ncxa                            !< Number of subset Scx points, halo A

   ! Field output
   integer :: ncxio                           !< I/O chunk size on subset Scx
   integer :: icx_s                           !< Starting index for the I/O chunk on subset Scx
   integer,allocatable :: cxio_to_cx(:)       !< Subset Scx, I/O chunk to global
   type(com_type) :: com_AIO                  !< Communication between halo A and I/O chunk
   real(kind_real),allocatable :: lon_cxio(:) !< Longitudes
   real(kind_real),allocatable :: lat_cxio(:) !< Latitudes
contains
   procedure :: dealloc => io_dealloc
   procedure :: init => io_init
   #:for dtype in dtypes_irl
      #:for rank in ranks_1234
         procedure io_fld_read_${dtype}$_r${rank}$
         procedure io_fld_write_${dtype}$_r${rank}$
      #:endfor
   #:endfor
@:init_procedure(12)
   generic :: fld_read => &
   #:for dtype in dtypes_irl
      #:for rank in ranks_1234
@:add_procedure(io_fld_read_${dtype}$_r${rank}$)
      #:endfor
   #:endfor
@:init_procedure(12)
   generic :: fld_write => &
   #:for dtype in dtypes_irl
      #:for rank in ranks_1234
@:add_procedure(io_fld_write_${dtype}$_r${rank}$)
      #:endfor
   #:endfor
end type io_type

private
public :: io_type

contains

!----------------------------------------------------------------------
! Subroutine: io_dealloc
!> Release memory
!----------------------------------------------------------------------
subroutine io_dealloc(io)

implicit none

! Passed variables
class(io_type),intent(inout) :: io !< I/O

! Set name
@:set_name(io_dealloc)

! Probe in
@:probe_in()

! Release memory
if (allocated(io%cxio_to_cx)) deallocate(io%cxio_to_cx)
call io%com_AIO%dealloc
if (allocated(io%lon_cxio)) deallocate(io%lon_cxio)
if (allocated(io%lat_cxio)) deallocate(io%lat_cxio)

! Probe out
@:probe_out()

end subroutine io_dealloc

!----------------------------------------------------------------------
! Subroutine: io_init
!> Initialize fields output
!----------------------------------------------------------------------
subroutine io_init(io,mpl,ifmt,x,ncx,ncxa,cxa_to_cx,proc_to_cx_offset,order_cxa,lon_cxa,lat_cxa)

implicit none

! Passed variables
class(io_type),intent(inout) :: io                   !< I/O
type(mpl_type),intent(inout) :: mpl                  !< MPI data
integer,intent(in) :: ifmt                           !< Format indentation
character(len=*),intent(in) :: x                     !< Subset index
integer,intent(in) :: ncx                            !< Number of subset Scx points
integer,intent(in) :: ncxa                           !< Number of subset Scx points, halo A
integer,intent(in) :: cxa_to_cx(ncxa)                !< Subset Scx, halo A to global
integer,intent(in) :: proc_to_cx_offset(mpl%nproc)   !< Processor to offset on subset Scx
integer,intent(in),optional :: order_cxa(ncxa)       !< Global order on halo A
real(kind_real),intent(in),optional :: lon_cxa(ncxa) !< Longitudes on halo A
real(kind_real),intent(in),optional :: lat_cxa(ncxa) !< Latitudes on halo A

! Local variables
integer :: nres,nprocio,iprocio,delta,icxio,icx,icxa,icx_s,icx_e,jcx,ncxown,icxown,iproc,jproc
integer :: list_proc(mpl%nproc)
integer :: lorder_cxa(ncxa),order_proc(mpl%nproc)
integer,allocatable :: procio_to_ncxio(:),procio_to_proc(:),cxown_to_cx(:),order_cx(:),order_inv_cx(:)
real(kind_real),allocatable :: lon_cx(:),lat_cx(:)
logical :: proc_isio(mpl%nproc)
character(len=1024) :: cfmt
type(fckit_mpi_status) :: status

! Set name
@:set_name(io_init)

! Probe in
@:probe_in()

! Save parameters
io%x = x(1:1)
io%ncx = ncx
io%ncxa = ncxa

! Get order
if (present(order_cxa)) then
   ! Copy order
   lorder_cxa = order_cxa
elseif (present(lon_cxa).and.present(lat_cxa)) then
   ! Allocation
   if (mpl%main) then
      allocate(lon_cx(ncx))
      allocate(lat_cx(ncx))
      allocate(order_cx(ncx))
      allocate(order_inv_cx(ncx))
   else
      allocate(lon_cx(0))
      allocate(lat_cx(0))
      allocate(order_cx(0))
      allocate(order_inv_cx(0))
   end if

   ! Communication
   call mpl%loc_to_glb(ncxa,ncx,cxa_to_cx,lon_cxa,lon_cx)
   call mpl%loc_to_glb(ncxa,ncx,cxa_to_cx,lat_cxa,lat_cx)

   ! Compute global order
   if (mpl%main) call qsort(ncx,lon_cx,lat_cx,order_cx)

   ! Communication
   call mpl%glb_to_loc(ncxa,ncx,cxa_to_cx,order_cx,lorder_cxa)

   ! Release memory
   deallocate(lon_cx)
   deallocate(lat_cx)
   deallocate(order_cx)
   deallocate(order_inv_cx)
else
   call mpl%abort('${subr}$','order_cxa or lon_cxa/lat_cxa should be provided')
end if

! Initialization
nres = io%ncx
proc_isio = .false.
io%ncxio = 0
nprocio = min(mpl%nprocio,count(mpl%pioproc))

! Allocation
allocate(procio_to_ncxio(nprocio))
allocate(procio_to_proc(nprocio))

! Define Scx subset splitting among I/O processors
do iprocio=1,nprocio
   ! Define contiguous chunks
   delta = io%ncx/nprocio
   if (nres>(nprocio-iprocio+1)*delta) delta = delta+1
   procio_to_ncxio(iprocio) = delta
   nres = nres-delta
   if (iprocio==1) then
      icx_s = 1
   else
      icx_s = sum(procio_to_ncxio(1:iprocio-1))+1
   end if
   icx_e = sum(procio_to_ncxio(1:iprocio))

   ! Order processors given their implication in this chunk
   list_proc = 0
   do icx=icx_s,icx_e
      iproc = cx_to_proc(mpl%nproc,proc_to_cx_offset,icx)
      if (iproc==mpl%myproc) then
         icxa = cx_to_cxa(mpl%nproc,proc_to_cx_offset,icx)
         jcx = lorder_cxa(icxa)
         jproc = cx_to_proc(mpl%nproc,proc_to_cx_offset,jcx)
         list_proc(jproc) = list_proc(jproc)+1
      end if
   end do
   call mpl%f_comm%allreduce(list_proc,fckit_mpi_sum())
   call qsort(mpl%nproc,list_proc,order_proc)

   ! Select I/O processor for this chunk
   do iproc=mpl%nproc,1,-1
      jproc = order_proc(iproc)
      if (mpl%pioproc(jproc).and.(.not.proc_isio(jproc))) then
         proc_isio(jproc) = .true.
         procio_to_proc(iprocio) = jproc
         if (mpl%myproc==jproc) then
            io%ncxio = procio_to_ncxio(iprocio)
            io%icx_s = icx_s
         end if
         exit
      end if
   end do
end do

! Check procio_to_proc
do iprocio=1,nprocio
   iproc = procio_to_proc(iprocio)
   if (.not.mpl%pioproc(iproc)) call mpl%abort('${subr}$','wrong I/O processor')
end do

! Allocation
if (mpl%main.or.mpl%pioproc(mpl%myproc)) then
   allocate(order_cx(ncx))
else
   allocate(order_cx(0))
end if

! Communication
call mpl%loc_to_glb(ncxa,ncx,cxa_to_cx,lorder_cxa,order_cx)

! Communicate global order to I/O tasks
do iprocio=1,nprocio
   iproc = procio_to_proc(iprocio)
   if (iproc/=mpl%rootproc) then
      if (iproc==mpl%myproc) then
         ! Receive data
         call mpl%f_comm%receive(order_cx,mpl%rootproc-1,mpl%tag,status)
      elseif (mpl%main) then
         ! Send data
         call mpl%f_comm%send(order_cx,iproc-1,mpl%tag)
      end if
   end if
   call mpl%update_tag(1)
end do

! Allocation
allocate(io%cxio_to_cx(io%ncxio))

! Initialization
iprocio = 1
iproc = procio_to_proc(iprocio)
icxio = 0
ncxown = 0

! Go through Scx subset distribution, first pass
do icx=1,io%ncx
   icxio = icxio+1
   if (icxio>procio_to_ncxio(iprocio)) then
      iprocio = iprocio+1
      iproc = procio_to_proc(iprocio)
      icxio = 1
   end if
   if (iproc==mpl%myproc) then
      jcx = order_cx(icx)
      jproc = cx_to_proc(mpl%nproc,proc_to_cx_offset,jcx)
      if (jproc==iproc) ncxown = ncxown+1
      io%cxio_to_cx(icxio) = jcx
   end if
end do

! Allocation
allocate(cxown_to_cx(ncxown))

! Initialization
iprocio = 1
iproc = procio_to_proc(iprocio)
icxio = 0
icxown = 0

! Go through Scx subset distribution, second pass
do icx=1,io%ncx
   icxio = icxio+1
   if (icxio>procio_to_ncxio(iprocio)) then
      iprocio = iprocio+1
      iproc = procio_to_proc(iprocio)
      icxio = 1
   end if
   if (iproc==mpl%myproc) then
      jcx = order_cx(icx)
      jproc = cx_to_proc(mpl%nproc,proc_to_cx_offset,jcx)
      if (jproc==iproc) then
         icxown = icxown+1
         cxown_to_cx(icxown) = jcx
      end if
   end if
end do

! Print results
write(cfmt,'(a,i2.2,a)') '(a',ifmt,',a)'
write(mpl%info,trim(cfmt)) '','I/O splitting:'
call mpl%flush
do iprocio=1,nprocio
   write(cfmt,'(a,i2.2,a)') '(a',ifmt+3,',a,i6,a,i8,a,i6)'
   write(mpl%info,trim(cfmt)) '','Chunk ',iprocio,' ~> ',procio_to_ncxio(iprocio),' grid-points handled by task ', &
 & procio_to_proc(iprocio)
   call mpl%flush
end do

! Setup Scx subset I/O communication
call io%com_AIO%setup(mpl,'com_AIO',io%ncxa,io%ncxio,io%ncx,cxa_to_cx,io%cxio_to_cx,cxown_to_cx)

! Release memory
deallocate(procio_to_ncxio)
deallocate(procio_to_proc)
if (mpl%main.or.mpl%pioproc(mpl%myproc)) deallocate(order_cx)
deallocate(cxown_to_cx)

! Set initialization flag
io%initialized = .true.

! Probe out
@:probe_out()

end subroutine io_init

#:for dtype in dtypes_irl
   #:for rank in ranks_1234
!----------------------------------------------------------------------
! Subroutine: io_fld_read_${dtype}$_r${rank}$
!> Read field
!----------------------------------------------------------------------
subroutine io_fld_read_${dtype}$_r${rank}$(io,mpl,ncid,varid,fld_cxa)

implicit none

! Passed variables
class(io_type),intent(in) :: io                        !< I/O
type(mpl_type),intent(inout) :: mpl                    !< MPI data
integer,intent(in) :: ncid                             !< File/group ID
integer,intent(in) :: varid                            !< Variable ID
${ftype[dtype]}$,intent(out) :: fld_cxa(${dim[rank]}$) !< Field

! Local variables
integer :: shp(${rank}$),shp_io(${rank}$),dim_start(${rank}$)
${ftype[dtype]}$,allocatable :: fld_cxio(${dim[rank]}$)

! Set name
@:set_name(io_fld_read_${dtype}$_r${rank}$)

! Probe in
@:probe_in()

! Check initialization
if (.not.io%initialized) call mpl%abort('${subr}$','I/O not initialized')

! Check field size
if (size(fld_cxa,1)/=io%ncxa) call mpl%abort('${subr}$','wrong field size')

! Get field dimensions
shp = shape(fld_cxa)
shp_io = shp
shp_io(1) = io%ncxio
dim_start = 1
dim_start(1) = io%icx_s

! Allocation
#{if rank == 1}# allocate(fld_cxio(io%ncxio)) #{endif}#
#{if rank == 2}# allocate(fld_cxio(io%ncxio,shp(2))) #{endif}#
#{if rank == 3}# allocate(fld_cxio(io%ncxio,shp(2),shp(3))) #{endif}#
#{if rank == 4}# allocate(fld_cxio(io%ncxio,shp(2),shp(3),shp(4))) #{endif}#

! Read variable
call get_var(mpl,ncid,varid,fld_cxio,dim_start,shp_io)

! Communication
call io%com_AIO%red(mpl,fld_cxio,fld_cxa)

! Release memory
deallocate(fld_cxio)

! Wait for everybody
call mpl%f_comm%barrier()

! Probe out
@:probe_out()

end subroutine io_fld_read_${dtype}$_r${rank}$
   #:endfor
#:endfor

#:for dtype in dtypes_irl
   #:for rank in ranks_1234
!----------------------------------------------------------------------
! Subroutine: io_fld_write_${dtype}$_r${rank}$
!> Write field
!----------------------------------------------------------------------
subroutine io_fld_write_${dtype}$_r${rank}$(io,mpl,ncid,varid,fld_cxa,gmask_cxa)

implicit none

! Passed variables
class(io_type),intent(in) :: io                         !< I/O
type(mpl_type),intent(inout) :: mpl                     !< MPI data
integer,intent(in) :: ncid                              !< File/group ID
integer,intent(in) :: varid                             !< Variable ID
${ftype[dtype]}$,intent(in) :: fld_cxa(${dim[rank]}$)   !< Field
logical,intent(in),optional :: gmask_cxa(${dim[rank]}$) !< Geographical mask

! Local variables
integer :: shp(${rank}$),shp_io(${rank}$),dim_start(${rank}$)
integer :: #{for arg_dim in range(1,rank+1)}# i${arg_dim}$${delim[arg_dim == rank]}$ #{endfor}#
${ftype[dtype]}$,allocatable :: fld_cxio(${dim[rank]}$),fld_cxa_masked(${dim[rank]}$)

! Set name
@:set_name(io_fld_write_${dtype}$_r${rank}$)

! Probe in
@:probe_in()

! Check initialization
if (.not.io%initialized) call mpl%abort('${subr}$','I/O not initialized')

! Check field size
if (size(fld_cxa,1)/=io%ncxa) call mpl%abort('${subr}$','wrong field size')

! Get field dimensions
shp = shape(fld_cxa)
shp_io = shp
shp_io(1) = io%ncxio
dim_start = 1
dim_start(1) = io%icx_s

! Allocation
#{if rank == 1}# allocate(fld_cxio(io%ncxio)) #{endif}#
#{if rank == 2}# allocate(fld_cxio(io%ncxio,shp(2))) #{endif}#
#{if rank == 3}# allocate(fld_cxio(io%ncxio,shp(2),shp(3))) #{endif}#
#{if rank == 4}# allocate(fld_cxio(io%ncxio,shp(2),shp(3),shp(4))) #{endif}#

if (present(gmask_cxa)) then
   ! Allocation
   #{if rank == 1}# allocate(fld_cxa_masked(shp(1))) #{endif}#
   #{if rank == 2}# allocate(fld_cxa_masked(shp(1),shp(2))) #{endif}#
   #{if rank == 3}# allocate(fld_cxa_masked(shp(1),shp(2),shp(3))) #{endif}#
   #{if rank == 4}# allocate(fld_cxa_masked(shp(1),shp(2),shp(3),shp(4))) #{endif}#

   ! Initialization
   fld_cxa_masked = fld_cxa

   ! Apply mask
   #:for arg_dim in range(1,rank+1)
   do i${arg_dim}$=shp(${arg_dim}$),1,-1
   #:endfor
      if (.not.gmask_cxa( &
      #:for arg_dim in range(1,rank)
    & i${arg_dim}$, &
      #:endfor
    & i${rank}$)) fld_cxa_masked( &
      #:for arg_dim in range(1,rank)
    & i${arg_dim}$, &
      #:endfor
    & i${rank}$) = mpl%${msv[dtype]}$
   #:for arg_dim in range(1,rank+1)
   end do
   #:endfor

   ! Communication
   call io%com_AIO%ext(mpl,fld_cxa_masked,fld_cxio)

   ! Release memory
   deallocate(fld_cxa_masked)
else
   ! Communication
   call io%com_AIO%ext(mpl,fld_cxa,fld_cxio)
end if

! Write variable
call put_var(mpl,ncid,varid,fld_cxio,dim_start,shp_io)

! Release memory
deallocate(fld_cxio)

! Wait for everybody
call mpl%f_comm%barrier()

! Probe out
@:probe_out()

end subroutine io_fld_write_${dtype}$_r${rank}$
   #:endfor
#:endfor

end module type_io
