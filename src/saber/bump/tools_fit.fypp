#:include '../instrumentation.fypp'
!----------------------------------------------------------------------
! Module: tools_fit
!> Fit-related tools
! Author: Benjamin Menetrier
! Licensing: this code is distributed under the CeCILL-C license
! Copyright 2015-... UCAR, CERFACS, METEO-FRANCE and IRIT
!----------------------------------------------------------------------
module tools_fit

use tools_const, only: zero,tenth,quarter,half,one,two,thousand
use tools_gc99, only: nscaleth,scaleth,scalethmax,scaleh,scalev,fit_func,fit_func_sqrt
use tools_kinds, only: kind_real,huge_real
use tools_repro, only: inf,sup,infeq
use type_mpl, only: mpl_type
@:use_probe()

implicit none

real(kind_real),parameter :: condmax = thousand !< Maximum tensor conditioning number

interface diag_iso
   module procedure fit_diag_iso
end interface
interface diag_tensor
   module procedure fit_diag_tensor
end interface
interface diag_ver
   module procedure fit_diag_ver
end interface
interface diag_iso_full
   module procedure fit_diag_iso_full
end interface
interface diag_tensor_full
   module procedure fit_diag_tensor_full
end interface
interface tensor_d2h
   module procedure fit_tensor_d2h
end interface
interface tensor_check_cond
   module procedure fit_tensor_check_cond
end interface
interface fast_fit
   module procedure fit_fast_fit
end interface
interface ver_smooth
   module procedure fit_ver_smooth
end interface
interface ver_fill
   module procedure fit_ver_fill
end interface

private
public :: condmax
public :: diag_iso,diag_tensor,diag_ver,diag_iso_full,diag_tensor_full,tensor_d2h,tensor_check_cond,fast_fit,ver_smooth,ver_fill

contains

!----------------------------------------------------------------------
! Subroutine: fit_diag_iso
!> Compute isotropic diagnostic fit function
!----------------------------------------------------------------------
subroutine fit_diag_iso(mpl,n,dist,dir,fit_r,ncomp,fit)

implicit none

! Passed variables
type(mpl_type),intent(inout) :: mpl   !< MPI data
integer,intent(in) :: n               !< Vector size
real(kind_real),intent(in) :: dist(n) !< Distance
character(len=*),intent(in) :: dir    !< Direction
real(kind_real),intent(in) :: fit_r   !< Support radius
integer,intent(in) :: ncomp           !< Number of components
real(kind_real),intent(out) :: fit(n) !< Fit

! Local variables
integer :: i
real(kind_real) :: nd

! Set name
@:set_name(fit_diag_iso)

! Probe in
@:probe_in()

if (mpl%msv%is(fit_r)) then
   ! Set to missing values if no value available
   fit = mpl%msv%valr
else
   do i=1,n
      ! Normalized distance
      if (fit_r>zero) then
         nd = dist(i)/fit_r
      elseif (dist(i)>zero) then
         nd = one
      else
         nd = zero
      end if

      ! Unitary fit function
      fit(i) = fit_func(mpl,dir,nd,ncomp)
   end do
end if

! Probe out
@:probe_out()

end subroutine fit_diag_iso

!----------------------------------------------------------------------
! Subroutine: fit_diag_tensor
!> Compute anisotropic diagnostic fit function
!----------------------------------------------------------------------
subroutine fit_diag_tensor(mpl,nc3,nc4,disth,as,fit_D11,fit_D22,fit_D12,ncomp,fit)

implicit none

! Passed variables
type(mpl_type),intent(inout) :: mpl         !< MPI data
integer,intent(in) :: nc3                   !< Number of horizontal distance classes
integer,intent(in) :: nc4                   !< Number of angular sectors
real(kind_real),intent(in) :: disth(nc3)    !< Horizontal distance
real(kind_real),intent(in) :: as(nc4)       !< Angular sectors
real(kind_real),intent(in) :: fit_D11       !< Tensor component 11
real(kind_real),intent(in) :: fit_D22       !< Tensor component 22
real(kind_real),intent(in) :: fit_D12       !< Tensor component 12 (normalized)
integer,intent(in) :: ncomp                 !< Number of components
real(kind_real),intent(out) :: fit(nc3,nc4) !< Fit

! Local variables
integer :: jc3,jc4
real(kind_real) :: H11,H22,H12,dx,dy,nd

! Set name
@:set_name(fit_diag_tensor)

! Probe in
@:probe_in()

! Initialization
fit = mpl%msv%valr

! Inverse D to get H
call tensor_d2h(mpl,fit_D11,fit_D22,fit_D12,H11,H22,H12)

! Homogeneous anisotropic approximation
do jc4=1,nc4
   do jc3=1,nc3
      ! Normalized distance
      dx = disth(jc3)*cos(as(jc4))
      dy = disth(jc3)*sin(as(jc4))
      nd = sqrt(H11*dx**2+H22*dy**2+two*H12*dx*dy)

      ! Unitary fit function
      fit(jc3,jc4) = fit_func(mpl,'hor',nd,ncomp)
   end do
end do

! Probe out
@:probe_out()

end subroutine fit_diag_tensor

!----------------------------------------------------------------------
! Subroutine: fit_diag_ver
!> Compute vertical diagnostic fit function
!----------------------------------------------------------------------
subroutine fit_diag_ver(mpl,nl0r,nl0,l0rl0_to_l0,distv,rv,ncomp,fit)

implicit none

! Passed variables
type(mpl_type),intent(inout) :: mpl           !< MPI data
integer,intent(in) :: nl0r                    !< Effective number of levels
integer,intent(in) :: nl0                     !< Number of levels
integer,intent(in) :: l0rl0_to_l0(nl0r,nl0)   !< Effective level to level
real(kind_real),intent(in) :: distv(nl0r,nl0) !< Vertical distance
real(kind_real),intent(in) :: rv(nl0)         !< Vertical support radius
integer,intent(in) :: ncomp                   !< Number of components
real(kind_real),intent(out) :: fit(nl0r,nl0)  !< Fit

! Local variables
integer :: il0,jl0r,jl0
real(kind_real) :: vnd
real(kind_real) :: ver_sqrt(nl0,nl0),ver_full(nl0,nl0),ver_full_norm(nl0)

! Set name
@:set_name(fit_diag_ver)

! Probe in
@:probe_in()

! Initialization
ver_sqrt = zero

do il0=1,nl0
   if (mpl%msv%isnot(rv(il0))) then
      do jl0r=1,nl0r
         ! Level index
         jl0 = l0rl0_to_l0(jl0r,il0)

         ! Normalized distance
         if (rv(il0)>zero) then
            vnd = distv(jl0r,il0)/rv(il0)
         elseif (il0/=jl0) then
            vnd = one
         else
            vnd = zero
         end if

         ! Unitary fit function
         ver_sqrt(jl0,il0) = fit_func_sqrt(mpl,vnd,ncomp)
      end do
   end if
end do

! Product
ver_full = matmul(ver_sqrt,transpose(ver_sqrt))

! Normalization
do il0=1,nl0
   if (ver_full(il0,il0)>zero) then
      ver_full_norm(il0) = one/sqrt(ver_full(il0,il0))
   else
      ver_full_norm(il0) = mpl%msv%valr
   end if
end do

! Reduced matrix
do il0=1,nl0
   do jl0r=1,nl0r
      ! Level index
      jl0 = l0rl0_to_l0(jl0r,il0)

      ! Fit
      if (mpl%msv%isnot(ver_full(jl0,il0)).and.mpl%msv%isnot(ver_full_norm(il0)).and.mpl%msv%isnot(ver_full_norm(jl0))) then
         fit(jl0r,il0) = ver_full(jl0,il0)*ver_full_norm(il0)*ver_full_norm(jl0)
      else
         fit(jl0r,il0) = mpl%msv%valr
      end if
   end do
end do

! Probe out
@:probe_out()

end subroutine fit_diag_ver

!----------------------------------------------------------------------
! Subroutine: fit_diag_iso_full
!> Compute isotropic diagnostic fit function, full profile
!----------------------------------------------------------------------
subroutine fit_diag_iso_full(mpl,nc3,nl0r,nl0,l0rl0_to_l0,disth,distv,coef,rh,rv,ncomp,fit)

implicit none

! Passed variables
type(mpl_type),intent(inout) :: mpl              !< MPI data
integer,intent(in) :: nc3                        !< Number of horizontal distance classes
integer,intent(in) :: nl0r                       !< Effective number of levels
integer,intent(in) :: nl0                        !< Number of levels
integer,intent(in) :: l0rl0_to_l0(nl0r,nl0)      !< Effective level to level
real(kind_real),intent(in) :: disth(nc3)         !< Horizontal distance
real(kind_real),intent(in) :: distv(nl0r,nl0)    !< Vertical distance
real(kind_real),intent(in) :: coef(nl0)          !< Diagonal coefficient
real(kind_real),intent(in) :: rh(nl0)            !< Horizontal support radius
real(kind_real),intent(in) :: rv(nl0)            !< Vertical support radius
integer,intent(in) :: ncomp                      !< Number of components
real(kind_real),intent(out) :: fit(nc3,nl0r,nl0) !< Fit

! Local variables
integer :: il0,jl0r,jl0,jc3
real(kind_real) :: rh_eff
real(kind_real) :: hor_fit(nc3),ver_fit(nl0r,nl0)

! Set name
@:set_name(fit_diag_iso_full)

! Probe in
@:probe_in()

! Vertical component
call diag_ver(mpl,nl0r,nl0,l0rl0_to_l0,distv,rv,ncomp,ver_fit)

do il0=1,nl0
   do jl0r=1,nl0r
      ! Level index
      jl0 = l0rl0_to_l0(jl0r,il0)

      if (mpl%msv%isnot(ver_fit(jl0r,il0)).and.mpl%msv%isnot(rh(il0)).and.mpl%msv%isnot(coef(il0)) &
 & .and.mpl%msv%isnot(coef(jl0))) then
         ! Averaged horizontal support radius
         rh_eff = half*(rh(il0)+rh(jl0))

         ! Horizontal component
         call diag_iso(mpl,nc3,disth,'hor',rh_eff,ncomp,hor_fit)

         do jc3=1,nc3
            ! Fit function
            fit(jc3,jl0r,il0) = hor_fit(jc3)*ver_fit(jl0r,il0)
         end do

         ! Diagonal coefficient
         fit(:,jl0r,il0) = fit(:,jl0r,il0)*sqrt(coef(il0)*coef(jl0))
      else
         fit(:,jl0r,il0) = mpl%msv%valr
      end if
   end do
end do

! Probe out
@:probe_out()

end subroutine fit_diag_iso_full

!----------------------------------------------------------------------
! Subroutine: fit_diag_tensor_full
!> Compute anistropic diagnostic fit function, full profile
!----------------------------------------------------------------------
subroutine fit_diag_tensor_full(mpl,nc3,nc4,nl0r,nl0,l0rl0_to_l0,disth,as,distv,coef,D11,D22,D12,rv,ncomp,fit)

implicit none

! Passed variables
type(mpl_type),intent(inout) :: mpl                  !< MPI data
integer,intent(in) :: nc3                            !< Number of horizontal distance classes
integer,intent(in) :: nc4                            !< Number of angular sectos
integer,intent(in) :: nl0r                           !< Effective number of levels
integer,intent(in) :: nl0                            !< Number of levels
integer,intent(in) :: l0rl0_to_l0(nl0r,nl0)          !< Effective level to level
real(kind_real),intent(in) :: disth(nc3)             !< Horizontal distance
real(kind_real),intent(in) :: as(nc4)                !< Angular sectors
real(kind_real),intent(in) :: distv(nl0r,nl0)        !< Vertical distance
real(kind_real),intent(in) :: coef(nl0)              !< Diagonal coefficient
real(kind_real),intent(in) :: D11(nl0)               !< Horizontal tensor component 11
real(kind_real),intent(in) :: D22(nl0)               !< Horizontal tensor component 22
real(kind_real),intent(in) :: D12(nl0)               !< Horizontal tensor component 12 (normalized)
real(kind_real),intent(in) :: rv(nl0)                !< Vertical support radius
integer,intent(in) :: ncomp                          !< Number of components
real(kind_real),intent(out) :: fit(nc3,nc4,nl0r,nl0) !< Fit

! Local variables
integer :: il0,jl0r,jl0,jc3,jc4
real(kind_real) :: D11_eff,D22_eff,D12_eff
real(kind_real) :: hor_fit(nc3,nc4),ver_fit(nl0r,nl0)

! Set name
@:set_name(fit_diag_tensor_full)

! Probe in
@:probe_in()

! Vertical component
call diag_ver(mpl,nl0r,nl0,l0rl0_to_l0,distv,rv,ncomp,ver_fit)

do il0=1,nl0
   do jl0r=1,nl0r
      ! Level index
      jl0 = l0rl0_to_l0(jl0r,il0)

      if (mpl%msv%isnot(ver_fit(jl0r,il0)).and.mpl%msv%isnot(D11(il0)).and.mpl%msv%isnot(D22(il0)).and.mpl%msv%isnot(D12(jl0)) &
 & .and.mpl%msv%isnot(coef(il0)).and.mpl%msv%isnot(coef(jl0))) then
         ! Averaged horizontal support radius
         D11_eff = half*(D11(il0)+D11(jl0))
         D22_eff = half*(D22(il0)+D22(jl0))
         D12_eff = half*(D12(il0)+D12(jl0))

         ! Horizontal component
         call diag_tensor(mpl,nc3,nc4,disth,as,D11_eff,D22_eff,D12_eff,ncomp,hor_fit)

         do jc4=1,nc4
            do jc3=1,nc3
               ! Fit function
               fit(jc3,jc4,jl0r,il0) = hor_fit(jc3,jc4)*ver_fit(jl0r,il0)
            end do
         end do

         ! Diagonal coefficient
         fit(:,:,jl0r,il0) = fit(:,:,jl0r,il0)*sqrt(coef(il0)*coef(jl0))
      else
         fit(:,:,jl0r,il0) = mpl%msv%valr
      end if
   end do
end do

! Probe out
@:probe_out()

end subroutine fit_diag_tensor_full

!----------------------------------------------------------------------
! Subroutine: fit_tensor_d2h
!> From D (Daley tensor) to H (local tensor used to compute the normalized distance)
!----------------------------------------------------------------------
subroutine fit_tensor_d2h(mpl,D11,D22,D12,H11,H22,H12)

implicit none

! Passed variables
type(mpl_type),intent(inout) :: mpl !< MPI data
real(kind_real),intent(in) :: D11   !< Daley tensor component 11
real(kind_real),intent(in) :: D22   !< Daley tensor component 22
real(kind_real),intent(in) :: D12   !< Daley tensor component 12 (normalized)
real(kind_real),intent(out) :: H11  !< Local tensor component 11
real(kind_real),intent(out) :: H22  !< Local tensor component 22
real(kind_real),intent(out) :: H12  !< Local tensor component 12

! Local variables
real(kind_real) :: det,D12sq

! Set name
@:set_name(fit_tensor_d2h)

! Probe in
@:probe_in()

if (mpl%msv%isnot(D11).and.mpl%msv%isnot(D22).and.mpl%msv%isnot(D12)) then
   ! Full D12 component
   D12sq = D11*D22*D12**2

   ! Compute horizontal determinant
   det = D11*D22-D12sq

   ! Inverse D to get H
   if (det>zero) then
      H11 = D22/det
      H22 = D11/det
      H12 = -sqrt(D12sq)/det
   else
      call mpl%abort('${subr}$','non-invertible tensor')
   end if
else
   ! Missing values
   H11 = mpl%msv%valr
   H22 = mpl%msv%valr
   H12 = mpl%msv%valr
end if

! Probe out
@:probe_out()

end subroutine fit_tensor_d2h

!----------------------------------------------------------------------
! Subroutine: fit_tensor_check_cond
!> Check tensor conditioning
!----------------------------------------------------------------------
subroutine fit_tensor_check_cond(D11,D22,D12,valid)

implicit none

! Passed variables
real(kind_real),intent(in) :: D11 !< Daley tensor component 11
real(kind_real),intent(in) :: D22 !< Daley tensor component 22
real(kind_real),intent(in) :: D12 !< Daley tensor component 12 (normalized)
logical,intent(out) :: valid      !< Conditioning validity

! Local variables
real(kind_real) :: det,tr,diff,ev1,ev2

! Set name
@:set_name(fit_tensor_check_cond)

! Probe in
@:probe_in()

! Compute trace and determinant
tr = D11+D22
det = D11*D22*(one-D12**2)
diff = quarter*(D11-D22)**2+D11*D22*D12**2

if ((det>zero).and..not.(diff<zero)) then
   ! Compute eigenvalues
   ev1 = half*tr+sqrt(diff)
   ev2 = half*tr-sqrt(diff)

   if (ev2>zero) then
      ! Check conditioning
      valid = inf(ev1,condmax*ev2)
   else
      ! Lowest negative eigenvalue is negative
      valid = .false.
   end if
else
   ! Non-positive definite tensor
   valid = .false.
end if

! Probe out
@:probe_out()

end subroutine fit_tensor_check_cond

!----------------------------------------------------------------------
! Subroutine: fit_fast_fit
!> Fast fit length-scale estimation based on the value at mid-height
!----------------------------------------------------------------------
subroutine fit_fast_fit(mpl,n,iz,dist,dir,ncomp,raw,fit_r)

implicit none

! Passed variables
type(mpl_type),intent(inout) :: mpl   !< MPI data
integer,intent(in) :: n               !< Vector size
integer,intent(in) :: iz              !< Zero separation index
real(kind_real),intent(in) :: dist(n) !< Distance
character(len=*),intent(in) :: dir    !< Direction
integer,intent(in) :: ncomp           !< Number of components
real(kind_real),intent(in) :: raw(n)  !< Raw data
real(kind_real),intent(out) :: fit_r  !< Support radius

! Local variables
integer,parameter :: itermax = 10
integer :: ntmp,iscaleth,di,i,im,ip,ntest,itest,iter
real(kind_real) :: raw_tmp(n),fit_r_m,fit_r_p,raw_min,dscale,thtest
real(kind_real) :: cost,cost_min,fit_r_min,fit(n)
real(kind_real),allocatable :: scaletest(:),scalethtest(:)

! Set name
@:set_name(fit_fast_fit)

! Probe in
@:probe_in()

if (any(dist<zero)) call mpl%abort('${subr}$','negative distance')

if (raw(iz)>zero) then
   if (n>1) then
      ! Copy points that are lower than the zero-separation
      raw_tmp = mpl%msv%valr
      raw_tmp(iz) = one
      do i=1,n
        if (i/=iz) then
           if (mpl%msv%isnot(raw(i)).and.inf(raw(i),raw(iz))) raw_tmp(i) = raw(i)/raw(iz)
        end if
      end do
      ntmp = count(mpl%msv%isnot(raw_tmp))

      if (ntmp>1) then
         ! Initialization
         ntest = 0
         raw_min = minval(raw_tmp,mask=mpl%msv%isnot(raw_tmp))
         cost_min = huge_real
         fit_r_min = mpl%msv%valr

         ! Count number of scales to test
         do iscaleth=1,nscaleth
            if (infeq(raw_min,scaleth(iscaleth))) ntest = ntest+1
         end do
         if (ntest>0) then
            ! Save scales to test
            allocate(scaletest(ntest))
            allocate(scalethtest(ntest))
            itest = 0
            do iscaleth=1,nscaleth
               if (infeq(raw_min,scaleth(iscaleth))) then
                  itest = itest+1
                  if (dir=='hor') then
                     scaletest(itest) = scaleh(iscaleth,ncomp)
                  elseif (dir=='ver') then
                     scaletest(itest) = scalev(iscaleth)
                  end if
                  scalethtest(itest) = scaleth(iscaleth)
               end if
            end do
         else
            ! Unique data-based scale
            ntest = 1
            allocate(scalethtest(ntest))
            allocate(scaletest(ntest))
            scalethtest(1) = raw_min+tenth*(one-raw_min)
            scaletest(1) = half
            dscale = quarter
            do iter=1,itermax
               thtest = fit_func(mpl,dir,scaletest(1),ncomp)
               if (sup(scalethtest(1),thtest)) then
                  scaletest(1) = scaletest(1)-dscale
               else
                  scaletest(1) = scaletest(1)+dscale
               end if
               dscale = half*dscale
            end do
         end if

         ! Loop over thresholds
         do itest=1,ntest
            ! Find support radius, lower value
            fit_r_m = mpl%msv%valr
            if (iz>1) then
               ip = iz
               do di=1,n
                  ! Check whether fit value has been found
                  if (mpl%msv%is(fit_r_m)) then
                     ! Index
                     im = iz-di

                     ! Check index validity
                     if (im>=1) then
                        ! Check whether threshold has been crossed
                        if (mpl%msv%isnot(raw_tmp(im)).and.inf(raw_tmp(im),scalethtest(itest))) then
                           ! Set fit value
                           fit_r_m = dist(im)+(dist(ip)-dist(im))*(scalethtest(itest)-raw_tmp(im))/(raw_tmp(ip)-raw_tmp(im))
                        else
                           ! Update index
                           ip = im
                        end if
                     end if
                  end if
               end do
            end if

            ! Find support radius, upper value
            fit_r_p = mpl%msv%valr
            if (iz<n) then
               im = iz
               do di=1,n
                  ! Check whether fit value has been found
                  if (mpl%msv%is(fit_r_p)) then
                     ! Index
                     ip = iz+di

                     ! Check index validity
                     if (ip<=n) then
                        ! Check whether threshold has been crossed
                        if (mpl%msv%isnot(raw_tmp(ip)).and.inf(raw_tmp(ip),scalethtest(itest))) then
                           ! Set fit value
                           fit_r_p = dist(im)+(dist(ip)-dist(im))*(scalethtest(itest)-raw_tmp(im))/(raw_tmp(ip)-raw_tmp(im))
                        else
                           ! Update index
                           im = ip
                        end if
                     end if
                  end if
               end do
            end if

            ! Gather values
            if (mpl%msv%isnot(fit_r_m).and.mpl%msv%isnot(fit_r_p)) then
               fit_r = half*(fit_r_m+fit_r_p)
            elseif (mpl%msv%isnot(fit_r_m)) then
               fit_r = fit_r_m
            elseif (mpl%msv%isnot(fit_r_p)) then
               fit_r = fit_r_p
            else
               fit_r = mpl%msv%valr
            end if

            if (mpl%msv%isnot(fit_r)) then
               ! Scale normalization
               fit_r = fit_r/scaletest(itest)

               ! Compute fitness
               call diag_iso(mpl,n,dist,dir,fit_r,ncomp,fit)
               cost = sum((fit-raw_tmp)**2)/real(ntmp,kind_real)
               if (inf(cost,cost_min)) then
                  ! Better fit
                  cost_min = cost
                  fit_r_min = fit_r
               end if
            end if
         end do

         ! Set best support radius
         fit_r = fit_r_min
      else
         ! All positive-separation points are missing
         fit_r = mpl%msv%valr
      end if
   else
      ! Only one point, zero radius
      fit_r = zero
   end if
else
   ! Zero-separation point is negative
   fit_r = mpl%msv%valr
end if

! Probe out
@:probe_out()

end subroutine fit_fast_fit

!----------------------------------------------------------------------
! Subroutine: fit_ver_smooth
!> Homogeneous smoothing of a vertical profile
!----------------------------------------------------------------------
subroutine fit_ver_smooth(mpl,n,x,rv,profile)

implicit none

! Passed variables
type(mpl_type),intent(inout) :: mpl         !< MPI data
integer,intent(in) :: n                     !< Vector size
real(kind_real),intent(in) :: x(n)          !< Coordinate
real(kind_real),intent(in) :: rv            !< Filtering support radius
real(kind_real),intent(inout) :: profile(n) !< Vertical profile

! Local variables
integer :: i,j
real(kind_real) :: kernel(n,n),distnorm,profile_init(n),norm

! Set name
@:set_name(fit_ver_smooth)

! Probe in
@:probe_in()

if (n>1) then
   if (rv<zero) call mpl%abort('${subr}$','negative filtering support radius')

   if ((rv>zero).and.mpl%msv%isanynot(profile)) then
      ! Vertical smoothing kernel
      kernel = zero
      do i=1,n
         do j=1,n
            if (mpl%msv%isnot(profile(i)).and.mpl%msv%isnot(profile(j))) then
               ! Gaspari-Cohn (1999) function
               distnorm = abs(x(j)-x(i))/rv
               kernel(i,j) = fit_func(mpl,'ver',distnorm,1)
            end if
         end do
      end do

      ! Apply kernel
      profile_init = profile
      profile = zero
      do i=1,n
         norm = zero
         do j=1,n
            profile(i) = profile(i)+kernel(i,j)*profile_init(j)
            norm = norm+kernel(i,j)
         end do
         if (norm>zero) then
            profile(i) = profile(i)/norm
         else
            profile(i) = mpl%msv%valr
         end if
      end do
   end if
end if

! Probe out
@:probe_out()

end subroutine fit_ver_smooth

!----------------------------------------------------------------------
! Subroutine: fit_ver_fill
!> Missing values filling of a vertical profile
!----------------------------------------------------------------------
subroutine fit_ver_fill(mpl,n,x,profile)

implicit none

! Passed variables
type(mpl_type),intent(inout) :: mpl         !< MPI data
integer,intent(in) :: n                     !< Vector size
real(kind_real),intent(in) :: x(n)          !< Coordinate
real(kind_real),intent(inout) :: profile(n) !< Vertical profile

! Local variables
integer :: i,j,iinf,isup
real(kind_real) :: profile_init(n)

! Set name
@:set_name(fit_ver_fill)

! Probe in
@:probe_in()

if (mpl%msv%isanynot(profile)) then
   ! Initialization
   profile_init = profile
   iinf = mpl%msv%vali

   do i=1,n
      if (mpl%msv%isnot(profile_init(i))) then
         ! Valid inferior point
         iinf = i
      else
         ! Look for a superior point
         isup = mpl%msv%vali
         j = i+1
         do while ((j<=n).and.(mpl%msv%is(isup)))
            if (mpl%msv%isnot(profile_init(j))) isup = j
            j = j+1
         end do

         if (mpl%msv%isnot(iinf).and.mpl%msv%isnot(isup)) then
            ! Interpolation
            profile(i) = profile_init(iinf)+(x(i)-x(iinf))*(profile_init(isup)-profile_init(iinf))/(x(isup)-x(iinf))
         elseif (mpl%msv%isnot(isup)) then
            ! Extrapolation with nearest superior point
            profile(i) = profile(isup)
         elseif (mpl%msv%isnot(iinf)) then
            ! Extrapolation with nearest inferior point
            profile(i) = profile(iinf)
         else
            call mpl%abort('${subr}$','too many missing values')
         end if
      end if
   end do
end if

! Probe out
@:probe_out()

end subroutine fit_ver_fill

end module tools_fit
