#:include '../instrumentation.fypp'
!----------------------------------------------------------------------
! Module: tools_fit
!> Fit-related tools
! Author: Benjamin Menetrier
! Licensing: this code is distributed under the CeCILL-C license
! Copyright 2015-... UCAR, CERFACS, METEO-FRANCE and IRIT
!----------------------------------------------------------------------
module tools_fit

use tools_const, only: zero,half,one
use tools_func, only: fit_diag
use tools_gc99, only: npk,nscaleth,scaleth,scalethmin,pkhdef,pkvdef,pkmin,dpk,scaleh,scalev,scalehdef,scalevdef,fit_func
use tools_kinds, only: kind_real,huge_real
use tools_repro, only: inf,sup
use type_mpl, only: mpl_type
@:use_probe()

implicit none

interface fast_fit
   module procedure fit_fast_fit
end interface
interface ver_smooth
   module procedure fit_ver_smooth
end interface
interface ver_fill
   module procedure fit_ver_fill
end interface

private
public :: fast_fit,ver_smooth,ver_fill

contains

!----------------------------------------------------------------------
! Subroutine: fit_fast_fit
!> Fast fit length-scale estimation based on the value at mid-height
!----------------------------------------------------------------------
subroutine fit_fast_fit(mpl,n,iz,dist,dir,raw,fit_r,fit_pk)

implicit none

! Passed variables
type(mpl_type),intent(inout) :: mpl            !< MPI data
integer,intent(in) :: n                        !< Vector size
integer,intent(in) :: iz                       !< Zero separation index
real(kind_real),intent(in) :: dist(n)          !< Distance
character(len=*),intent(in) :: dir             !< Direction
real(kind_real),intent(in) :: raw(n)           !< Raw data
real(kind_real),intent(out) :: fit_r           !< Support radius
real(kind_real),intent(out),optional :: fit_pk !< Default peakness

! Local variables
integer :: iscaleth,di,i,im,ip,ipk
real(kind_real) :: raw_tmp(n),fit_r_m,fit_r_p
real(kind_real) :: cost,cost_min,fit_r_test,fit_pk_test,fit_r_min,fit_pk_min,fit(n)

! Set name
@:set_name(fit_fast_fit)

! Probe in
@:probe_in()

if (any(dist<zero)) call mpl%abort('${subr}$','negative distance')

if (raw(iz)>zero) then
   if (n>1) then
      ! Copy points that are lower than the zero-separation
      raw_tmp = mpl%msv%valr
      raw_tmp(iz) = one
      do i=1,n
        if (i/=iz) then
           if (inf(raw(i),raw(iz))) raw_tmp(i) = raw(i)/raw(iz)
        end if
      end do

      if (count(mpl%msv%isnot(raw_tmp))>1) then
         ! Check minimum value
         if (minval(raw_tmp)>scalethmin) then
            if (dir=='hor') then
               call mpl%abort('${subr}$','minimum horizontal diagnostic value is too high, increase nc3')
            elseif (dir=='ver') then
               call mpl%abort('${subr}$','minimum vertical diagnostic value is too high, increase nl0r')
            end if
         end if
 
         ! Initialization
         cost_min = huge_real

         ! Loop over thresholds
         do iscaleth=1,nscaleth
            ! Find support radius, lower value
            fit_r_m = mpl%msv%valr
            if (iz>1) then
               ip = iz
               do di=1,n
                  ! Check whether fit value has been found
                  if (mpl%msv%is(fit_r_m)) then
                     ! Index
                     im = iz-di

                     ! Check index validity
                     if (im>=1) then
                        ! Check raw value validity
                        if (raw_tmp(im)>zero) then
                           ! Check whether threshold has been crossed
                           if (inf(raw_tmp(im),scaleth(iscaleth))) then
                              ! Set fit value
                              fit_r_m = dist(im)+(dist(ip)-dist(im))*(scaleth(iscaleth)-raw_tmp(im))/(raw_tmp(ip)-raw_tmp(im))
                           else
                              ! Update index
                              ip = im
                           end if
                        end if
                     end if
                  end if
               end do
            end if

            ! Find support radius, upper value
            fit_r_p = mpl%msv%valr
            if (iz<n) then
               im = iz
               do di=1,n
                  ! Check whether fit value has been found
                  if (mpl%msv%is(fit_r_p)) then
                     ! Index
                     ip = iz+di

                     ! Check index validity
                     if (ip<=n) then
                        ! Check raw value validity
                        if (raw_tmp(ip)>zero) then
                           ! Check whether threshold has been crossed
                           if (inf(raw_tmp(ip),scaleth(iscaleth))) then
                              ! Set fit value
                              fit_r_p = dist(im)+(dist(ip)-dist(im))*(scaleth(iscaleth)-raw_tmp(im))/(raw_tmp(ip)-raw_tmp(im))
                           else
                              ! Update index
                              im = ip
                           end if
                        end if
                     end if
                  end if
               end do
            end if

            ! Gather values
            if (mpl%msv%isnot(fit_r_m).and.mpl%msv%isnot(fit_r_p)) then
               fit_r = min(fit_r_m,fit_r_p)
            elseif (mpl%msv%isnot(fit_r_m)) then
               fit_r = fit_r_m
            elseif (mpl%msv%isnot(fit_r_p)) then
               fit_r = fit_r_p
            else
               fit_r = mpl%msv%valr
               if (present(fit_pk)) fit_pk = mpl%msv%valr
            end if
            
            ! Check positivity
            if (inf(fit_r,zero)) fit_r = mpl%msv%valr

            if (mpl%msv%isnot(fit_r)) then
               if (present(fit_pk)) then
                  ! Optimize peakness (brute-force)
                  do ipk=1,npk
                     if (dir=='hor') then
                        fit_r_test = fit_r/scaleh(iscaleth,ipk)
                     elseif (dir=='ver') then
                        fit_r_test = fit_r/scalev(iscaleth,ipk)
                     end if
                     fit_pk_test = pkmin+(ipk-1)*dpk
                     call fit_diag(mpl,n,dist,dir,fit_r_test,fit_pk_test,fit)
                     cost = sum((fit-raw)**2)
                     if (inf(cost,cost_min)) then
                        cost_min = cost
                        fit_r_min = fit_r_test
                        fit_pk_min = fit_pk_test
                     end if
                  end do
               else
                  ! Use default peakness
                  if (dir=='hor') then
                     fit_r_test = fit_r/scalehdef(iscaleth)
                     fit_pk_test = pkhdef
                  elseif (dir=='ver') then
                     fit_r_test = fit_r/scalevdef(iscaleth)
                     fit_pk_test = pkvdef
                  end if
                  call fit_diag(mpl,n,dist,dir,fit_r_test,fit_pk_test,fit)
                  cost = sum((fit-raw)**2)
                  if (inf(cost,cost_min)) then
                     cost_min = cost
                     fit_r_min = fit_r_test
                  end if
               end if
            end if
         end do

         ! Set final support radius and peakness
         fit_r = fit_r_min
         if (present(fit_pk)) fit_pk = fit_pk_min
      else
         ! All positive-separation points are missing
         fit_r = mpl%msv%valr
      end if
   else
      ! Only one point, zero radius
      fit_r = zero
   end if
else
   ! Zero-separation point is negative
   fit_r = mpl%msv%valr
end if

! Probe out
@:probe_out()

end subroutine fit_fast_fit

!----------------------------------------------------------------------
! Subroutine: fit_ver_smooth
!> Homogeneous smoothing of a vertical profile
!----------------------------------------------------------------------
subroutine fit_ver_smooth(mpl,n,x,rv,profile)

implicit none

! Passed variables
type(mpl_type),intent(inout) :: mpl         !< MPI data
integer,intent(in) :: n                     !< Vector size
real(kind_real),intent(in) :: x(n)          !< Coordinate
real(kind_real),intent(in) :: rv            !< Filtering support radius
real(kind_real),intent(inout) :: profile(n) !< Vertical profile

! Local variables
integer :: i,j
real(kind_real) :: kernel(n,n),distnorm,profile_init(n),norm

! Set name
@:set_name(fit_ver_smooth)

! Probe in
@:probe_in()

if (n>1) then
   if (rv<zero) call mpl%abort('${subr}$','negative filtering support radius')

   if ((rv>zero).and.mpl%msv%isanynot(profile)) then
      ! Vertical smoothing kernel
      kernel = zero
      do i=1,n
         do j=1,n
            if (mpl%msv%isnot(profile(i)).and.mpl%msv%isnot(profile(j))) then
               ! Gaspari-Cohn (1999) function
               distnorm = abs(x(j)-x(i))/rv
               kernel(i,j) = fit_func(mpl,'ver',distnorm,zero)
            end if
         end do
      end do

      ! Apply kernel
      profile_init = profile
      profile = zero
      do i=1,n
         norm = zero
         do j=1,n
            profile(i) = profile(i)+kernel(i,j)*profile_init(j)
            norm = norm+kernel(i,j)
         end do
         if (norm>zero) then
            profile(i) = profile(i)/norm
         else
            profile(i) = mpl%msv%valr
         end if
      end do
   end if
end if

! Probe out
@:probe_out()

end subroutine fit_ver_smooth

!----------------------------------------------------------------------
! Subroutine: fit_ver_fill
!> Missing values filling of a vertical profile
!----------------------------------------------------------------------
subroutine fit_ver_fill(mpl,n,x,profile)

implicit none

! Passed variables
type(mpl_type),intent(inout) :: mpl         !< MPI data
integer,intent(in) :: n                     !< Vector size
real(kind_real),intent(in) :: x(n)          !< Coordinate
real(kind_real),intent(inout) :: profile(n) !< Vertical profile

! Local variables
integer :: i,j,iinf,isup
real(kind_real) :: profile_init(n)

! Set name
@:set_name(fit_ver_fill)

! Probe in
@:probe_in()

if (mpl%msv%isanynot(profile)) then
   ! Initialization
   profile_init = profile
   iinf = mpl%msv%vali

   do i=1,n
      if (mpl%msv%isnot(profile_init(i))) then
         ! Valid inferior point
         iinf = i
      else
         ! Look for a superior point
         isup = mpl%msv%vali
         j = i+1
         do while ((j<=n).and.(mpl%msv%is(isup)))
            if (mpl%msv%isnot(profile_init(j))) isup = j
            j = j+1
         end do

         if (mpl%msv%isnot(iinf).and.mpl%msv%isnot(isup)) then
            ! Interpolation
            profile(i) = profile_init(iinf)+(x(i)-x(iinf))*(profile_init(isup)-profile_init(iinf))/(x(isup)-x(iinf))
         elseif (mpl%msv%isnot(isup)) then
            ! Extrapolation with nearest superior point
            profile(i) = profile(isup)
         elseif (mpl%msv%isnot(iinf)) then
            ! Extrapolation with nearest inferior point
            profile(i) = profile(iinf)
         else
            call mpl%abort('${subr}$','too many missing values')
         end if
      end if
   end do
end if

! Probe out
@:probe_out()

end subroutine fit_ver_fill

end module tools_fit
