#:include 'instrumentation.fypp'
!----------------------------------------------------------------------
! Module: type_avg_blk
!> Averaged statistics block derived type
! Author: Benjamin Menetrier
! Licensing: this code is distributed under the CeCILL-C license
! Copyright 2015-... UCAR, CERFACS, METEO-FRANCE and IRIT
!----------------------------------------------------------------------
module type_avg_blk

use fckit_mpi_module, only: fckit_mpi_sum,fckit_mpi_min,fckit_mpi_max
use tools_const, only: zero,one,two,three
use tools_func, only: histogram,zss_maxval,zss_minval,zss_sum,zss_count
use tools_kinds, only: kind_real,huge_real
use tools_netcdf, only: create_file,define_grp,define_dim,define_var,put_var,close_file
use tools_repro, only: sup,inf
use type_geom, only: geom_type
use type_mom_blk, only: mom_blk_type
use type_mpl, only: mpl_type
use type_nam, only: nam_type
@:use_probe()
use type_samp, only: samp_type

implicit none

! Averaged statistics block derived type
type avg_blk_type
   integer :: ic2a                                         !< Local index
   integer :: iv                                           !< Variable index
   integer :: ne                                           !< Ensemble size
   integer :: nsub                                         !< Sub-ensembles number
   real(kind_real),allocatable :: nc1a(:,:,:,:)            !< Number of points in subset Sc1 on halo A
   real(kind_real),allocatable :: m11(:,:,:,:)             !< Covariance average
   real(kind_real),allocatable :: m11m11(:,:,:,:,:,:)      !< Product of covariances average
   real(kind_real),allocatable :: m2m2(:,:,:,:,:,:)        !< Product of variances average
   real(kind_real),allocatable :: m22(:,:,:,:,:)           !< Fourth-order centered moment average
   real(kind_real),allocatable :: nc1a_cor(:,:,:,:)        !< Number of points in subset Sc1 on halo A with valid correlations
   real(kind_real),allocatable :: cor(:,:,:,:)             !< Correlation average
   real(kind_real),allocatable :: m11asysq(:,:,:,:)        !< Squared asymptotic covariance average
   real(kind_real),allocatable :: m2m2asy(:,:,:,:)         !< Product of asymptotic variances average
   real(kind_real),allocatable :: m22asy(:,:,:,:)          !< Asymptotic fourth-order centered moment average
   real(kind_real),allocatable :: m11sq(:,:,:,:)           !< Squared covariance average for several ensemble sizes
   real(kind_real),allocatable :: m11_bins(:,:,:,:,:)      !< Covariance histrogram bins
   real(kind_real),allocatable :: m11_hist(:,:,:,:,:)      !< Covariance histrogram values
   real(kind_real),allocatable :: m11m11_bins(:,:,:,:,:)   !< Product of covariances  histrogram bins
   real(kind_real),allocatable :: m11m11_hist(:,:,:,:,:)   !< Product of covariances  histrogram values
   real(kind_real),allocatable :: m2m2_bins(:,:,:,:,:)     !< Product of variances  histrogram bins
   real(kind_real),allocatable :: m2m2_hist(:,:,:,:,:)     !< Product of variances  histrogram values
   real(kind_real),allocatable :: m22_bins(:,:,:,:,:)      !< Fourth-order centered moment  histrogram bins
   real(kind_real),allocatable :: m22_hist(:,:,:,:,:)      !< Fourth-order centered moment  histrogram values
   real(kind_real),allocatable :: cor_bins(:,:,:,:,:)      !< Correlation histrogram bins
   real(kind_real),allocatable :: cor_hist(:,:,:,:,:)      !< Correlation histrogram values
contains
   procedure :: avg_blk_alloc_blk
   procedure :: avg_blk_alloc_grp
   generic :: alloc => avg_blk_alloc_blk,avg_blk_alloc_grp
   procedure :: dealloc => avg_blk_dealloc
   procedure :: write => avg_blk_write
   procedure :: compute_global => avg_blk_compute_global
   procedure :: compute_local => avg_blk_compute_local
   procedure :: compute_asy => avg_blk_compute_asy
end type avg_blk_type

private
public :: avg_blk_type

contains

!----------------------------------------------------------------------
! Subroutine: avg_blk_alloc_blk
!> Allocation
!----------------------------------------------------------------------
subroutine avg_blk_alloc_blk(avg_blk,nam,geom,ic2a,iv,ne,nsub)

implicit none

! Passed variables
class(avg_blk_type),intent(inout) :: avg_blk !< Averaged statistics block
type(nam_type),intent(in) :: nam             !< Namelist
type(geom_type),intent(in) :: geom           !< Geometry
integer,intent(in) :: ic2a                   !< Local index
integer,intent(in) :: iv                     !< Variable index
integer,intent(in) :: ne                     !< Ensemble size
integer,intent(in) :: nsub                   !< Sub-ensembles number

! Set name
@:set_name(avg_blk_alloc_blk)

! Probe in
@:probe_in()

! Set attributes
avg_blk%ic2a = ic2a
avg_blk%iv = iv
avg_blk%ne = ne
avg_blk%nsub = nsub

! Allocation
if (.not.allocated(avg_blk%nc1a)) then
   if ((ic2a==0).or.nam%local_diag) then
      allocate(avg_blk%nc1a(nam%nc3,nam%nc4,nam%nl0r,geom%nl0))
      allocate(avg_blk%m11(nam%nc3,nam%nc4,nam%nl0r,geom%nl0))
      allocate(avg_blk%m11m11(nam%nc3,nam%nc4,nam%nl0r,geom%nl0,avg_blk%nsub,avg_blk%nsub))
      allocate(avg_blk%m2m2(nam%nc3,nam%nc4,nam%nl0r,geom%nl0,avg_blk%nsub,avg_blk%nsub))
      allocate(avg_blk%m22(nam%nc3,nam%nc4,nam%nl0r,geom%nl0,avg_blk%nsub))
      allocate(avg_blk%nc1a_cor(nam%nc3,nam%nc4,nam%nl0r,geom%nl0))
      allocate(avg_blk%cor(nam%nc3,nam%nc4,nam%nl0r,geom%nl0))
      allocate(avg_blk%m11asysq(nam%nc3,nam%nc4,nam%nl0r,geom%nl0))
      allocate(avg_blk%m2m2asy(nam%nc3,nam%nc4,nam%nl0r,geom%nl0))
      allocate(avg_blk%m22asy(nam%nc3,nam%nc4,nam%nl0r,geom%nl0))
      allocate(avg_blk%m11sq(nam%nc3,nam%nc4,nam%nl0r,geom%nl0))
   end if
   if ((nam%avg_nbins>0).and.(ic2a==0)) then
      allocate(avg_blk%m11_bins(nam%avg_nbins+1,nam%nc3,nam%nc4,nam%nl0r,geom%nl0))
      allocate(avg_blk%m11_hist(nam%avg_nbins,nam%nc3,nam%nc4,nam%nl0r,geom%nl0))
      allocate(avg_blk%m11m11_bins(nam%avg_nbins+1,nam%nc3,nam%nc4,nam%nl0r,geom%nl0))
      allocate(avg_blk%m11m11_hist(nam%avg_nbins,nam%nc3,nam%nc4,nam%nl0r,geom%nl0))
      allocate(avg_blk%m2m2_bins(nam%avg_nbins+1,nam%nc3,nam%nc4,nam%nl0r,geom%nl0))
      allocate(avg_blk%m2m2_hist(nam%avg_nbins,nam%nc3,nam%nc4,nam%nl0r,geom%nl0))
      allocate(avg_blk%m22_bins(nam%avg_nbins+1,nam%nc3,nam%nc4,nam%nl0r,geom%nl0))
      allocate(avg_blk%m22_hist(nam%avg_nbins,nam%nc3,nam%nc4,nam%nl0r,geom%nl0))
      allocate(avg_blk%cor_bins(nam%avg_nbins+1,nam%nc3,nam%nc4,nam%nl0r,geom%nl0))
      allocate(avg_blk%cor_hist(nam%avg_nbins,nam%nc3,nam%nc4,nam%nl0r,geom%nl0))
   end if
end if

! Probe out
@:probe_out()

end subroutine avg_blk_alloc_blk

!----------------------------------------------------------------------
! Subroutine: avg_blk_alloc_grp
!> Allocation
!----------------------------------------------------------------------
subroutine avg_blk_alloc_grp(avg_blk,nam,geom,ic2a)

implicit none

! Passed variables
class(avg_blk_type),intent(inout) :: avg_blk !< Averaged statistics block
type(nam_type),intent(in) :: nam             !< Namelist
type(geom_type),intent(in) :: geom           !< Geometry
integer,intent(in) :: ic2a                   !< Local index

! Set name
@:set_name(avg_blk_alloc_grp)

! Probe in
@:probe_in()

! Set attribute
avg_blk%ic2a = ic2a
avg_blk%iv = 0
avg_blk%ne = 0
avg_blk%nsub = 0

! Allocation
if (.not.allocated(avg_blk%nc1a)) then
   if ((ic2a==0).or.nam%local_diag) then
      allocate(avg_blk%nc1a(nam%nc3,nam%nc4,nam%nl0r,geom%nl0))
      allocate(avg_blk%m11(nam%nc3,nam%nc4,nam%nl0r,geom%nl0))
      allocate(avg_blk%nc1a_cor(nam%nc3,nam%nc4,nam%nl0r,geom%nl0))
      allocate(avg_blk%cor(nam%nc3,nam%nc4,nam%nl0r,geom%nl0))
      allocate(avg_blk%m11asysq(nam%nc3,nam%nc4,nam%nl0r,geom%nl0))
      allocate(avg_blk%m11sq(nam%nc3,nam%nc4,nam%nl0r,geom%nl0))
   end if
end if

! Probe out
@:probe_out()

end subroutine avg_blk_alloc_grp

!----------------------------------------------------------------------
! Subroutine: avg_blk_dealloc
!> Release memory
!----------------------------------------------------------------------
subroutine avg_blk_dealloc(avg_blk)

implicit none

! Passed variables
class(avg_blk_type),intent(inout) :: avg_blk !< Averaged statistics block

! Set name
@:set_name(avg_blk_dealloc)

! Probe in
@:probe_in()

! Allocation
if (allocated(avg_blk%nc1a)) deallocate(avg_blk%nc1a)
if (allocated(avg_blk%m11)) deallocate(avg_blk%m11)
if (allocated(avg_blk%m11m11)) deallocate(avg_blk%m11m11)
if (allocated(avg_blk%m2m2)) deallocate(avg_blk%m2m2)
if (allocated(avg_blk%nc1a_cor)) deallocate(avg_blk%nc1a_cor)
if (allocated(avg_blk%cor)) deallocate(avg_blk%cor)
if (allocated(avg_blk%m11asysq)) deallocate(avg_blk%m11asysq)
if (allocated(avg_blk%m2m2asy)) deallocate(avg_blk%m2m2asy)
if (allocated(avg_blk%m11sq)) deallocate(avg_blk%m11sq)
if (allocated(avg_blk%m11_bins)) deallocate(avg_blk%m11_bins)
if (allocated(avg_blk%m11_hist)) deallocate(avg_blk%m11_hist)
if (allocated(avg_blk%m11m11_bins)) deallocate(avg_blk%m11m11_bins)
if (allocated(avg_blk%m11m11_hist)) deallocate(avg_blk%m11m11_hist)
if (allocated(avg_blk%m2m2_bins)) deallocate(avg_blk%m2m2_bins)
if (allocated(avg_blk%m2m2_hist)) deallocate(avg_blk%m2m2_hist)
if (allocated(avg_blk%m22_bins)) deallocate(avg_blk%m22_bins)
if (allocated(avg_blk%m22_hist)) deallocate(avg_blk%m22_hist)
if (allocated(avg_blk%cor_bins)) deallocate(avg_blk%cor_bins)
if (allocated(avg_blk%cor_hist)) deallocate(avg_blk%cor_hist)

! Probe out
@:probe_out()

end subroutine avg_blk_dealloc

!----------------------------------------------------------------------
! Subroutine: avg_blk_write
!> Write
!----------------------------------------------------------------------
subroutine avg_blk_write(avg_blk,mpl,nam,geom,filename)

implicit none

! Passed variables
class(avg_blk_type),intent(inout) :: avg_blk !< Averaged statistics block
type(mpl_type),intent(inout) :: mpl          !< MPI data
type(nam_type),intent(in) :: nam             !< Namelist
type(geom_type),intent(in) :: geom           !< Geometry
character(len=*),intent(in) :: filename      !< File name

! Local variables
integer :: ncid,grpid,nc3_id,nl0r_id,nl0_id,nbinsp1_id,nbins_id,disth_id,vert_coord_id,l0rl0_to_l0_id
integer :: m11_bins_id,m11_hist_id,m11m11_bins_id,m11m11_hist_id,m2m2_bins_id,m2m2_hist_id,m22_bins_id,m22_hist_id
integer :: cor_bins_id,cor_hist_id
character(len=1024) :: grpname

! Set name
@:set_name(avg_blk_write)

! Probe in
@:probe_in()

! Create file
ncid = create_file(mpl,filename,0)

! Get group name
call nam%alias(nam%variables(avg_blk%iv),grpname)

! Define group
grpid = define_grp(mpl,ncid,grpname)

! Define dimensions
nc3_id = define_dim(mpl,grpid,'nc3',nam%nc3)
nl0r_id = define_dim(mpl,grpid,'nl0r',nam%nl0r)
nl0_id = define_dim(mpl,grpid,'nl0',geom%nl0)
nbinsp1_id = define_dim(mpl,grpid,'nbinsp1',nam%avg_nbins+1)
nbins_id = define_dim(mpl,grpid,'nbins',nam%avg_nbins)

! Define coordinates
disth_id = define_var(mpl,grpid,'disth','real',(/nc3_id/))
vert_coord_id = define_var(mpl,grpid,'vert_coord','real',(/nl0_id/))

! Define variables
l0rl0_to_l0_id = define_var(mpl,grpid,'l0rl0_to_l0','int',(/nl0r_id,nl0_id/))
m11_bins_id = define_var(mpl,grpid,'m11_bins','real',(/nbinsp1_id,nc3_id,nl0r_id,nl0_id/))
m11_hist_id = define_var(mpl,grpid,'m11_hist','real',(/nbins_id,nc3_id,nl0r_id,nl0_id/))
m11m11_bins_id = define_var(mpl,grpid,'m11m11_bins','real',(/nbinsp1_id,nc3_id,nl0r_id,nl0_id/))
m11m11_hist_id = define_var(mpl,grpid,'m11m11_hist','real',(/nbins_id,nc3_id,nl0r_id,nl0_id/))
m2m2_bins_id = define_var(mpl,grpid,'m2m2_bins','real',(/nbinsp1_id,nc3_id,nl0r_id,nl0_id/))
m2m2_hist_id = define_var(mpl,grpid,'m2m2_hist','real',(/nbins_id,nc3_id,nl0r_id,nl0_id/))
m22_bins_id = define_var(mpl,grpid,'m22_bins','real',(/nbinsp1_id,nc3_id,nl0r_id,nl0_id/))
m22_hist_id = define_var(mpl,grpid,'m22_hist','real',(/nbins_id,nc3_id,nl0r_id,nl0_id/))
cor_bins_id = define_var(mpl,grpid,'cor_bins','real',(/nbinsp1_id,nc3_id,nl0r_id,nl0_id/))
cor_hist_id = define_var(mpl,grpid,'cor_hist','real',(/nbins_id,nc3_id,nl0r_id,nl0_id/))

! Write coordinates
call put_var(mpl,grpid,disth_id,geom%disth(1:nam%nc3))
call put_var(mpl,grpid,vert_coord_id,geom%vert_coordavg)

! Write variables
call put_var(mpl,grpid,l0rl0_to_l0_id,geom%l0rl0_to_l0)
call put_var(mpl,grpid,m11_bins_id,avg_blk%m11_bins)
call put_var(mpl,grpid,m11_hist_id,avg_blk%m11_hist)
call put_var(mpl,grpid,m11m11_bins_id,avg_blk%m11m11_bins)
call put_var(mpl,grpid,m11m11_hist_id,avg_blk%m11m11_hist)
call put_var(mpl,grpid,m2m2_bins_id,avg_blk%m2m2_bins)
call put_var(mpl,grpid,m2m2_hist_id,avg_blk%m2m2_hist)
call put_var(mpl,grpid,m22_bins_id,avg_blk%m22_bins)
call put_var(mpl,grpid,m22_hist_id,avg_blk%m22_hist)
call put_var(mpl,grpid,cor_bins_id,avg_blk%cor_bins)
call put_var(mpl,grpid,cor_hist_id,avg_blk%cor_hist)

! Close file
call close_file(mpl,ncid)

! Probe out
@:probe_out()

end subroutine avg_blk_write

!----------------------------------------------------------------------
! Subroutine: avg_blk_compute_global
!> Compute globally averaged statistics via spatial-angular erogodicity assumption
!----------------------------------------------------------------------
subroutine avg_blk_compute_global(avg_blk,mpl,nam,geom,samp,mom_blk)

implicit none

! Passed variables
class(avg_blk_type),intent(inout) :: avg_blk !< Averaged statistics block
type(mpl_type),intent(inout) :: mpl          !< MPI data
type(nam_type),intent(in) :: nam             !< Namelist
type(geom_type),intent(in) :: geom           !< Geometry
type(samp_type),intent(in) :: samp           !< Sampling
type(mom_blk_type),intent(in) :: mom_blk     !< Moments

! Local variables
integer :: il0,jl0,jl0r,jc3,jc4,isub,jsub,ic1a,nc1a,nc1a_cor,n1,n2,npack,offset,ntmp
real(kind_real) :: m2_1,m2_2
real(kind_real) :: min_m11,max_m11,min_m11m11,max_m11m11,min_m2m2,max_m2m2,min_m22,max_m22,min_cor,max_cor
real(kind_real) :: norm,den,gen_kurt
real(kind_real),allocatable :: list_m11(:),list_m11m11(:,:,:),list_m2m2(:,:,:),list_m22(:,:),list_cor(:)
real(kind_real),allocatable :: list1(:),list2(:)
real(kind_real),allocatable :: sbuf(:),rbuf(:)
logical :: valid

! Set name
@:set_name(avg_blk_compute_global)

! Probe in
@:probe_in()

! Allocation
allocate(list_m11(samp%nc1a))
allocate(list_m11m11(samp%nc1a,avg_blk%nsub,avg_blk%nsub))
allocate(list_m2m2(samp%nc1a,avg_blk%nsub,avg_blk%nsub))
allocate(list_m22(samp%nc1a,avg_blk%nsub))
allocate(list_cor(samp%nc1a))

! Average
do il0=1,geom%nl0
   do jl0r=1,nam%nl0r
      jl0 = geom%l0rl0_to_l0(jl0r,il0)

      do jc4=1,nam%nc4
         do jc3=1,nam%nc3
            ! Fill lists
            !$omp parallel do schedule(static) private(ic1a,valid,den,gen_kurt,m2_1,m2_2,isub,jsub)
            do ic1a=1,samp%nc1a
               ! Check mask validity
               valid = samp%smask_c1a(ic1a,il0).and.samp%smask_c3a(ic1a,jc3,jc4,jl0)

               if (valid) then
                  ! Check general kurtosis
                  do isub=1,avg_blk%nsub
                     den = two*mom_blk%m11(ic1a,jc3,jc4,jl0r,il0,isub)**2+mom_blk%m2_1(ic1a,il0,isub)*mom_blk%m2_2(ic1a,jc3,jc4, &
 & jl0,isub)
                     if (den>zero) then
                        gen_kurt = three*mom_blk%m22(ic1a,jc3,jc4,jl0r,il0,isub)/den
                        if (gen_kurt>nam%gen_kurt_th) valid = .false.
                     else
                        valid = .false.
                     end if
                  end do
               end if

               if (valid) then
                  ! Averages for diagnostics
                  list_m11(ic1a) = sum(mom_blk%m11(ic1a,jc3,jc4,jl0r,il0,:))/real(avg_blk%nsub,kind_real)
                  do isub=1,avg_blk%nsub
                     do jsub=1,avg_blk%nsub
                        list_m11m11(ic1a,jsub,isub) = mom_blk%m11(ic1a,jc3,jc4,jl0r,il0,isub)*mom_blk%m11(ic1a,jc3,jc4,jl0r,il0 &
 & ,jsub)
                        list_m2m2(ic1a,jsub,isub) = mom_blk%m2_1(ic1a,il0,isub)*mom_blk%m2_2(ic1a,jc3,jc4,jl0,jsub)
                     end do
                     list_m22(ic1a,isub) = mom_blk%m22(ic1a,jc3,jc4,jl0r,il0,isub)
                  end do

                  ! Correlation
                  m2_1 = sum(mom_blk%m2_1(ic1a,il0,:))/real(avg_blk%nsub,kind_real)
                  m2_2 = sum(mom_blk%m2_2(ic1a,jc3,jc4,jl0,:))/real(avg_blk%nsub,kind_real)
                  if ((m2_1>zero).and.(m2_2>zero)) then
                     list_cor(ic1a) = list_m11(ic1a)/sqrt(m2_1*m2_2)
                     if (sup(abs(list_cor(ic1a)),one)) list_cor(ic1a) = mpl%msv%valr
                  else
                     list_cor(ic1a) = mpl%msv%valr
                  end if
               else
                  ! Missing value
                  list_m11(ic1a) = mpl%msv%valr
                  do isub=1,avg_blk%nsub
                     do jsub=1,avg_blk%nsub
                        list_m11m11(ic1a,jsub,isub) = mpl%msv%valr
                        list_m2m2(ic1a,jsub,isub) = mpl%msv%valr
                     end do
                     list_m22(ic1a,isub) = mpl%msv%valr
                  end do
                  list_cor(ic1a) = mpl%msv%valr
               end if
            end do
            !$omp end parallel do

            ! Number of valid points
            if (samp%nc1a>0) then
               nc1a = zss_count(mpl%msv%isnot(list_m11))
               nc1a_cor = zss_count(mpl%msv%isnot(list_cor))
            else
               nc1a = 0
               nc1a_cor = 0
            end if
            avg_blk%nc1a(jc3,jc4,jl0r,il0) = real(nc1a,kind_real)
            avg_blk%nc1a_cor(jc3,jc4,jl0r,il0) = real(nc1a_cor,kind_real)

            ! Average
            if (nc1a>0) then
               avg_blk%m11(jc3,jc4,jl0r,il0) = zss_sum(list_m11,mask=mpl%msv%isnot(list_m11))
               do isub=1,avg_blk%nsub
                  do jsub=1,avg_blk%nsub
                     avg_blk%m11m11(jc3,jc4,jl0r,il0,jsub,isub) = zss_sum(list_m11m11(:,jsub,isub), &
 & mask=mpl%msv%isnot(list_m11m11(:,jsub,isub)))
                     avg_blk%m2m2(jc3,jc4,jl0r,il0,jsub,isub) = zss_sum(list_m2m2(:,jsub,isub), &
 & mask=mpl%msv%isnot(list_m2m2(:,jsub,isub)))
                  end do
                  avg_blk%m22(jc3,jc4,jl0r,il0,isub) = zss_sum(list_m22(:,isub),mask=mpl%msv%isnot(list_m22(:,isub)))
               end do
            else
               avg_blk%m11(jc3,jc4,jl0r,il0) = zero
               do isub=1,avg_blk%nsub
                  do jsub=1,avg_blk%nsub
                     avg_blk%m11m11(jc3,jc4,jl0r,il0,jsub,isub) = zero
                     avg_blk%m2m2(jc3,jc4,jl0r,il0,jsub,isub) = zero
                  end do
                  avg_blk%m22(jc3,jc4,jl0r,il0,isub) = zero
               end do
            end if
            if (nc1a_cor>0) then
               avg_blk%cor(jc3,jc4,jl0r,il0) = zss_sum(list_cor,mask=mpl%msv%isnot(list_cor))
            else
               avg_blk%cor(jc3,jc4,jl0r,il0) = zero
            end if

            if (nam%avg_nbins>0) then
               ! Allocation
               n1 = samp%nc1a*avg_blk%nsub
               n2 = samp%nc1a*avg_blk%nsub**2
               allocate(list1(n1))
               allocate(list2(n2))

               ! Get min/max values for each task
               if (nc1a>0) then
                  min_m11 = zss_minval(list_m11,mask=mpl%msv%isnot(list_m11))
                  max_m11 = zss_maxval(list_m11,mask=mpl%msv%isnot(list_m11))
                  min_m11m11 = zss_minval(list_m11m11,mask=mpl%msv%isnot(list_m11m11))
                  max_m11m11 = zss_maxval(list_m11m11,mask=mpl%msv%isnot(list_m11m11))
                  min_m2m2 = zss_minval(list_m2m2,mask=mpl%msv%isnot(list_m2m2))
                  max_m2m2 = zss_maxval(list_m2m2,mask=mpl%msv%isnot(list_m2m2))
                  min_m22 = zss_minval(list_m22,mask=mpl%msv%isnot(list_m22))
                  max_m22 = zss_maxval(list_m22,mask=mpl%msv%isnot(list_m22))
                else
                  min_m11 = huge_real
                  max_m11 = -huge_real
                  min_m11m11 = huge_real
                  max_m11m11 = -huge_real
                  min_m2m2 = huge_real
                  max_m2m2 = -huge_real
                  min_m22 = huge_real
                  max_m22 = -huge_real
               end if
               if (nc1a>0) then
                  min_cor = zss_minval(list_cor,mask=mpl%msv%isnot(list_cor))
                  max_cor = zss_maxval(list_cor,mask=mpl%msv%isnot(list_cor))
               else
                  min_m11 = huge_real
                  max_cor = -huge_real
               end if

               ! Gather min/max values
               call mpl%f_comm%allreduce(min_m11,fckit_mpi_min())
               call mpl%f_comm%allreduce(max_m11,fckit_mpi_max())
               call mpl%f_comm%allreduce(min_m11m11,fckit_mpi_min())
               call mpl%f_comm%allreduce(max_m11m11,fckit_mpi_max())
               call mpl%f_comm%allreduce(min_m2m2,fckit_mpi_min())
               call mpl%f_comm%allreduce(max_m2m2,fckit_mpi_max())
               call mpl%f_comm%allreduce(min_m22,fckit_mpi_min())
               call mpl%f_comm%allreduce(max_m22,fckit_mpi_max())
               call mpl%f_comm%allreduce(min_cor,fckit_mpi_min())
               call mpl%f_comm%allreduce(max_cor,fckit_mpi_max())

               ! Compute histograms on each task
               call histogram(mpl,samp%nc1a,list_m11,nam%avg_nbins,min_m11,max_m11,avg_blk%m11_bins(:,jc3,jc4,jl0r,il0), &
 & avg_blk%m11_hist(:,jc3,jc4,jl0r,il0))
               list2 = reshape(list_m11m11,(/n2/))
               call histogram(mpl,n2,list2,nam%avg_nbins,min_m11m11,max_m11m11,avg_blk%m11m11_bins(:,jc3,jc4,jl0r,il0), &
 & avg_blk%m11m11_hist(:,jc3,jc4,jl0r,il0))
               list2 = reshape(list_m2m2,(/n2/))
               call histogram(mpl,n2,list2,nam%avg_nbins,min_m2m2,max_m2m2,avg_blk%m2m2_bins(:,jc3,jc4,jl0r,il0), &
 & avg_blk%m2m2_hist(:,jc3,jc4,jl0r,il0))
               list1 = reshape(list_m22,(/n1/))
               call histogram(mpl,n1,list1,nam%avg_nbins,min_m22,max_m22,avg_blk%m22_bins(:,jc3,jc4,jl0r,il0), &
 & avg_blk%m22_hist(:,jc3,jc4,jl0r,il0))
               call histogram(mpl,samp%nc1a,list_cor,nam%avg_nbins,min_cor,max_cor,avg_blk%cor_bins(:,jc3,jc4,jl0r,il0), &
 & avg_blk%cor_hist(:,jc3,jc4,jl0r,il0))

               ! Release memory
               deallocate(list1)
               deallocate(list2)
            end if
         end do
      end do
   end do
end do

! Release memory
deallocate(list_m11)
deallocate(list_m11m11)
deallocate(list_m2m2)
deallocate(list_m22)
deallocate(list_cor)

if (mpl%nproc>1) then
   ! Get packing size
   ntmp = nam%nc3*nam%nc4*nam%nl0r*geom%nl0
   npack = (4+avg_blk%nsub+2*avg_blk%nsub**2)*ntmp
   if (nam%avg_nbins>0) npack = npack+5*nam%avg_nbins*ntmp

   ! Allocation
   allocate(sbuf(npack))
   allocate(rbuf(npack))

   ! Pack data
   offset = 0
   sbuf = zero
   sbuf(offset+1:offset+ntmp) = reshape(avg_blk%nc1a,(/ntmp/))
   offset = offset+ntmp
   sbuf(offset+1:offset+ntmp) = reshape(avg_blk%m11,(/ntmp/))
   offset = offset+ntmp
   sbuf(offset+1:offset+ntmp*avg_blk%nsub**2) = reshape(avg_blk%m11m11,(/ntmp*avg_blk%nsub**2/))
   offset = offset+ntmp*avg_blk%nsub**2
   sbuf(offset+1:offset+ntmp*avg_blk%nsub**2) = reshape(avg_blk%m2m2,(/ntmp*avg_blk%nsub**2/))
   offset = offset+ntmp*avg_blk%nsub**2
   sbuf(offset+1:offset+ntmp*avg_blk%nsub) = reshape(avg_blk%m22,(/ntmp*avg_blk%nsub/))
   offset = offset+ntmp*avg_blk%nsub
   sbuf(offset+1:offset+ntmp) = reshape(avg_blk%nc1a_cor,(/ntmp/))
   offset = offset+ntmp
   sbuf(offset+1:offset+ntmp) = reshape(avg_blk%cor,(/ntmp/))
   offset = offset+ntmp
   if (nam%avg_nbins>0) then
      sbuf(offset+1:offset+nam%avg_nbins*ntmp) = reshape(avg_blk%m11_hist,(/nam%avg_nbins*ntmp/))
      offset = offset+nam%avg_nbins*ntmp
      sbuf(offset+1:offset+nam%avg_nbins*ntmp) = reshape(avg_blk%m11m11_hist,(/nam%avg_nbins*ntmp/))
      offset = offset+nam%avg_nbins*ntmp
      sbuf(offset+1:offset+nam%avg_nbins*ntmp) = reshape(avg_blk%m2m2_hist,(/nam%avg_nbins*ntmp/))
      offset = offset+nam%avg_nbins*ntmp
      sbuf(offset+1:offset+nam%avg_nbins*ntmp) = reshape(avg_blk%m22_hist,(/nam%avg_nbins*ntmp/))
      offset = offset+nam%avg_nbins*ntmp
      sbuf(offset+1:offset+nam%avg_nbins*ntmp) = reshape(avg_blk%cor_hist,(/nam%avg_nbins*ntmp/))
      offset = offset+nam%avg_nbins*ntmp
   end if

   ! Reduce data
   call mpl%f_comm%allreduce(sbuf,rbuf,fckit_mpi_sum())

   ! Unpack data
   offset = 0
   avg_blk%nc1a = reshape(rbuf(offset+1:offset+ntmp),(/nam%nc3,nam%nc4,nam%nl0r,geom%nl0/))
   offset = offset+ntmp
   avg_blk%m11 = reshape(rbuf(offset+1:offset+ntmp),(/nam%nc3,nam%nc4,nam%nl0r,geom%nl0/))
   offset = offset+ntmp
   avg_blk%m11m11 = reshape(rbuf(offset+1:offset+ntmp*avg_blk%nsub**2), &
 & (/nam%nc3,nam%nc4,nam%nl0r,geom%nl0,avg_blk%nsub,avg_blk%nsub/))
   offset = offset+ntmp*avg_blk%nsub**2
   avg_blk%m2m2 = reshape(rbuf(offset+1:offset+ntmp*avg_blk%nsub**2), &
 & (/nam%nc3,nam%nc4,nam%nl0r,geom%nl0,avg_blk%nsub,avg_blk%nsub/))
   offset = offset+ntmp*avg_blk%nsub**2
   avg_blk%m22 = reshape(rbuf(offset+1:offset+ntmp*avg_blk%nsub), &
 & (/nam%nc3,nam%nc4,nam%nl0r,geom%nl0,avg_blk%nsub/))
   offset = offset+ntmp*avg_blk%nsub
   avg_blk%nc1a_cor = reshape(rbuf(offset+1:offset+ntmp),(/nam%nc3,nam%nc4,nam%nl0r,geom%nl0/))
   offset = offset+ntmp
   avg_blk%cor = reshape(rbuf(offset+1:offset+ntmp),(/nam%nc3,nam%nc4,nam%nl0r,geom%nl0/))
   offset = offset+ntmp
   if (nam%avg_nbins>0) then
      avg_blk%m11_hist = reshape(rbuf(offset+1:offset+nam%avg_nbins*ntmp), &
 & (/nam%avg_nbins,nam%nc3,nam%nc4,nam%nl0r,geom%nl0/))
      offset = offset+nam%avg_nbins*ntmp
      avg_blk%m11m11_hist = reshape(rbuf(offset+1:offset+nam%avg_nbins*ntmp), &
 & (/nam%avg_nbins,nam%nc3,nam%nc4,nam%nl0r,geom%nl0/))
      offset = offset+nam%avg_nbins*ntmp
      avg_blk%m2m2_hist = reshape(rbuf(offset+1:offset+nam%avg_nbins*ntmp), &
 & (/nam%avg_nbins,nam%nc3,nam%nc4,nam%nl0r,geom%nl0/))
      offset = offset+nam%avg_nbins*ntmp
      avg_blk%m22_hist = reshape(rbuf(offset+1:offset+nam%avg_nbins*ntmp), &
 & (/nam%avg_nbins,nam%nc3,nam%nc4,nam%nl0r,geom%nl0/))
      offset = offset+nam%avg_nbins*ntmp
      avg_blk%cor_hist = reshape(rbuf(offset+1:offset+nam%avg_nbins*ntmp), &
 & (/nam%avg_nbins,nam%nc3,nam%nc4,nam%nl0r,geom%nl0/))
      offset = offset+nam%avg_nbins*ntmp
   end if

   ! Release memory
   deallocate(sbuf)
   deallocate(rbuf)
end if

! Normalize
!$omp parallel do schedule(static) private(il0,jl0r,jl0,jc3,jc4,isub,jsub,norm) shared(geom,avg_blk)
do il0=1,geom%nl0
   do jl0r=1,nam%nl0r
      do jc4=1,nam%nc4
         do jc3=1,nam%nc3
            if (avg_blk%nc1a(jc3,jc4,jl0r,il0)>zero) then
               norm = one/avg_blk%nc1a(jc3,jc4,jl0r,il0)
               avg_blk%m11(jc3,jc4,jl0r,il0) = avg_blk%m11(jc3,jc4,jl0r,il0)*norm
               do isub=1,avg_blk%nsub
                  do jsub=1,avg_blk%nsub
                     avg_blk%m11m11(jc3,jc4,jl0r,il0,jsub,isub) = avg_blk%m11m11(jc3,jc4,jl0r,il0,jsub,isub)*norm
                     avg_blk%m2m2(jc3,jc4,jl0r,il0,jsub,isub) = avg_blk%m2m2(jc3,jc4,jl0r,il0,jsub,isub)*norm
                  end do
                  avg_blk%m22(jc3,jc4,jl0r,il0,isub) = avg_blk%m22(jc3,jc4,jl0r,il0,isub)*norm
               end do
            else
               avg_blk%m11(jc3,jc4,jl0r,il0) = mpl%msv%valr
               do isub=1,avg_blk%nsub
                  do jsub=1,avg_blk%nsub
                     avg_blk%m11m11(jc3,jc4,jl0r,il0,jsub,isub) = mpl%msv%valr
                     avg_blk%m2m2(jc3,jc4,jl0r,il0,jsub,isub) = mpl%msv%valr
                  end do
                  avg_blk%m22(jc3,jc4,jl0r,il0,isub) = mpl%msv%valr
               end do
            end if
            if (avg_blk%nc1a_cor(jc3,jc4,jl0r,il0)>zero) then
               avg_blk%cor(jc3,jc4,jl0r,il0) = avg_blk%cor(jc3,jc4,jl0r,il0)/avg_blk%nc1a_cor(jc3,jc4,jl0r,il0)
            else
               avg_blk%cor(jc3,jc4,jl0r,il0) = mpl%msv%valr
            end if
            if (nam%avg_nbins>0) then
               if (sum(avg_blk%m11_hist(:,jc3,jc4,jl0r,il0))>zero) avg_blk%m11_hist(:,jc3,jc4,jl0r,il0) = &
 & avg_blk%m11_hist(:,jc3,jc4,jl0r,il0)/sum(avg_blk%m11_hist(:,jc3,jc4,jl0r,il0))
               if (sum(avg_blk%m11m11_hist(:,jc3,jc4,jl0r,il0))>zero) avg_blk%m11m11_hist(:,jc3,jc4,jl0r,il0) = &
 & avg_blk%m11m11_hist(:,jc3,jc4,jl0r,il0)/sum(avg_blk%m11m11_hist(:,jc3,jc4,jl0r,il0))
               if (sum(avg_blk%m2m2_hist(:,jc3,jc4,jl0r,il0))>zero) avg_blk%m2m2_hist(:,jc3,jc4,jl0r,il0) = &
 & avg_blk%m2m2_hist(:,jc3,jc4,jl0r,il0)/sum(avg_blk%m2m2_hist(:,jc3,jc4,jl0r,il0))
               if (sum(avg_blk%m22_hist(:,jc3,jc4,jl0r,il0))>zero) avg_blk%m22_hist(:,jc3,jc4,jl0r,il0) = &
 & avg_blk%m22_hist(:,jc3,jc4,jl0r,il0)/sum(avg_blk%m22_hist(:,jc3,jc4,jl0r,il0))
               if (sum(avg_blk%cor_hist(:,jc3,jc4,jl0r,il0))>zero) avg_blk%cor_hist(:,jc3,jc4,jl0r,il0) = &
 & avg_blk%cor_hist(:,jc3,jc4,jl0r,il0)/sum(avg_blk%cor_hist(:,jc3,jc4,jl0r,il0))
            end if
         end do
      end do
   end do
end do
!$omp end parallel do

! Probe out
@:probe_out()

end subroutine avg_blk_compute_global

!----------------------------------------------------------------------
! Subroutine: avg_blk_compute_local
!> Compute locally averaged statistics via spatial-angular erogodicity assumption
!----------------------------------------------------------------------
subroutine avg_blk_compute_local(avg_blk,mpl,nam,geom,samp,mom_blk)

implicit none

! Passed variables
class(avg_blk_type),intent(inout) :: avg_blk !< Averaged statistics block
type(mpl_type),intent(inout) :: mpl          !< MPI data
type(nam_type),intent(in) :: nam             !< Namelist
type(geom_type),intent(in) :: geom           !< Geometry
type(samp_type),intent(in) :: samp           !< Sampling
type(mom_blk_type),intent(in) :: mom_blk     !< Moments

! Local variables
integer :: il0,jl0,jl0r,jc3,jc4,isub,jsub,nc1max,ic1d,ic1u,i,nc1a,nc1a_cor
real(kind_real) :: m2_1,m2_2,norm,den,gen_kurt
real(kind_real),allocatable :: list_m11(:),list_m11m11(:,:,:),list_m2m2(:,:,:),list_m22(:,:),list_cor(:)
logical :: valid

! Set name
@:set_name(avg_blk_compute_local)

! Probe in
@:probe_in()

! Associate
associate(ic2a=>avg_blk%ic2a)

! Allocation
nc1max = zss_count(samp%local_mask(:,ic2a))
allocate(list_m11(nc1max))
allocate(list_m11m11(nc1max,avg_blk%nsub,avg_blk%nsub))
allocate(list_m2m2(nc1max,avg_blk%nsub,avg_blk%nsub))
allocate(list_m22(nc1max,avg_blk%nsub))
allocate(list_cor(nc1max))

! Average
do il0=1,geom%nl0
   do jl0r=1,nam%nl0r
      jl0 = geom%l0rl0_to_l0(jl0r,il0)

      do jc4=1,nam%nc4
         do jc3=1,nam%nc3
            ! Initialization
            list_m11 = mpl%msv%valr
            list_m11m11 = mpl%msv%valr
            list_m2m2 = mpl%msv%valr
            list_m22 = mpl%msv%valr
            list_cor = mpl%msv%valr
            i = 0

            ! Fill lists
            do ic1d=1,samp%nc1d
               ! Indices
               ic1u = samp%c1d_to_c1u(ic1d)

               ! Check mask validity
               valid = samp%local_mask(ic1u,ic2a).and.samp%smask_c1u(ic1u,il0).and.samp%smask_c1dc3(ic1d,jc3,jc4,jl0)

               if (valid) then
                  ! Check generalized kurtosis
                  do isub=1,avg_blk%nsub
                     den = two*mom_blk%m11(ic1d,jc3,jc4,jl0r,il0,isub)**2 &
 & +mom_blk%m2_1(ic1d,il0,isub)*mom_blk%m2_2(ic1d,jc3,jc4,jl0,isub)
                     if (abs(den)>zero) then
                        gen_kurt = three*mom_blk%m22(ic1d,jc3,jc4,jl0r,il0,isub)/den
                        if (gen_kurt>nam%gen_kurt_th) valid = .false.
                     else
                        valid = .false.
                     end if
                  end do
               end if

               if (valid) then
                  ! Update
                  i = i+1

                  ! Averages for diagnostics
                  list_m11(i) = sum(mom_blk%m11(ic1d,jc3,jc4,jl0r,il0,:))/real(avg_blk%nsub,kind_real)
                  do isub=1,avg_blk%nsub
                     do jsub=1,avg_blk%nsub
                        list_m11m11(i,jsub,isub) = mom_blk%m11(ic1d,jc3,jc4,jl0r,il0,isub)*mom_blk%m11(ic1d,jc3,jc4,jl0r,il0,jsub)
                        list_m2m2(i,jsub,isub) = mom_blk%m2_1(ic1d,il0,isub)*mom_blk%m2_2(ic1d,jc3,jc4,jl0,jsub)
                     end do
                     list_m22(i,isub) = mom_blk%m22(ic1d,jc3,jc4,jl0r,il0,isub)
                  end do

                  ! Correlation
                  m2_1 = sum(mom_blk%m2_1(ic1d,il0,:))/real(avg_blk%nsub,kind_real)
                  m2_2 = sum(mom_blk%m2_2(ic1d,jc3,jc4,jl0,:))/real(avg_blk%nsub,kind_real)
                  if ((m2_1>zero).and.(m2_2>zero)) then
                     list_cor(i) = list_m11(i)/sqrt(m2_1*m2_2)
                     if (sup(abs(list_cor(i)),one)) list_cor(i) = mpl%msv%valr
                  end if
               end if
            end do

            ! Number of valid points
            nc1a = zss_count(mpl%msv%isnot(list_m11))
            nc1a_cor = zss_count(mpl%msv%isnot(list_cor))
            avg_blk%nc1a(jc3,jc4,jl0r,il0) = real(nc1a,kind_real)
            avg_blk%nc1a_cor(jc3,jc4,jl0r,il0) = real(nc1a_cor,kind_real)

            ! Average
            if (nc1a>0) then
               avg_blk%m11(jc3,jc4,jl0r,il0) = sum(list_m11,mask=mpl%msv%isnot(list_m11))
               do isub=1,avg_blk%nsub
                  do jsub=1,avg_blk%nsub
                     avg_blk%m11m11(jc3,jc4,jl0r,il0,jsub,isub) = sum(list_m11m11(:,jsub,isub),mask=mpl%msv%isnot(list_m11))
                     avg_blk%m2m2(jc3,jc4,jl0r,il0,jsub,isub) = sum(list_m2m2(:,jsub,isub),mask=mpl%msv%isnot(list_m11))
                  end do
                  avg_blk%m22(jc3,jc4,jl0r,il0,isub) = sum(list_m22(:,isub),mask=mpl%msv%isnot(list_m11))
               end do
            else
               avg_blk%m11(jc3,jc4,jl0r,il0) = zero
               do isub=1,avg_blk%nsub
                  do jsub=1,avg_blk%nsub
                     avg_blk%m11m11(jc3,jc4,jl0r,il0,jsub,isub) = zero
                     avg_blk%m2m2(jc3,jc4,jl0r,il0,jsub,isub) = zero
                  end do
                  avg_blk%m22(jc3,jc4,jl0r,il0,isub) = zero
               end do
            end if
            if (nc1a_cor>0) then
               avg_blk%cor(jc3,jc4,jl0r,il0) = sum(list_cor,mask=mpl%msv%isnot(list_cor))
             else
               avg_blk%cor(jc3,jc4,jl0r,il0) = zero
            end if
         end do
      end do
   end do
end do

! Release memory
deallocate(list_m11)
deallocate(list_m11m11)
deallocate(list_m2m2)
deallocate(list_m22)
deallocate(list_cor)

! Normalize
!$omp parallel do schedule(static) private(il0,jl0r,jc3,jc4,isub,jsub,norm) shared(geom,avg_blk)
do il0=1,geom%nl0
   do jl0r=1,nam%nl0r
      do jc4=1,nam%nc4
         do jc3=1,nam%nc3
            if (avg_blk%nc1a(jc3,jc4,jl0r,il0)>zero) then
               norm = one/avg_blk%nc1a(jc3,jc4,jl0r,il0)
               avg_blk%m11(jc3,jc4,jl0r,il0) = avg_blk%m11(jc3,jc4,jl0r,il0)*norm
               do isub=1,avg_blk%nsub
                  do jsub=1,avg_blk%nsub
                     avg_blk%m11m11(jc3,jc4,jl0r,il0,jsub,isub) = avg_blk%m11m11(jc3,jc4,jl0r,il0,jsub,isub)*norm
                     avg_blk%m2m2(jc3,jc4,jl0r,il0,jsub,isub) = avg_blk%m2m2(jc3,jc4,jl0r,il0,jsub,isub)*norm
                   end do
                   avg_blk%m22(jc3,jc4,jl0r,il0,isub) = avg_blk%m22(jc3,jc4,jl0r,il0,isub)*norm
               end do
            else
               avg_blk%m11(jc3,jc4,jl0r,il0) = mpl%msv%valr
               do isub=1,avg_blk%nsub
                  do jsub=1,avg_blk%nsub
                     avg_blk%m11m11(jc3,jc4,jl0r,il0,jsub,isub) = mpl%msv%valr
                     avg_blk%m2m2(jc3,jc4,jl0r,il0,jsub,isub) = mpl%msv%valr
                  end do
                  avg_blk%m22(jc3,jc4,jl0r,il0,isub) = mpl%msv%valr
               end do
            end if
            if (avg_blk%nc1a_cor(jc3,jc4,jl0r,il0)>zero) then
               avg_blk%cor(jc3,jc4,jl0r,il0) = avg_blk%cor(jc3,jc4,jl0r,il0)/avg_blk%nc1a_cor(jc3,jc4,jl0r,il0)
            else
               avg_blk%cor(jc3,jc4,jl0r,il0) = mpl%msv%valr
            end if
         end do
      end do
   end do
end do
!$omp end parallel do

! End associate
end associate

! Probe out
@:probe_out()

end subroutine avg_blk_compute_local

!----------------------------------------------------------------------
! Subroutine: avg_blk_compute_asy
!> Compute asymptotic statistics
!----------------------------------------------------------------------
subroutine avg_blk_compute_asy(avg_blk,mpl,nam,geom,ne)

implicit none

! Passed variables
class(avg_blk_type),intent(inout) :: avg_blk !< Averaged statistics block
type(mpl_type),intent(inout) :: mpl          !< MPI data
type(nam_type),intent(in) :: nam             !< Namelist
type(geom_type),intent(in) :: geom           !< Geometry
integer,intent(in) :: ne                     !< Ensemble size

! Local variables
integer :: il0,jl0r,jc3,jc4,isub,jsub,n
real(kind_real) :: P1,P3,P4,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,P17
real(kind_real),allocatable :: m11asysq_gau(:,:),m2m2asy_gau(:,:),m11asysq(:,:),m2m2asy(:,:),m22asy(:)

! Set name
@:set_name(avg_blk_compute_asy)

! Probe in
@:probe_in()

! Associate
associate(ic2a=>avg_blk%ic2a)

if ((ic2a==0).or.nam%local_diag) then
   ! Ensemble size-dependent coefficients
   n = ne
   P1 = one/real(n,kind_real)
   P3 = one/real(n*(n-1),kind_real)
   P4 = one/real(n-1,kind_real)
   P14 = real(n**2-2*n+2,kind_real)/real(n*(n-1),kind_real)
   P16 = real(n,kind_real)/real(n-1,kind_real)

   ! Ensemble/sub-ensemble size-dependent coefficients
   n = avg_blk%ne/avg_blk%nsub
   P7 = real((n-1)*(n**2-3*n+1),kind_real)/real(n*(n-2)*(n-3),kind_real)
   P8 = real(n-1,kind_real)/real(n*(n-2)*(n-3),kind_real)
   P9 = -real(n,kind_real)/real((n-2)*(n-3),kind_real)
   P10 = -real((n-1)*(2*n-3),kind_real)/real(n*(n-2)*(n-3),kind_real)
   P11 = real(n*(n**2-2*n+3),kind_real)/real((n-1)*(n-2)*(n-3),kind_real)
   P12 = real(n*(n-1),kind_real)/real((n-2)*(n+1),kind_real)
   P13 = -real(n-1,kind_real)/real((n-2)*(n+1),kind_real)
   P15 = real((n-1)**2,kind_real)/real(n*(n-3),kind_real)
   P17 = real((n-1)**2,kind_real)/real((n-2)*(n+1),kind_real)

   ! Asymptotic statistics
   !$omp parallel do schedule(static) private(il0,jl0r,jc3,jc4,isub,jsub) firstprivate(m11asysq_gau,m2m2asy_gau), &
   !$omp&            firstprivate(m11asysq,m2m2asy,m22asy) shared(geom,avg_blk)
   do il0=1,geom%nl0
      do jl0r=1,nam%nl0r
         do jc4=1,nam%nc4
            do jc3=1,nam%nc3
               ! Allocation
               allocate(m11asysq_gau(avg_blk%nsub,avg_blk%nsub))
               allocate(m2m2asy_gau(avg_blk%nsub,avg_blk%nsub))
               allocate(m11asysq(avg_blk%nsub,avg_blk%nsub))
               allocate(m2m2asy(avg_blk%nsub,avg_blk%nsub))
               allocate(m22asy(avg_blk%nsub))

               ! Asymptotic statistics
               do isub=1,avg_blk%nsub
                  do jsub=1,avg_blk%nsub
                     if (isub==jsub) then
                        ! Diagonal terms

                        ! Gaussian approximation
                        m11asysq_gau(jsub,isub) = P17*avg_blk%m11m11(jc3,jc4,jl0r,il0,jsub,isub) &
 & +P13*avg_blk%m2m2(jc3,jc4,jl0r,il0,jsub,isub)
                        m2m2asy_gau(jsub,isub) = two*P13*avg_blk%m11m11(jc3,jc4,jl0r,il0,jsub,isub) &
 & +P12*avg_blk%m2m2(jc3,jc4,jl0r,il0,jsub,isub)

                        ! General case
                        m11asysq(jsub,isub) = P15*avg_blk%m11m11(jc3,jc4,jl0r,il0,jsub,isub) &
 & +P8*avg_blk%m2m2(jc3,jc4,jl0r,il0,jsub,isub)+P9*avg_blk%m22(jc3,jc4,jl0r,il0,jsub)
                        m2m2asy(jsub,isub) = two*P8*avg_blk%m11m11(jc3,jc4,jl0r,il0,jsub,isub) &
 & +P7*avg_blk%m2m2(jc3,jc4,jl0r,il0,jsub,isub)+P9*avg_blk%m22(jc3,jc4,jl0r,il0,jsub)
                        m22asy(jsub) = P10*(two*avg_blk%m11m11(jc3,jc4,jl0r,il0,jsub,isub)+avg_blk%m2m2(jc3,jc4,jl0r,il0,jsub, &
 & isub))+P11*avg_blk%m22(jc3,jc4,jl0r,il0,jsub)
                     else
                        ! Off-diagonal terms
                        m11asysq(jsub,isub) = avg_blk%m11m11(jc3,jc4,jl0r,il0,jsub,isub)
                        m2m2asy(jsub,isub) = avg_blk%m2m2(jc3,jc4,jl0r,il0,jsub,isub)
                     end if
                  end do
               end do

               ! Sum
               if (nam%gau_approx) then
                  ! Gaussian approximation
                  avg_blk%m11asysq(jc3,jc4,jl0r,il0) = sum(m11asysq_gau)/real(avg_blk%nsub**2,kind_real)
                  avg_blk%m2m2asy(jc3,jc4,jl0r,il0) = sum(m2m2asy_gau)/real(avg_blk%nsub**2,kind_real)
               else
                  ! General case
                  avg_blk%m11asysq(jc3,jc4,jl0r,il0) = sum(m11asysq)/real(avg_blk%nsub**2,kind_real)
                  avg_blk%m2m2asy(jc3,jc4,jl0r,il0) = sum(m2m2asy)/real(avg_blk%nsub**2,kind_real)
               end if
               avg_blk%m22asy(jc3,jc4,jl0r,il0) = sum(m22asy)/real(avg_blk%nsub,kind_real)

               ! Check positivity
               if (.not.(avg_blk%m11asysq(jc3,jc4,jl0r,il0)>zero)) avg_blk%m11asysq(jc3,jc4,jl0r,il0) = mpl%msv%valr
               if (.not.(avg_blk%m2m2asy(jc3,jc4,jl0r,il0)>zero)) avg_blk%m2m2asy(jc3,jc4,jl0r,il0) = mpl%msv%valr
               if (.not.(avg_blk%m22asy(jc3,jc4,jl0r,il0)>zero)) avg_blk%m22asy(jc3,jc4,jl0r,il0) = mpl%msv%valr

               ! Check Cauchy-Schwarz inequality
               if (inf(avg_blk%m2m2asy(jc3,jc4,jl0r,il0),avg_blk%m11asysq(jc3,jc4,jl0r,il0))) avg_blk%m11asysq(jc3,jc4,jl0r,il0) &
 & = mpl%msv%valr

               ! Squared covariance average
               if (nam%gau_approx) then
                  ! Gaussian approximation
                  if (mpl%msv%isnot(avg_blk%m11asysq(jc3,jc4,jl0r,il0)).and.mpl%msv%isnot(avg_blk%m2m2asy(jc3,jc4,jl0r,il0))) then
                     avg_blk%m11sq(jc3,jc4,jl0r,il0) = P16*avg_blk%m11asysq(jc3,jc4,jl0r,il0)+P4*avg_blk%m2m2asy(jc3,jc4,jl0r,il0)
                  else
                     avg_blk%m11sq(jc3,jc4,jl0r,il0) = mpl%msv%valr
                  end if
               else
                  ! General case
                  if (mpl%msv%isnot(avg_blk%m22asy(jc3,jc4,jl0r,il0)).and.mpl%msv%isnot(avg_blk%m11asysq(jc3,jc4,jl0r,il0)) &
 & .and.mpl%msv%isnot(avg_blk%m2m2asy(jc3,jc4,jl0r,il0))) then
                     avg_blk%m11sq(jc3,jc4,jl0r,il0) = P1*avg_blk%m22asy(jc3,jc4,jl0r,il0)+P14*avg_blk%m11asysq(jc3,jc4,jl0r,il0) &
 & +P3*avg_blk%m2m2asy(jc3,jc4,jl0r,il0)
                  else
                     avg_blk%m11sq(jc3,jc4,jl0r,il0) = mpl%msv%valr
                  end if
               end if

               ! Check value
               if (mpl%msv%isnot(avg_blk%m11sq(jc3,jc4,jl0r,il0))) then
                  ! Positive sampling noise variance
                  if (inf(avg_blk%m11sq(jc3,jc4,jl0r,il0),avg_blk%m11asysq(jc3,jc4,jl0r,il0))) avg_blk%m11sq(jc3,jc4,jl0r,il0) &
 & = mpl%msv%valr

                  ! Holder's inequality
                  if (inf(avg_blk%m11sq(jc3,jc4,jl0r,il0),avg_blk%m11(jc3,jc4,jl0r,il0)**2)) avg_blk%m11sq(jc3,jc4,jl0r,il0) &
 & = mpl%msv%valr
               end if

               ! Release memory
               deallocate(m11asysq_gau)
               deallocate(m2m2asy_gau)
               deallocate(m11asysq)
               deallocate(m2m2asy)
               deallocate(m22asy)
            end do
         end do
      end do
   end do
   !$omp end parallel do
end if

! End associate
end associate

! Probe out
@:probe_out()

end subroutine avg_blk_compute_asy

end module type_avg_blk
