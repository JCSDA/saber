#:include '../instrumentation.fypp'
!----------------------------------------------------------------------
! Module: type_mom
!> Moments derived type
! Author: Benjamin Menetrier
! Licensing: this code is distributed under the CeCILL-C license
! Copyright 2015-... UCAR, CERFACS, METEO-FRANCE and IRIT
!----------------------------------------------------------------------
module type_mom

use fckit_mpi_module, only: fckit_mpi_sum
!$ use omp_lib
use tools_const, only: zero,one,two,four
use tools_kinds, only: kind_real
use tools_netcdf, only: create_file,open_file,define_grp,inquire_grp,define_dim,check_dim,define_var,inquire_var,put_var,get_var, &
 & close_file
use tools_repro, only: eq
use type_bpar, only: bpar_type
use type_ens, only: ens_type
use type_geom, only: geom_type
use type_mom_blk, only: mom_blk_type
use type_mpl, only: mpl_type
use type_nam, only: nam_type
@:use_probe()
use type_samp, only: samp_type

implicit none

! Moments derived type
type mom_type
   ! Moments data
   integer :: ne                               !< Ensemble size
   integer :: nsub                             !< Number of sub-ensembles
   character(len=1024) :: prefix               !< Prefix
   type(mom_blk_type),allocatable :: blk(:)    !< Moments blocks
   real(kind_real),allocatable :: m1(:,:,:)    !< Ensemble mean
   real(kind_real),allocatable :: m2(:,:,:)    !< Ensemble variance
   real(kind_real),allocatable :: dirac(:,:,:) !< Raw ensemble dirac test
contains
   procedure :: alloc => mom_alloc
   procedure :: init => mom_init
   procedure :: partial_dealloc => mom_partial_dealloc
   procedure :: dealloc => mom_dealloc
   procedure :: read => mom_read
   procedure :: write => mom_write
   procedure :: update => mom_update
   procedure :: compute => mom_compute
end type mom_type

private
public :: mom_type

contains

!----------------------------------------------------------------------
! Subroutine: mom_alloc
!> Allocation
!----------------------------------------------------------------------
subroutine mom_alloc(mom,nam,geom,bpar,samp,ne,nsub,prefix)

implicit none

! Passed variables
class(mom_type),intent(inout) :: mom  !< Moments
type(nam_type),intent(in) :: nam      !< Namelist
type(geom_type),intent(in) :: geom    !< Geometry
type(bpar_type),intent(in) :: bpar    !< Block parameters
type(samp_type),intent(in) :: samp    !< Sampling
integer,intent(in) :: ne              !< Ensemble size
integer,intent(in) :: nsub            !< Number of sub-ensembles
character(len=*),intent(in) :: prefix !< Prefix

! Local variables
integer :: ib

! Set name
@:set_name(mom_alloc)

! Probe in
@:probe_in()

! Set attributes
mom%ne = ne
mom%nsub = nsub
mom%prefix = prefix

! Allocation
allocate(mom%blk(bpar%nb))
do ib=1,bpar%nb
   ! Attribute
   mom%blk(ib)%ib = ib

   ! Allocation
   call mom%blk(ib)%alloc(samp%nc1a,geom,bpar,ne,nsub,nam%update_mom)
end do
if (nam%check_dirac) then
   allocate(mom%m1(geom%nc0a,geom%nl0,nam%nv))
   allocate(mom%m2(geom%nc0a,geom%nl0,nam%nv))
   allocate(mom%dirac(geom%nc0a,geom%nl0,nam%nv))
end if

! Probe out
@:probe_out()

end subroutine mom_alloc

!----------------------------------------------------------------------
! Subroutine: mom_init
!> Initialization
!----------------------------------------------------------------------
subroutine mom_init(mom,nam,bpar)

implicit none

! Passed variables
class(mom_type),intent(inout) :: mom !< Moments
type(nam_type),intent(in) :: nam     !< Namelist
type(bpar_type),intent(in) :: bpar   !< Block parameters

! Local variables
integer :: ib

! Set name
@:set_name(mom_init)

! Probe in
@:probe_in()

! Initialization
do ib=1,bpar%nb
   call mom%blk(ib)%init(bpar,nam%update_mom)
end do
if (nam%check_dirac) then
   mom%m1 = zero
   mom%m2 = zero
   mom%dirac = zero
end if

! Probe out
@:probe_out()

end subroutine mom_init

!----------------------------------------------------------------------
! Subroutine: mom_partial_dealloc
!> Release memory (partial)
!----------------------------------------------------------------------
subroutine mom_partial_dealloc(mom)

implicit none

! Passed variables
class(mom_type),intent(inout) :: mom !< Moments

! Local variables
integer :: ib

! Set name
@:set_name(mom_partial_dealloc)

! Probe in
@:probe_in()

! Release memory
if (allocated(mom%blk)) then
   do ib=1,size(mom%blk)
      call mom%blk(ib)%dealloc
   end do
   deallocate(mom%blk)
end if

! Probe out
@:probe_out()

end subroutine mom_partial_dealloc

!----------------------------------------------------------------------
! Subroutine: mom_dealloc
!> Release memory
!----------------------------------------------------------------------
subroutine mom_dealloc(mom)

implicit none

! Passed variables
class(mom_type),intent(inout) :: mom !< Moments

! Set name
@:set_name(mom_dealloc)

! Probe in
@:probe_in()

! Release memory
call mom%partial_dealloc
if (allocated(mom%m1)) deallocate(mom%m1)
if (allocated(mom%m2)) deallocate(mom%m2)
if (allocated(mom%dirac)) deallocate(mom%dirac)

! Probe out
@:probe_out()

end subroutine mom_dealloc

!----------------------------------------------------------------------
! Subroutine: mom_read
!> Read
!----------------------------------------------------------------------
subroutine mom_read(mom,mpl,nam,geom,bpar,samp,ens,prefix)

implicit none

! Passed variables
class(mom_type),intent(inout) :: mom  !< Moments
type(mpl_type),intent(inout) :: mpl   !< MPI data
type(nam_type),intent(in) :: nam      !< Namelist
type(geom_type),intent(in) :: geom    !< Geometry
type(bpar_type),intent(in) :: bpar    !< Block parameters
type(samp_type),intent(in) :: samp    !< Sampling
type(ens_type), intent(in) :: ens     !< Ensemble
character(len=*),intent(in) :: prefix !< Prefix

! Local variables
integer :: ib,isub
integer :: ncid,grpid,m2_1_id,m2_2_id,m11_id,m22_id
character(len=1024) :: fname_mom,grpname

! Set name
@:set_name(mom_read)

! Probe in
@:probe_in()

! Allocation
call mom%alloc(nam,geom,bpar,samp,ens%ne,ens%nsub,prefix)

! Initialization
call mom%init(nam,bpar)

do isub=1,mom%nsub
   ! Set file name
   if ((mom%nsub==1).and.(.not.nam%fname_mom_used)) then
      fname_mom = nam%fname_mom(0)
   else
      fname_mom = nam%fname_mom(isub)
   end if

   ! Open file
   ncid = open_file(mpl,fname_mom,mpl%myproc)

   do ib=1,bpar%nb
      if (bpar%diag_block(ib)) then
         ! Get group name
         call nam%io_key_value(bpar%blockname(ib),grpname)

         ! Get group
         grpid = inquire_grp(mpl,ncid,grpname)

         ! Check dimensions
         if (.not.check_dim(mpl,grpid,'nc1a',samp%nc1a)) call mpl%abort('${subr}$','wrong size for dimension nc1a')
         if (.not.check_dim(mpl,grpid,'nl0',geom%nl0)) call mpl%abort('${subr}$','wrong size for dimension nl0')
         if (.not.check_dim(mpl,grpid,'nc3',bpar%nc3(ib))) call mpl%abort('${subr}$','wrong size for dimension nc3')
         if (.not.check_dim(mpl,grpid,'nc4',bpar%nc4(ib))) call mpl%abort('${subr}$','wrong size for dimension nc4')
         if (.not.check_dim(mpl,grpid,'nl0r',bpar%nl0r(ib))) call mpl%abort('${subr}$','wrong size for dimension nl0r')

         ! Get variables
         m2_1_id = inquire_var(mpl,grpid,'m2_1')
         m2_2_id = inquire_var(mpl,grpid,'m2_2')
         m11_id = inquire_var(mpl,grpid,'m11')
         m22_id = inquire_var(mpl,grpid,'m22')

         ! Read data
         call get_var(mpl,grpid,m2_1_id,mom%blk(ib)%m2_1(:,:,isub))
         call get_var(mpl,grpid,m2_2_id,mom%blk(ib)%m2_2(:,:,:,:,isub))
         call get_var(mpl,grpid,m11_id,mom%blk(ib)%m11(:,:,:,:,:,isub))
         call get_var(mpl,grpid,m22_id,mom%blk(ib)%m22(:,:,:,:,:,isub))
      end if
   end do

   ! Close file
   call close_file(mpl,ncid)
end do

! Probe out
@:probe_out()

end subroutine mom_read

!----------------------------------------------------------------------
! Subroutine: mom_write
!> Write
!----------------------------------------------------------------------
subroutine mom_write(mom,mpl,nam,geom,bpar,samp)

implicit none

! Passed variables
class(mom_type),intent(in) :: mom   !< Moments
type(mpl_type),intent(inout) :: mpl !< MPI data
type(nam_type),intent(in) :: nam    !< Namelist
type(geom_type),intent(in) :: geom  !< Geometry
type(bpar_type),intent(in) :: bpar  !< Block parameters
type(samp_type),intent(in) :: samp  !< Sampling

! Local variables
integer :: ib,isub
integer :: ncid,grpid,nc1a_id,nc3_id,nc4_id,nl0r_id,nl0_id,m2_1_id,m2_2_id,m11_id,m22_id
character(len=1024) :: fname_mom,grpname

! Set name
@:set_name(mom_write)

! Probe in
@:probe_in()

do isub=1,mom%nsub
   ! Set file name
   if ((mom%nsub==1).and.(.not.nam%fname_mom_used)) then
      fname_mom = nam%fname_mom(0)
   else
      fname_mom = nam%fname_mom(isub)
   end if

   ! Create file
   ncid = create_file(mpl,fname_mom,mpl%myproc)

   do ib=1,bpar%nb
      if (bpar%diag_block(ib)) then
         ! Get group name
         call nam%io_key_value(bpar%blockname(ib),grpname)

         ! Define group
         grpid = define_grp(mpl,ncid,grpname)

         ! Define or get dimensions
         nc1a_id = define_dim(mpl,grpid,'nc1a',samp%nc1a)
         nl0_id = define_dim(mpl,grpid,'nl0',geom%nl0)
         nc3_id = define_dim(mpl,grpid,'nc3',bpar%nc3(ib))
         nc4_id = define_dim(mpl,grpid,'nc4',bpar%nc4(ib))
         nl0r_id = define_dim(mpl,grpid,'nl0r',bpar%nl0r(ib))

         ! Define or get variables
         m2_1_id = define_var(mpl,grpid,'m2_1','real',(/nc1a_id,nl0_id/))
         m2_2_id = define_var(mpl,grpid,'m2_2','real',(/nc1a_id,nc3_id,nc4_id,nl0_id/))
         m11_id = define_var(mpl,grpid,'m11','real',(/nc1a_id,nc3_id,nc4_id,nl0r_id,nl0_id/))
         m22_id = define_var(mpl,grpid,'m22','real',(/nc1a_id,nc3_id,nc4_id,nl0r_id,nl0_id/))

         ! Write variables
         call put_var(mpl,grpid,m2_1_id,mom%blk(ib)%m2_1(:,:,isub))
         call put_var(mpl,grpid,m2_2_id,mom%blk(ib)%m2_2(:,:,:,:,isub))
         call put_var(mpl,grpid,m11_id,mom%blk(ib)%m11(:,:,:,:,:,isub))
         call put_var(mpl,grpid,m22_id,mom%blk(ib)%m22(:,:,:,:,:,isub))
      end if
   end do

   ! Close file
   call close_file(mpl,ncid)
end do

! Probe out
@:probe_out()

end subroutine mom_write

!----------------------------------------------------------------------
! Subroutine: mom_update
!> Update centered moments
!----------------------------------------------------------------------
subroutine mom_update(mom,mpl,nam,geom,bpar,samp,prefix,fld_c0a,ie)

implicit none

! Passed variables
class(mom_type),intent(inout) :: mom                             !< Moments
type(mpl_type),intent(inout) :: mpl                              !< MPI data
type(nam_type),intent(in) :: nam                                 !< Namelist
type(geom_type),intent(in) :: geom                               !< Geometry
type(bpar_type),intent(in) :: bpar                               !< Block parameters
type(samp_type),intent(in) :: samp                               !< Sampling
character(len=*),intent(in) :: prefix                            !< Prefix
real(kind_real),intent(in) :: fld_c0a(geom%nc0a,geom%nl0,nam%nv) !< Field
integer,intent(in) :: ie                                         !< Member index

! Local variables
integer :: isub,ie_sub,jl0r,jl0,il0,il0ic1,il0ic3,jc3,jc4,ic1a,ib,iv,jv,jc0a,idir
real(kind_real) :: fac1,fac2,fac3,fac4,fac5,fac_norm_cov,fac_norm_m22,cor_norm
real(kind_real) :: fld_c0b(samp%nc0b,geom%nl0,nam%nv),fld_c0c(samp%nc0c,geom%nl0,nam%nv)
real(kind_real) :: fld_c1a(samp%nc1a,geom%nl0)
real(kind_real),allocatable :: fld_c3a(:,:,:,:),wgt_dir(:),pert_c0a(:,:,:)

! Set name
@:set_name(mom_update)

! Probe in
@:probe_in()

! Update moments
write(mpl%info,'(a)') '-------------------------------------------------------------------'
call mpl%flush
write(mpl%info,'(a)') '--- Update moments'
call mpl%flush

! Indices
isub = (ie-1)/(nam%ens1_ne/nam%ens1_nsub)+1
ie_sub = ie-(isub-1)*nam%ens1_ne/nam%ens1_nsub

! Computation factors
fac1 = one/real(ie_sub,kind_real)
fac2 = one/real(ie_sub**2,kind_real)
fac3 = real((ie_sub-1)*(ie_sub**2-3*ie_sub+3),kind_real)/real(ie_sub**3,kind_real)
fac4 = real((ie_sub-1)*(ie_sub-2),kind_real)/real(ie_sub**2,kind_real)
fac5 = real(ie_sub-1,kind_real)/real(ie_sub,kind_real)

if (ie==1) then
   ! Allocation
   call mom%alloc(nam,geom,bpar,samp,nam%ens1_ne,nam%ens1_nsub,prefix)

   ! Initialization
   call mom%init(nam,bpar)
end if

! Halo extension
do iv=1,nam%nv
   call samp%com_c0_AB%ext(mpl,fld_c0a(:,:,iv),fld_c0b(:,:,iv))
   call samp%com_c0_AC%ext(mpl,fld_c0a(:,:,iv),fld_c0c(:,:,iv))
end do

do ib=1,bpar%nb
   if (bpar%diag_block(ib)) then
      ! Allocation
      allocate(fld_c3a(samp%nc1a,bpar%nc3(ib),bpar%nc4(ib),geom%nl0))

      ! Variables indices
      iv = bpar%b_to_v1(ib)
      jv = bpar%b_to_v2(ib)

      ! Interpolate fields
      fld_c1a = mpl%msv%valr
      fld_c3a = mpl%msv%valr
      !$omp parallel do schedule(static) private(il0,il0ic1)
      do il0=1,geom%nl0
         il0ic1 = samp%l0_to_l0ic1(il0)
         call samp%interp_c0b_to_c1a(il0ic1)%apply(mpl,fld_c0b(:,il0,iv),fld_c1a(:,il0))
      end do
      !$omp end parallel do
      !$omp parallel do schedule(static) private(il0,jc3,jc4,il0ic3)
      do il0=1,geom%nl0
         do jc4=1,bpar%nc4(ib)
            do jc3=1,bpar%nc3(ib)
               il0ic3 = samp%l0_to_l0ic3(il0,jc3,jc4)
               call samp%interp_c0c_to_c3a(jc3,jc4,il0ic3)%apply(mpl,fld_c0c(:,il0,jv),fld_c3a(:,jc3,jc4,il0))
            end do
         end do
      end do
      !$omp end parallel do

      ! Remove mean
      fld_c1a = fld_c1a-mom%blk(ib)%m1_1(:,:,isub)
      fld_c3a = fld_c3a-mom%blk(ib)%m1_2(:,:,:,:,isub)

      !$omp parallel do schedule(static) private(il0,jl0r,jl0,jc3,jc4)
      do il0=1,geom%nl0
         do jl0r=1,bpar%nl0r(ib)
            jl0 = bpar%l0rl0b_to_l0(jl0r,il0,ib)
            do jc4=1,bpar%nc4(ib)
               do jc3=1,bpar%nc3(ib)
                  ! Update fourth-order moment
                  mom%blk(ib)%m22(:,jc3,jc4,jl0r,il0,isub) = mom%blk(ib)%m22(:,jc3,jc4,jl0r,il0,isub) &
 & -two*fac1*(mom%blk(ib)%m21(:,jc3,jc4,jl0r,il0,isub)*fld_c3a(:,jc3,jc4,jl0) &
 & +mom%blk(ib)%m12(:,jc3,jc4,jl0r,il0,isub)*fld_c1a(:,il0)) &
 & +fac2*(four*mom%blk(ib)%m11(:,jc3,jc4,jl0r,il0,isub)*fld_c1a(:,il0)*fld_c3a(:,jc3,jc4,jl0) &
 & +mom%blk(ib)%m2_2(:,jc3,jc4,jl0,isub)*fld_c1a(:,il0)**2+mom%blk(ib)%m2_1(:,il0,isub)*fld_c3a(:,jc3,jc4,jl0)**2) &
 & +fac3*fld_c1a(:,il0)**2*fld_c3a(:,jc3,jc4,jl0)**2

                  ! Update third-order moments
                  mom%blk(ib)%m21(:,jc3,jc4,jl0r,il0,isub) = mom%blk(ib)%m21(:,jc3,jc4,jl0r,il0,isub) &
 & -fac1*(two*mom%blk(ib)%m11(:,jc3,jc4,jl0r,il0,isub)*fld_c1a(:,il0)+mom%blk(ib)%m2_1(:,il0,isub)*fld_c3a(:,jc3,jc4,jl0)) &
 & +fac4*fld_c1a(:,il0)**2*fld_c3a(:,jc3,jc4,jl0)
                  mom%blk(ib)%m12(:,jc3,jc4,jl0r,il0,isub) = mom%blk(ib)%m12(:,jc3,jc4,jl0r,il0,isub) &
 & -fac1*(two*mom%blk(ib)%m11(:,jc3,jc4,jl0r,il0,isub)*fld_c3a(:,jc3,jc4,jl0)+mom%blk(ib)%m2_2(:,jc3,jc4,jl0,isub)*fld_c1a(:,il0)) &
 & +fac4*fld_c3a(:,jc3,jc4,jl0)**2*fld_c1a(:,il0)

                  ! Update covariance
                  mom%blk(ib)%m11(:,jc3,jc4,jl0r,il0,isub) = mom%blk(ib)%m11(:,jc3,jc4,jl0r,il0,isub)+fac5*fld_c1a(:,il0) &
 & *fld_c3a(:,jc3,jc4,jl0)
               end do
            end do
         end do
      end do
      !$omp end parallel do

      ! Update variance
      mom%blk(ib)%m2_1(:,:,isub) = mom%blk(ib)%m2_1(:,:,isub)+fac5*fld_c1a**2
      mom%blk(ib)%m2_2(:,:,:,:,isub) = mom%blk(ib)%m2_2(:,:,:,:,isub)+fac5*fld_c3a**2

      ! Update mean
      mom%blk(ib)%m1_1(:,:,isub) = mom%blk(ib)%m1_1(:,:,isub)+fac1*fld_c1a
      mom%blk(ib)%m1_2(:,:,:,:,isub) = mom%blk(ib)%m1_2(:,:,:,:,isub)+fac1*fld_c3a

      ! Release memory
      deallocate(fld_c3a)
   end if
end do

if (nam%check_dirac) then
   ! Allocation
   allocate(wgt_dir(geom%ndir))
   allocate(pert_c0a(geom%nc0a,geom%nl0,nam%nv))

   ! Get perturbation
   do jc0a=1,geom%nc0a
      do jl0=1,geom%nl0
         if (geom%gmask_c0a(jc0a,il0)) pert_c0a(jc0a,jl0,:) = fld_c0a(jc0a,jl0,:)-mom%m1(jc0a,jl0,:)
      end do
   end do

   ! Get weight
   wgt_dir = zero
   do idir=1,geom%ndir
      if (geom%iprocdir(idir)==mpl%myproc) wgt_dir(idir) = pert_c0a(geom%ic0adir(idir),geom%il0dir(idir),geom%ivdir(idir))
   end do

   ! Communication
   call mpl%f_comm%allreduce(wgt_dir,fckit_mpi_sum())

   do jc0a=1,geom%nc0a
      ! Dirac sector
      idir = geom%dirac_index(jc0a)

      do jl0=1,geom%nl0
         if (geom%gmask_c0a(jc0a,il0)) then
            ! Update covariance
            mom%dirac(jc0a,jl0,geom%ivdir(idir)) = mom%dirac(jc0a,jl0,geom%ivdir(idir)) &
 & +fac5*wgt_dir(idir)*pert_c0a(jc0a,jl0,geom%ivdir(idir))

            ! Update variance
            mom%m2(jc0a,jl0,:) = mom%m2(jc0a,jl0,:)+fac5*pert_c0a(jc0a,jl0,:)**2

            ! Update mean
            mom%m1(jc0a,jl0,:) = mom%m1(jc0a,jl0,:)+fac1*pert_c0a(jc0a,jl0,:)
         end if
      end do
   end do

   ! Release memory
   deallocate(wgt_dir)
   deallocate(pert_c0a)
end if

if (ie==nam%ens1_ne) then
   ! Normalize moments or set missing values
   fac_norm_cov = real(mom%nsub,kind_real)/real(mom%ne-mom%nsub,kind_real)
   fac_norm_m22 = real(mom%nsub,kind_real)/real(mom%ne,kind_real)
   do ib=1,bpar%nb
      if (bpar%diag_block(ib)) then
         !$omp parallel do schedule(static) private(il0,jc3,jc4,ic1a,jl0r,jl0)
         do il0=1,geom%nl0
            do ic1a=1,samp%nc1a
               if (samp%smask_c1a(ic1a,il0)) then
                  mom%blk(ib)%m2_1(ic1a,il0,:) = mom%blk(ib)%m2_1(ic1a,il0,:)*fac_norm_cov
               else
                  mom%blk(ib)%m2_1(ic1a,il0,:) = mpl%msv%valr
               end if
            end do
            do jc4=1,bpar%nc4(ib)
               do jc3=1,bpar%nc3(ib)
                  do ic1a=1,samp%nc1a
                     if (samp%smask_c3a(ic1a,jc3,jc4,il0)) then
                        mom%blk(ib)%m2_2(ic1a,jc3,jc4,il0,:) = mom%blk(ib)%m2_2(ic1a,jc3,jc4,il0,:)*fac_norm_cov
                     else
                        mom%blk(ib)%m2_2(ic1a,jc3,jc4,il0,:) = mpl%msv%valr
                     end if
                     do jl0r=1,bpar%nl0r(ib)
                        jl0 = bpar%l0rl0b_to_l0(jl0r,il0,ib)
                        if (samp%smask_c1a(ic1a,il0).and.samp%smask_c3a(ic1a,jc3,jc4,jl0)) then
                           mom%blk(ib)%m11(ic1a,jc3,jc4,jl0r,il0,:) = mom%blk(ib)%m11(ic1a,jc3,jc4,jl0r,il0,:)*fac_norm_cov
                           mom%blk(ib)%m22(ic1a,jc3,jc4,jl0r,il0,:) = mom%blk(ib)%m22(ic1a,jc3,jc4,jl0r,il0,:)*fac_norm_m22
                        else
                           mom%blk(ib)%m11(ic1a,jc3,jc4,jl0r,il0,:) = mpl%msv%valr
                           mom%blk(ib)%m22(ic1a,jc3,jc4,jl0r,il0,:) = mpl%msv%valr
                        end if
                     end do
                  end do
               end do
            end do
         end do
         !$omp end parallel do
      end if
   end do

   ! Normalize raw ensemble dirac test
   if (nam%check_dirac) then
      ! Allocation
      allocate(wgt_dir(geom%ndir))

      ! Variance at dirac points
      wgt_dir = zero
      do idir=1,geom%ndir
         if (geom%iprocdir(idir)==mpl%myproc) wgt_dir(idir) = mom%m2(geom%ic0adir(idir),geom%il0dir(idir),geom%ivdir(idir))
      end do

      ! Communication
      call mpl%f_comm%allreduce(wgt_dir,fckit_mpi_sum())

      ! Normalize
      do jc0a=1,geom%nc0a
         idir = geom%dirac_index(jc0a)
         do jl0=1,geom%nl0
            if (geom%gmask_c0a(jc0a,jl0)) then
               cor_norm = wgt_dir(idir)*mom%m2(jc0a,jl0,geom%ivdir(idir))
               if (cor_norm>zero) then
                  mom%dirac(jc0a,jl0,geom%ivdir(idir)) = mom%dirac(jc0a,jl0,geom%ivdir(idir))/sqrt(cor_norm)
               else
                  mom%dirac(jc0a,jl0,geom%ivdir(idir)) = mpl%msv%valr
               end if
            end if
         end do
      end do

      ! Release memory
      deallocate(wgt_dir)
   end if

   ! Write sample moments
   if (nam%write_mom) then
      write(mpl%info,'(a10,a)') '','Write sample moments'
      call mpl%flush
      call mom%write(mpl,nam,geom,bpar,samp)
   end if
end if

! Probe out
@:probe_out()

end subroutine mom_update

!----------------------------------------------------------------------
! Subroutine: mom_compute
!> Compute centered moments
!----------------------------------------------------------------------
subroutine mom_compute(mom,mpl,nam,geom,bpar,samp,ens,prefix)

implicit none

! Passed variables
class(mom_type),intent(inout) :: mom  !< Moments
type(mpl_type),intent(inout) :: mpl   !< MPI data
type(nam_type),intent(in) :: nam      !< Namelist
type(geom_type),intent(in) :: geom    !< Geometry
type(bpar_type),intent(in) :: bpar    !< Block parameters
type(samp_type),intent(in) :: samp    !< Sampling
type(ens_type), intent(inout) :: ens  !< Ensemble
character(len=*),intent(in) :: prefix !< Prefix

! Local variables
integer :: ie,ie_sub,jl0r,jl0,il0,il0ic1,il0ic3,isub,jc3,jc4,ic1a,ib,jv,iv,ic0a,jc0a,idir
real(kind_real) :: fac_norm_cov,fac_norm_m22,cor_norm
real(kind_real) :: fld_c0a(geom%nc0a,geom%nl0,nam%nv),fld_c0b(samp%nc0b,geom%nl0,nam%nv),fld_c0c(samp%nc0c,geom%nl0,nam%nv)
real(kind_real) :: fld_c1a(samp%nc1a,geom%nl0)
real(kind_real),allocatable :: fld_c3a(:,:,:,:),wgt_dir(:),m2(:,:,:)

! Set name
@:set_name(mom_compute)

! Probe in
@:probe_in()

! Allocation
call mom%alloc(nam,geom,bpar,samp,ens%ne,ens%nsub,prefix)
if (nam%check_dirac) then
   allocate(wgt_dir(geom%ndir))
   allocate(m2(geom%nc0a,geom%nl0,nam%nv))
end if

! Initialization
call mom%init(nam,bpar)
if (nam%check_dirac) mom%dirac = zero

! Loop on sub-ensembles
do isub=1,ens%nsub
   if (ens%nsub==1) then
      write(mpl%info,'(a10,a)') '','Full ensemble, member:'
      call mpl%flush(.false.)
   else
      write(mpl%info,'(a10,a,i6,a)') '','Sub-ensemble ',isub,', member:'
      call mpl%flush(.false.)
   end if

   ! Compute centered moments
   do ie_sub=1,ens%ne/ens%nsub
      write(mpl%info,'(i6)') ie_sub
      call mpl%flush(.false.)

      ! Full ensemble index
      ie = ie_sub+(isub-1)*ens%ne/ens%nsub

      ! Get perturbation on subset Sc0
      call ens%get_c0(mpl,nam,geom,'pert',ie,fld_c0a)

      ! Halo extension
      do iv=1,nam%nv
         call samp%com_c0_AB%ext(mpl,fld_c0a(:,:,iv),fld_c0b(:,:,iv))
         call samp%com_c0_AC%ext(mpl,fld_c0a(:,:,iv),fld_c0c(:,:,iv))
      end do

      do ib=1,bpar%nb
         if (bpar%diag_block(ib)) then
            ! Allocation
            allocate(fld_c3a(samp%nc1a,bpar%nc3(ib),bpar%nc4(ib),geom%nl0))

            ! Variables indices
            iv = bpar%b_to_v1(ib)
            jv = bpar%b_to_v2(ib)

            ! Interpolate fields
            fld_c1a = mpl%msv%valr
            fld_c3a = mpl%msv%valr
            !$omp parallel do schedule(static) private(il0,il0ic1)
            do il0=1,geom%nl0
               il0ic1 = samp%l0_to_l0ic1(il0)
               call samp%interp_c0b_to_c1a(il0ic1)%apply(mpl,fld_c0b(:,il0,iv),fld_c1a(:,il0))
            end do
            !$omp end parallel do
            !$omp parallel do schedule(static) private(il0,jc3,jc4,il0ic3)
            do il0=1,geom%nl0
               do jc4=1,bpar%nc4(ib)
                  do jc3=1,bpar%nc3(ib)
                     il0ic3 = samp%l0_to_l0ic3(il0,jc3,jc4)
                     call samp%interp_c0c_to_c3a(jc3,jc4,il0ic3)%apply(mpl,fld_c0c(:,il0,jv),fld_c3a(:,jc3,jc4,il0))
                  end do
               end do
            end do
            !$omp end parallel do

            !$omp parallel do schedule(static) private(il0,jl0r,jl0,jc3,jc4)
            do il0=1,geom%nl0
               do jl0r=1,bpar%nl0r(ib)
                  jl0 = bpar%l0rl0b_to_l0(jl0r,il0,ib)

                  do jc4=1,bpar%nc4(ib)
                     do jc3=1,bpar%nc3(ib)
                        ! Fourth-order moment
                        mom%blk(ib)%m22(:,jc3,jc4,jl0r,il0,isub) = mom%blk(ib)%m22(:,jc3,jc4,jl0r,il0,isub)+(fld_c1a(:,il0) &
 & *fld_c3a(:,jc3,jc4,jl0))**2

                        ! Covariance
                        mom%blk(ib)%m11(:,jc3,jc4,jl0r,il0,isub) = mom%blk(ib)%m11(:,jc3,jc4,jl0r,il0,isub)+fld_c1a(:,il0) &
 & *fld_c3a(:,jc3,jc4,jl0)
                     end do
                  end do
               end do
            end do
            !$omp end parallel do

            ! Variances
            mom%blk(ib)%m2_1(:,:,isub) = mom%blk(ib)%m2_1(:,:,isub)+fld_c1a**2
            mom%blk(ib)%m2_2(:,:,:,:,isub) = mom%blk(ib)%m2_2(:,:,:,:,isub)+fld_c3a**2

            ! Release memory
            deallocate(fld_c3a)
         end if
      end do

      if (nam%check_dirac) then
         ! Get weight
         wgt_dir = zero
         do idir=1,geom%ndir
            wgt_dir(idir) = fld_c0a(geom%ic0adir(idir),geom%il0dir(idir),geom%ivdir(idir))
         end do

         ! Communication
         call mpl%f_comm%allreduce(wgt_dir,fckit_mpi_sum())

         ! Covariance
         do jc0a=1,geom%nc0a
            idir = geom%dirac_index(jc0a)
            do jl0=1,geom%nl0
              if (geom%gmask_c0a(jc0a,jl0)) mom%dirac(jc0a,jl0,geom%ivdir(idir)) = mom%dirac(jc0a,jl0,geom%ivdir(idir)) &
 & +wgt_dir(idir)*fld_c0a(jc0a,jl0,geom%ivdir(idir))
            end do
         end do
      end if
   end do
   write(mpl%info,'(a)') ''
   call mpl%flush
end do

! Normalize moments or set missing values
fac_norm_cov = real(mom%nsub,kind_real)/real(mom%ne-mom%nsub,kind_real)
fac_norm_m22 = real(mom%nsub,kind_real)/real(mom%ne,kind_real)
do ib=1,bpar%nb
   if (bpar%diag_block(ib)) then
      !$omp parallel do schedule(static) private(il0,jc3,jc4,ic1a,jl0r,jl0)
      do il0=1,geom%nl0
         do ic1a=1,samp%nc1a
            if (samp%smask_c1a(ic1a,il0)) then
               mom%blk(ib)%m2_1(ic1a,il0,:) = mom%blk(ib)%m2_1(ic1a,il0,:)*fac_norm_cov
            else
               mom%blk(ib)%m2_1(ic1a,il0,:) = mpl%msv%valr
            end if
         end do
         do jc4=1,bpar%nc4(ib)
            do jc3=1,bpar%nc3(ib)
               do ic1a=1,samp%nc1a
                  if (samp%smask_c3a(ic1a,jc3,jc4,il0)) then
                     mom%blk(ib)%m2_2(ic1a,jc3,jc4,il0,:) = mom%blk(ib)%m2_2(ic1a,jc3,jc4,il0,:)*fac_norm_cov
                  else
                     mom%blk(ib)%m2_2(ic1a,jc3,jc4,il0,:) = mpl%msv%valr
                  end if
                  do jl0r=1,bpar%nl0r(ib)
                     jl0 = bpar%l0rl0b_to_l0(jl0r,il0,ib)
                     if (samp%smask_c1a(ic1a,il0).and.samp%smask_c3a(ic1a,jc3,jc4,jl0)) then
                        mom%blk(ib)%m11(ic1a,jc3,jc4,jl0r,il0,:) = mom%blk(ib)%m11(ic1a,jc3,jc4,jl0r,il0,:)*fac_norm_cov
                        mom%blk(ib)%m22(ic1a,jc3,jc4,jl0r,il0,:) = mom%blk(ib)%m22(ic1a,jc3,jc4,jl0r,il0,:)*fac_norm_m22
                     else
                        mom%blk(ib)%m11(ic1a,jc3,jc4,jl0r,il0,:) = mpl%msv%valr
                        mom%blk(ib)%m22(ic1a,jc3,jc4,jl0r,il0,:) = mpl%msv%valr
                     end if
                  end do
               end do
            end do
         end do
      end do
      !$omp end parallel do
   end if
end do

! Normalize raw ensemble dirac test
if (nam%check_dirac) then
   ! Get ensemble variance
   call ens%compute_moments(mpl,nam,geom)
   call ens%get_c0(mpl,nam,geom,'m2',0,m2)

   ! Variance at dirac points
   wgt_dir = zero
   do idir=1,geom%ndir
      if (geom%iprocdir(idir)==mpl%myproc) wgt_dir(idir) = m2(geom%ic0adir(idir),geom%il0dir(idir),geom%ivdir(idir))
   end do

   ! Communication
   call mpl%f_comm%allreduce(wgt_dir,fckit_mpi_sum())

   ! Normalize
   do jc0a=1,geom%nc0a
      idir = geom%dirac_index(jc0a)
      do jl0=1,geom%nl0
         if (geom%gmask_c0a(jc0a,jl0)) then
            cor_norm = wgt_dir(idir)*m2(jc0a,jl0,geom%ivdir(idir))
            if (cor_norm>zero) then
                mom%dirac(jc0a,jl0,geom%ivdir(idir)) = mom%dirac(jc0a,jl0,geom%ivdir(idir))*fac_norm_cov/sqrt(cor_norm)
            else
                mom%dirac(jc0a,jl0,geom%ivdir(idir)) = mpl%msv%valr
            end if
         else
            mom%dirac(ic0a,il0,:) = mpl%msv%valr
         end if
      end do
   end do

   ! Release memory
   deallocate(wgt_dir)
   deallocate(m2)
end if

! Write sample moments
if (nam%write_mom) then
   write(mpl%info,'(a10,a)') '','Write sample moments'
   call mpl%flush
   call mom%write(mpl,nam,geom,bpar,samp)
end if

! Probe out
@:probe_out()

end subroutine mom_compute

end module type_mom
