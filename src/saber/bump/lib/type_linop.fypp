#:include 'instrumentation.fypp'
!----------------------------------------------------------------------
! Module: type_linop
!> Linear operator derived type
! Author: Benjamin Menetrier
! Licensing: this code is distributed under the CeCILL-C license
! Copyright 2015-... UCAR, CERFACS, METEO-FRANCE and IRIT
!----------------------------------------------------------------------
module type_linop

use ieee_arithmetic
!$ use omp_lib
use tools_const, only: zero,one,two,rad2deg
use tools_func, only: sphere_dist,zss_maxval,zss_minval
use tools_gc99, only: fit_func
use tools_kinds, only: kind_real,huge_real
use tools_netcdf, only: define_grp,inquire_grp,put_att,get_att,define_dim,inquire_dim_size,define_var,inquire_var,put_var,get_var
use tools_qsort, only: qsort
use tools_repro, only: repro_th,inf,eq,infeq,sup
use tools_ssrfpack, only: constr,aplyr
use type_mesh, only: mesh_type
use type_mpl, only: mpl_type
use type_nam, only: nam_type
@:use_probe()
use type_tree, only: tree_type

implicit none

logical,parameter :: check_data = .false.             !< Activate data check for all linear operations
real(kind_real),parameter :: S_inf = 1.0e-2_kind_real !< Minimum interpolation coefficient
integer,parameter :: nmin = 3                         !< Minimum number of neighbors for the smooth interpolation

! Linear operator derived type
type linop_type
   ! Prefix and dimensions
   character(len=1024) :: prefix            !< Operator prefix (for I/O)
   integer :: n_src                         !< Source vector size
   integer :: n_dst                         !< Destination vector size
   integer :: n_s                           !< Operator size
   integer :: nvec                          !< Size of the vector of linear operators with similar row and col

   ! Data
   integer,allocatable :: row(:)            !< Output indices
   integer,allocatable :: col(:)            !< Input indices
   real(kind_real),allocatable :: S(:)      !< Coefficients
   real(kind_real),allocatable :: Svec(:,:) !< Coefficients of the vector of linear operators with similar row and col

   ! I/O IDs
   integer :: grpid                         !< group ID
   integer :: row_id                        !< row ID
   integer :: col_id                        !< col ID
   integer :: S_id                          !< S ID
   integer :: Svec_id                       !< Svec ID
contains
   procedure :: alloc => linop_alloc
   procedure :: dealloc => linop_dealloc
   procedure :: copy => linop_copy
   procedure :: read => linop_read
   procedure :: write_def => linop_write_def
   procedure :: write_data => linop_write_data
   procedure :: buffer_size => linop_buffer_size
   procedure :: serialize => linop_serialize
   procedure :: deserialize => linop_deserialize
   procedure :: apply => linop_apply
   procedure :: apply_ad => linop_apply_ad
   procedure :: add_op => linop_add_op
   procedure :: gather => linop_gather
   procedure :: linop_interp
   procedure :: linop_interp_lat
   procedure :: linop_interp_nn
   generic :: interp => linop_interp,linop_interp_lat,linop_interp_nn
   procedure :: compute_grad => linop_compute_grad
end type linop_type

private
public :: linop_type

contains

!----------------------------------------------------------------------
! Subroutine: linop_alloc
!> Allocation
!----------------------------------------------------------------------
subroutine linop_alloc(linop,nvec)

implicit none

! Passed variables
class(linop_type),intent(inout) :: linop !< Linear operator
integer,intent(in),optional :: nvec      !< Size of the vector of linear operators with similar row and col

! Set name
@:set_name(linop_alloc)

! Probe in
@:probe_in()

! Vector size
if (present(nvec)) then
   linop%nvec = nvec
else
   linop%nvec = 0
end if

! Allocation
allocate(linop%row(linop%n_s))
allocate(linop%col(linop%n_s))
if (linop%nvec>0) then
   allocate(linop%Svec(linop%n_s,linop%nvec))
else
   allocate(linop%S(linop%n_s))
end if

! Probe out
@:probe_out()

end subroutine linop_alloc

!----------------------------------------------------------------------
! Subroutine: linop_dealloc
!> Release memory
!----------------------------------------------------------------------
subroutine linop_dealloc(linop)

implicit none

! Passed variables
class(linop_type),intent(inout) :: linop !< Linear operator

! Set name
@:set_name(linop_dealloc)

! Probe in
@:probe_in()

! Release memory
if (allocated(linop%row)) deallocate(linop%row)
if (allocated(linop%col)) deallocate(linop%col)
if (allocated(linop%S)) deallocate(linop%S)
if (allocated(linop%Svec)) deallocate(linop%Svec)

! Probe out
@:probe_out()

end subroutine linop_dealloc

!----------------------------------------------------------------------
! Subroutine: linop_copy
!> Copy
!----------------------------------------------------------------------
subroutine linop_copy(linop_out,linop_in,n_s)

implicit none

! Passed variables
class(linop_type),intent(inout) :: linop_out !< Output linear operator
type(linop_type),intent(in) :: linop_in      !< Input linear operator
integer,intent(in),optional :: n_s           !< Number of operations to copy

! Set name
@:set_name(linop_copy)

! Probe in
@:probe_in()

! Release memory
call linop_out%dealloc

! Copy attributes
if (present(n_s)) then
   linop_out%n_s = n_s
else
   linop_out%n_s = linop_in%n_s
end if

! Allocation
call linop_out%alloc(linop_in%nvec)

! Copy data
if (linop_in%n_s>0) then
   linop_out%row = linop_in%row(1:linop_out%n_s)
   linop_out%col = linop_in%col(1:linop_out%n_s)
   if (linop_out%nvec>0) then
      linop_out%Svec = linop_in%Svec(1:linop_out%n_s,:)
   else
      linop_out%S = linop_in%S(1:linop_out%n_s)
   end if
end if

! Probe out
@:probe_out()

end subroutine linop_copy

!----------------------------------------------------------------------
! Subroutine: linop_read
!> Read
!----------------------------------------------------------------------
subroutine linop_read(linop,mpl,ncid)

implicit none

! Passed variables
class(linop_type),intent(inout) :: linop !< Linear operator
type(mpl_type),intent(inout) :: mpl      !< MPI data
integer,intent(in) :: ncid               !< NetCDF file

! Local variables
integer :: nvec

! Set name
@:set_name(linop_read)

! Probe in
@:probe_in()

! Get group
linop%grpid = inquire_grp(mpl,ncid,linop%prefix)

! Get dimensions
linop%n_s = inquire_dim_size(mpl,linop%grpid,'n_s',0)
call get_att(mpl,linop%grpid,0,'n_src',linop%n_src)
call get_att(mpl,linop%grpid,0,'n_dst',linop%n_dst)
call get_att(mpl,linop%grpid,0,'nvec',nvec)

! Allocation
call linop%alloc(nvec)

if (linop%n_s>0) then
   ! Get variables
   linop%row_id = inquire_var(mpl,linop%grpid,'row')
   linop%col_id = inquire_var(mpl,linop%grpid,'col')
   if (linop%nvec>0) then
      linop%Svec_id = inquire_var(mpl,linop%grpid,'Svec')
   else
      linop%S_id = inquire_var(mpl,linop%grpid,'S')
   end if

   ! Read variables
   call get_var(mpl,linop%grpid,linop%row_id,linop%row)
   call get_var(mpl,linop%grpid,linop%col_id,linop%col)
   if (linop%nvec>0) then
      call get_var(mpl,linop%grpid,linop%Svec_id,linop%Svec)
   else
      call get_var(mpl,linop%grpid,linop%S_id,linop%S)
   end if
end if

! Probe out
@:probe_out()

end subroutine linop_read

!----------------------------------------------------------------------
! Subroutine: linop_write_def
!> Write, definition mode
!----------------------------------------------------------------------
subroutine linop_write_def(linop,mpl,ncid)

implicit none

! Passed variables
class(linop_type),intent(inout) :: linop !< Linear operator
type(mpl_type),intent(inout) :: mpl      !< MPI data
integer,intent(in) :: ncid               !< NetCDF file

! Local variables
integer :: n_s_id,nvec_id

! Set name
@:set_name(linop_write_def)

! Probe in
@:probe_in()

! Define group
linop%grpid = define_grp(mpl,ncid,linop%prefix)

! Define dimensions
call put_att(mpl,linop%grpid,0,'n_src',linop%n_src)
call put_att(mpl,linop%grpid,0,'n_dst',linop%n_dst)
call put_att(mpl,linop%grpid,0,'nvec',linop%nvec)

if (linop%n_s>0) then
   ! Define dimensions
   n_s_id = define_dim(mpl,linop%grpid,'n_s',linop%n_s)
   if (linop%nvec>0) nvec_id = define_dim(mpl,linop%grpid,'nvec',linop%nvec)

   ! Define variables
   linop%row_id = define_var(mpl,linop%grpid,'row','int',(/n_s_id/))
   linop%col_id = define_var(mpl,linop%grpid,'col','int',(/n_s_id/))
   if (linop%nvec>0) then
      linop%Svec_id = define_var(mpl,linop%grpid,'Svec','real',(/n_s_id,nvec_id/))
   else
      linop%S_id = define_var(mpl,linop%grpid,'S','real',(/n_s_id/))
   end if
end if

! Probe out
@:probe_out()

end subroutine linop_write_def

!----------------------------------------------------------------------
! Subroutine: linop_write_data
!> Write, data mode
!----------------------------------------------------------------------
subroutine linop_write_data(linop,mpl)

implicit none

! Passed variables
class(linop_type),intent(in) :: linop !< Linear operator
type(mpl_type),intent(inout) :: mpl   !< MPI data

! Set name
@:set_name(linop_write_data)

! Probe in
@:probe_in()

if (linop%n_s>0) then
   ! Write variables
   call put_var(mpl,linop%grpid,linop%row_id,linop%row(1:linop%n_s))
   call put_var(mpl,linop%grpid,linop%col_id,linop%col(1:linop%n_s))
   if (linop%nvec>0) then
      call put_var(mpl,linop%grpid,linop%Svec_id,linop%Svec(1:linop%n_s,:))
   else
      call put_var(mpl,linop%grpid,linop%S_id,linop%S(1:linop%n_s))
   end if
end if

! Probe out
@:probe_out()

end subroutine linop_write_data

!----------------------------------------------------------------------
! Subroutine: linop_buffer_size
!> Buffer size
!----------------------------------------------------------------------
subroutine linop_buffer_size(linop,nbufi,nbufr)

implicit none

! Passed variables
class(linop_type),intent(in) :: linop !< Linear operator
integer,intent(out) :: nbufi          !< Buffer size (integer)
integer,intent(out) :: nbufr          !< Buffer size (real)

! Set name
@:set_name(linop_buffer_size)

! Probe in
@:probe_in()

! Define buffer size
nbufi = 6+2*linop%n_s
if (linop%nvec>0) then
   nbufr = linop%n_s*linop%nvec
else
   nbufr = linop%n_s
end if

! Probe out
@:probe_out()

end subroutine linop_buffer_size

!----------------------------------------------------------------------
! Subroutine: linop_serialize
!> Serialize
!----------------------------------------------------------------------
subroutine linop_serialize(linop,mpl,nbufi,nbufr,bufi,bufr)

implicit none

! Passed variables
class(linop_type),intent(in) :: linop      !< Linear operator
type(mpl_type),intent(inout) :: mpl        !< MPI data
integer,intent(in) :: nbufi                !< Buffer size (integer)
integer,intent(in) :: nbufr                !< Buffer size (real)
integer,intent(out) :: bufi(nbufi)         !< Buffer (integer)
real(kind_real),intent(out) :: bufr(nbufr) !< Buffer (real)

! Local variables
integer :: ibufi,ibufr

! Set name
@:set_name(linop_serialize)

! Probe in
@:probe_in()

! Initialization
ibufi = 0
ibufr = 0

! Dimensions
bufi(ibufi+1) = nbufi
ibufi = ibufi+1
bufi(ibufi+1) = nbufr
ibufi = ibufi+1
bufi(ibufi+1) = linop%n_s
ibufi = ibufi+1
bufi(ibufi+1) = linop%n_src
ibufi = ibufi+1
bufi(ibufi+1) = linop%n_dst
ibufi = ibufi+1
bufi(ibufi+1) = linop%nvec
ibufi = ibufi+1

! Copy data
if (linop%n_s>0) then
   bufi(ibufi+1:ibufi+linop%n_s) = linop%row
   ibufi = ibufi+linop%n_s
   bufi(ibufi+1:ibufi+linop%n_s) = linop%col
   ibufi = ibufi+linop%n_s
   if (linop%nvec>0) then
      bufr(ibufr+1:ibufr+linop%n_s*linop%nvec) = reshape(linop%Svec,(/linop%n_s*linop%nvec/))
      ibufr = ibufr+linop%n_s*linop%nvec
   else
      bufr(ibufr+1:ibufr+linop%n_s) = linop%S
      ibufr = ibufr+linop%n_s
   end if
end if

! Check
if (ibufi/=nbufi) call mpl%abort('${subr}$','inconsistent final offset/buffer size (integer)')
if (ibufr/=nbufr) call mpl%abort('${subr}$','inconsistent final offset/buffer size (real)')

! Probe out
@:probe_out()

end subroutine linop_serialize

!----------------------------------------------------------------------
! Subroutine: linop_deserialize
!> Deserialize
!----------------------------------------------------------------------
subroutine linop_deserialize(linop,mpl,nbufi,nbufr,bufi,bufr)

implicit none

! Passed variables
class(linop_type),intent(inout) :: linop  !< Linear operator
type(mpl_type),intent(inout) :: mpl       !< MPI data
integer,intent(in) :: nbufi               !< Buffer size (integer)
integer,intent(in) :: nbufr               !< Buffer size (real)
integer,intent(in) :: bufi(nbufi)         !< Buffer (integer)
real(kind_real),intent(in) :: bufr(nbufr) !< Buffer (real)

! Local variables
integer :: ibufi,ibufr,nvec

! Set name
@:set_name(linop_deserialize)

! Probe in
@:probe_in()

! Initialization
ibufi = 0
ibufr = 0

! Check
if (bufi(ibufi+1)/=nbufi) call mpl%abort('${subr}$','inconsistent initial value/buffer size (integer)')
ibufi = ibufi+1
if (bufi(ibufi+1)/=nbufr) call mpl%abort('${subr}$','inconsistent initial value/buffer size (real)')
ibufi = ibufi+1

! Copy data
linop%n_s = bufi(ibufi+1)
ibufi = ibufi+1
linop%n_src = bufi(ibufi+1)
ibufi = ibufi+1
linop%n_dst = bufi(ibufi+1)
ibufi = ibufi+1
nvec = bufi(ibufi+1)
ibufi = ibufi+1

! Allocation
call linop%alloc(nvec)

! Copy data
if (linop%n_s>0) then
   linop%row = bufi(ibufi+1:ibufi+linop%n_s)
   ibufi = ibufi+linop%n_s
   linop%col = bufi(ibufi+1:ibufi+linop%n_s)
   ibufi = ibufi+linop%n_s
   if (linop%nvec>0) then
      linop%Svec = mpl%msv%valr
      linop%Svec = reshape(bufr(ibufr+1:ibufr+linop%n_s*linop%nvec),(/linop%n_s,linop%nvec/))
      ibufr = ibufr+linop%n_s*linop%nvec
   else
      linop%S = bufr(ibufr+1:ibufr+linop%n_s)
      ibufr = ibufr+linop%n_s
   end if
end if

! Check
if (ibufi/=nbufi) call mpl%abort('${subr}$','inconsistent final offset/buffer size (integer)')
if (ibufr/=nbufr) call mpl%abort('${subr}$','inconsistent final offset/buffer size (real)')

! Probe out
@:probe_out()

end subroutine linop_deserialize

!----------------------------------------------------------------------
! Subroutine: linop_apply
!> Apply linear operator
!----------------------------------------------------------------------
subroutine linop_apply(linop,mpl,fld_src,fld_dst,ivec,mssrc,msdst)

implicit none

! Passed variables
class(linop_type),intent(in) :: linop               !< Linear operator
type(mpl_type),intent(inout) :: mpl                 !< MPI data
real(kind_real),intent(in) :: fld_src(linop%n_src)  !< Source vector
real(kind_real),intent(out) :: fld_dst(linop%n_dst) !< Destination vector
integer,intent(in),optional :: ivec                 !< Index of the vector of linear operators with similar row and col
logical,intent(in),optional :: mssrc                !< Check for missing source
logical,intent(in),optional :: msdst                !< Check for missing destination

! Local variables
integer :: i_s,i_dst
logical :: lmssrc,lmsdst,valid
logical,allocatable :: missing_src(:),missing_dst(:)

! Set name
@:set_name(linop_apply)

! Probe in
@:probe_in()

if (check_data) then
   ! Check linear operation
   if (zss_minval(linop%col)<1) call mpl%abort('${subr}$','col<1 for linear operation '//trim(linop%prefix))
   if (zss_maxval(linop%col)>linop%n_src) call mpl%abort('${subr}$','col>n_src for linear operation '//trim(linop%prefix))
   if (zss_minval(linop%row)<1) call mpl%abort('${subr}$','row<1 for linear operation '//trim(linop%prefix))
   if (zss_maxval(linop%row)>linop%n_dst) call mpl%abort('${subr}$','row>n_dst for linear operation '//trim(linop%prefix))
   if (linop%n_s>0) then
      if (present(ivec)) then
         if (any(ieee_is_nan(linop%Svec))) call mpl%abort('${subr}$','NaN in Svec for linear operation '//trim(linop%prefix))
      else
         if (any(ieee_is_nan(linop%S))) call mpl%abort('${subr}$','NaN in S for linear operation '//trim(linop%prefix))
      end if
   end if

   ! Check input
   if (linop%n_src>0) then
      if (any(fld_src>huge_real)) call mpl%abort('${subr}$','Overflowing number in fld_src for linear operation '//trim(linop%prefix))
      if (any(ieee_is_nan(fld_src))) call mpl%abort('${subr}$','NaN in fld_src for linear operation '//trim(linop%prefix))
   end if
end if

! Initialization
fld_dst = zero
lmssrc = .false.
if (present(mssrc)) lmssrc = mssrc
lmsdst = .true.
if (present(msdst)) lmsdst = msdst
if (lmssrc) then
   allocate(missing_src(linop%n_dst))
   missing_src = .false.
end if
if (lmsdst) then
   allocate(missing_dst(linop%n_dst))
   missing_dst = .true.
end if

! Apply weights
do i_s=1,linop%n_s
   if (lmssrc) then
      ! Check for missing source (WARNING: source-dependent => no adjoint)
      valid = mpl%msv%isnot(fld_src(linop%col(i_s)))
   else
      ! Source independent
      valid = .true.
   end if

   if (valid) then
      if (present(ivec)) then
         fld_dst(linop%row(i_s)) = fld_dst(linop%row(i_s))+linop%Svec(i_s,ivec)*fld_src(linop%col(i_s))
      else
         fld_dst(linop%row(i_s)) = fld_dst(linop%row(i_s))+linop%S(i_s)*fld_src(linop%col(i_s))
      end if

      ! Check for missing destination
      if (lmsdst) missing_dst(linop%row(i_s)) = .false.
   else
      ! Missing source
      missing_src(linop%row(i_s)) = .true.
   end if
end do

if (lmssrc) then
   ! Missing source values
   do i_dst=1,linop%n_dst
      if (missing_src(i_dst)) fld_dst(i_dst) = mpl%msv%valr
   end do

   ! Release memory
   deallocate(missing_src)
end if

if (lmsdst) then
   ! Missing destination values
   do i_dst=1,linop%n_dst
      if (missing_dst(i_dst)) fld_dst(i_dst) = mpl%msv%valr
   end do

   ! Release memory
   deallocate(missing_dst)
end if

if (check_data) then
   ! Check output
   if (linop%n_dst>0) then
      if (any(ieee_is_nan(fld_dst))) call mpl%abort('${subr}$','NaN in fld_dst for linear operation '//trim(linop%prefix))
   end if
end if

! Probe out
@:probe_out()

end subroutine linop_apply

!----------------------------------------------------------------------
! Subroutine: linop_apply_ad
!> Apply linear operator, adjoint
!----------------------------------------------------------------------
subroutine linop_apply_ad(linop,mpl,fld_dst,fld_src,ivec)

implicit none

! Passed variables
class(linop_type),intent(in) :: linop               !< Linear operator
type(mpl_type),intent(inout) :: mpl                 !< MPI data
real(kind_real),intent(in) :: fld_dst(linop%n_dst)  !< Destination vector
real(kind_real),intent(out) :: fld_src(linop%n_src) !< Source vector
integer,intent(in),optional :: ivec                 !< Index of the vector of linear operators with similar row and col

! Local variables
integer :: i_s

! Set name
@:set_name(linop_apply_ad)

! Probe in
@:probe_in()

if (check_data) then
   ! Check linear operation
   if (zss_minval(linop%col)<1) call mpl%abort('${subr}$','col<1 for adjoint linear operation '//trim(linop%prefix))
   if (zss_maxval(linop%col)>linop%n_src) call mpl%abort('${subr}$','col>n_src for adjoint linear operation '//trim(linop%prefix))
   if (zss_minval(linop%row)<1) call mpl%abort('${subr}$','row<1 for adjoint linear operation '//trim(linop%prefix))
   if (zss_maxval(linop%row)>linop%n_dst) call mpl%abort('${subr}$','row>n_dst for adjoint linear operation '//trim(linop%prefix))
   if (linop%n_s>0) then
      if (present(ivec)) then
         if (any(ieee_is_nan(linop%Svec))) call mpl%abort('${subr}$','NaN in Svec for adjoint linear operation '//trim(linop%prefix))
      else
         if (any(ieee_is_nan(linop%S))) call mpl%abort('${subr}$','NaN in S for adjoint linear operation '//trim(linop%prefix))
      end if
   end if

   ! Check input
   if (linop%n_dst>0) then
      if (any(fld_dst>huge_real)) &
 & call mpl%abort('${subr}$','Overflowing number in fld_dst for adjoint linear operation '//trim(linop%prefix))
      if (any(ieee_is_nan(fld_dst))) call mpl%abort('${subr}$','NaN in fld_dst for adjoint linear operation '//trim(linop%prefix))
   end if
end if

! Initialization
fld_src = zero

! Apply weights
do i_s=1,linop%n_s
   if (present(ivec)) then
      fld_src(linop%col(i_s)) = fld_src(linop%col(i_s))+linop%Svec(i_s,ivec)*fld_dst(linop%row(i_s))
   else
      fld_src(linop%col(i_s)) = fld_src(linop%col(i_s))+linop%S(i_s)*fld_dst(linop%row(i_s))
   end if
end do

if (check_data) then
   ! Check output
   if (linop%n_src>0) then
      if (any(ieee_is_nan(fld_src))) call mpl%abort('${subr}$','NaN in fld_src for adjoint linear operation '//trim(linop%prefix))
   end if
end if

! Probe out
@:probe_out()

end subroutine linop_apply_ad

!----------------------------------------------------------------------
! Subroutine: linop_add_op
!> Add operation
!----------------------------------------------------------------------
subroutine linop_add_op(linop,n_s,row,col,S,Svec)

implicit none

! Passed variables
class(linop_type),intent(inout) :: linop                !< Linear operators
integer,intent(inout) :: n_s                            !< Number of operations
integer,intent(in) :: row                               !< Row index
integer,intent(in) :: col                               !< Column index
real(kind_real),intent(in),optional :: S                !< Value
real(kind_real),intent(in),optional :: Svec(linop%nvec) !< Values

! Local variables
type(linop_type) :: linop_tmp

! Set name
@:set_name(linop_add_op)

! Probe in
@:probe_in()

! Update
n_s = n_s+1
if (n_s>linop%n_s) then
   ! Copy
   call linop_tmp%copy(linop)

   ! Reallocate larger linear operation
   call linop%dealloc
   linop%n_s = 2*linop_tmp%n_s
   call linop%alloc(linop_tmp%nvec)

   ! Copy data
   linop%row(1:linop_tmp%n_s) = linop_tmp%row
   linop%col(1:linop_tmp%n_s) = linop_tmp%col
   if (linop%nvec>0) then
      linop%Svec(1:linop_tmp%n_s,:) = linop_tmp%Svec
   else
      linop%S(1:linop_tmp%n_s) = linop_tmp%S
   end if

   ! Release memory
   call linop_tmp%dealloc
end if

! New operation
linop%row(n_s) = row
linop%col(n_s) = col
if (linop%nvec>0) then
   linop%Svec(n_s,:) = Svec
else
   linop%S(n_s) = S
end if

! Probe out
@:probe_out()

end subroutine linop_add_op

!----------------------------------------------------------------------
! Subroutine: linop_gather
!> Gather data from OpenMP threads
!----------------------------------------------------------------------
subroutine linop_gather(linop,mpl,n_s_arr,linop_arr)

implicit none

! Passed variables
class(linop_type),intent(inout) :: linop              !< Linear operator
type(mpl_type),intent(inout) :: mpl                   !< MPI data
integer,intent(in) :: n_s_arr(mpl%nthread)            !< Number of operations
type(linop_type),intent(in) :: linop_arr(mpl%nthread) !< Linear operator array

! Local variables
integer :: ithread,offset

! Set name
@:set_name(linop_gather)

! Probe in
@:probe_in()

if (mpl%nthread>1) then
   ! Total number of operations
   linop%n_s = sum(n_s_arr)

   ! Allocation
   call linop%alloc(linop_arr(1)%nvec)

   ! Gather data
   offset = 0
   do ithread=1,mpl%nthread
      linop%row(offset+1:offset+n_s_arr(ithread)) = linop_arr(ithread)%row(1:n_s_arr(ithread))
      linop%col(offset+1:offset+n_s_arr(ithread)) = linop_arr(ithread)%col(1:n_s_arr(ithread))
      if (linop%nvec>0) then
         linop%Svec(offset+1:offset+n_s_arr(ithread),:) = linop_arr(ithread)%Svec(1:n_s_arr(ithread),:)
      else
         linop%S(offset+1:offset+n_s_arr(ithread)) = linop_arr(ithread)%S(1:n_s_arr(ithread))
      end if
      offset = offset+n_s_arr(ithread)
   end do
else
   ! Copy
   call linop%copy(linop_arr(1),n_s_arr(1))
end if

! Probe out
@:probe_out()

end subroutine linop_gather

!----------------------------------------------------------------------
! Subroutine: linop_interp
!> Compute horizontal interpolation
!----------------------------------------------------------------------
subroutine linop_interp(linop,mpl,nam,il0,n_src,lon_src,lat_src,mask_src,mesh_src,tree_src, &
 & n_dst,lon_dst,lat_dst,mask_dst,mesh_mask,ifmt,c1_interp)

implicit none

! Passed variables
class(linop_type),intent(inout) :: linop     !< Linear operator
type(mpl_type),intent(inout) :: mpl          !< MPI data
type(nam_type),intent(in) :: nam             !< Namelist
integer,intent(in) :: il0                    !< Level
integer,intent(in) :: n_src                  !< Source size
real(kind_real),intent(in) :: lon_src(n_src) !< Source longitudes
real(kind_real),intent(in) :: lat_src(n_src) !< Source latitudes
logical,intent(in) :: mask_src(n_src)        !< Source mask
type(mesh_type),intent(in) :: mesh_src       !< Source mesh
type(tree_type),intent(in) :: tree_src       !< Source tree
integer,intent(in) :: n_dst                  !< Destination size
real(kind_real),intent(in) :: lon_dst(n_dst) !< Destination longitudes
real(kind_real),intent(in) :: lat_dst(n_dst) !< Destination latitudes
logical,intent(in) :: mask_dst(n_dst)        !< Destination mask
type(mesh_type),intent(in) :: mesh_mask      !< Mask checking mesh
integer,intent(in) :: ifmt                   !< Format indentation
logical,intent(in),optional :: c1_interp     !< C1 interpolation flag

! Local variables
integer :: i_dst,i,j,n_s,i_s,next,i_s_grad,i_src
integer :: nn_index(1),ib(3),n_s_tmp,n_s_max
integer,allocatable :: row(:),col(:),nn_index_ext(:),col_ind(:),col_tmp(:)
real(kind_real) :: nn_dist(1),b(3),af(3),ag(3,3)
real(kind_real),allocatable :: S(:),S_tmp(:)
logical :: lc1_interp,valid,found,missing(n_dst)
character(len=7) :: cfmt
type(linop_type) :: grad(n_src)

! Set name
@:set_name(linop_interp)

! Probe in
@:probe_in()

! Local flag
lc1_interp = .false.
if (present(c1_interp)) lc1_interp = c1_interp

! Compute interpolation
if (ifmt>0) then
   write(cfmt,'(a,i2.2,a)') '(a',ifmt,',a)'
   write(mpl%info,cfmt) '','Compute interpolation: '
   call mpl%flush(newl=.false.)
   call mpl%prog_init(n_dst)
end if

if (lc1_interp) then
   ! Compute gradient operator
   do i_src=1,n_src
      if (mask_src(i_src)) then
         call grad(i_src)%compute_grad(mpl,i_src,mesh_src,tree_src)
      else
         call mpl%abort('${subr}$','source mask not implemented for C1 interpolation')
      end if
   end do
end if

! Allocation
if (lc1_interp) then
   ! C1 function
   n_s_max = 0
   do i_src=1,n_src
      n_s_max = max(n_s_max,grad(i_src)%n_s)
   end do
   n_s_max = n_s_max+1
   allocate(row(3*n_dst*n_s_max))
   allocate(col(3*n_dst*n_s_max))
   allocate(S(3*n_dst*n_s_max))
else
   ! C0 function
   allocate(row(3*n_dst))
   allocate(col(3*n_dst))
   allocate(S(3*n_dst))
end if

n_s = 0
do i_dst=1,n_dst
   if (mask_dst(i_dst)) then
      ! Find nearest neighbor
      call tree_src%find_nearest_neighbors(lon_dst(i_dst),lat_dst(i_dst),1,nn_index,nn_dist)

      if (sup(nn_dist(1),1.0e-10_kind_real).or.(.not.mask_src(nn_index(1)))) then
         ! Compute barycentric coordinates
         call mesh_src%barycentric(mpl,lon_dst(i_dst),lat_dst(i_dst),tree_src,b,ib)
         valid = mpl%msv%isallnot(ib)
         found = .false.

         ! Check mask
         if (valid) then
            do i=1,3
               if (b(i)>repro_th) valid = valid.and.mask_src(ib(i))
            end do
         end if

         ! Check arcs
         if (valid.and.nam%mask_check) then
            do i=1,3
               if (b(i)>repro_th) call mesh_mask%check_arc(mpl,lon_src(ib(i)),lat_src(ib(i)),lon_dst(i_dst),lat_dst(i_dst),il0, &
 & valid)
            end do
         end if

         if (valid) then
            if (lc1_interp) then
               ! C1 function
 
               ! Allocation
               allocate(col_ind(3*n_s_max))

               ! Normalize coordinates
               if (sum(b)>zero) then
                  b = b/sum(b)
               else
                  b = zero
               end if

               ! Compute C1 interpolation coefficients
               call mesh_src%compute_c1_interp_op(mpl,b,ib,af,ag)

               ! Count number of different column indices
               n_s_tmp = 0
               do i=1,3
                  n_s_tmp = n_s_tmp+1
                  col_ind(n_s_tmp) = ib(i)
               end do
               do i=1,3
                  do i_s_grad=1,grad(ib(i))%n_s
                     if (all(col_ind(1:n_s_tmp)/=grad(ib(i))%col(i_s_grad))) then
                        n_s_tmp = n_s_tmp+1
                        col_ind(n_s_tmp) = grad(ib(i))%col(i_s_grad)
                     end if
                  end do
               end do

               ! Allocation
               allocate(col_tmp(n_s_tmp))
               allocate(S_tmp(n_s_tmp))

               ! Initialization
               S_tmp = zero

               ! Copy
               do i_s=1,n_s_tmp
                  col_tmp(i_s) = col_ind(i_s)
                  do i=1,3
                     if (col_tmp(i_s)==ib(i)) S_tmp(i_s) = S_tmp(i_s)+af(i)
                     do j=1,3
                        do i_s_grad=1,grad(ib(j))%n_s
                           if (col_tmp(i_s)==grad(ib(j))%col(i_s_grad)) S_tmp(i_s) = S_tmp(i_s) &
 & +grad(ib(j))%Svec(i_s_grad,i)*ag(i,j)
                        end do
                     end do
                  end do
               end do

               ! Normalize weights
               if (sum(S_tmp)>zero) then
                  S_tmp = S_tmp/sum(S_tmp)
               else
                  S_tmp = zero
               end if

               ! Copy into row/col/S
               do i_s=1,n_s_tmp
                  if (abs(S_tmp(i_s))>zero) then
                     found = .true.
                     n_s = n_s+1
                     row(n_s) = i_dst
                     col(n_s) = col_tmp(i_s)
                     S(n_s) = S_tmp(i_s)
                  end if
               end do

               ! Release memory
               deallocate(col_ind)
               deallocate(col_tmp)
               deallocate(S_tmp)
            else
               ! C0 interpolation

               ! Normalize weights
               if (sum(b)>zero) then
                  b = b/sum(b)
               else
                  b = zero
               end if

               ! Apply threshold
               do i=1,3
                  if (inf(b(i),S_inf)) b(i) = zero
               end do

               ! Normalize weights
               if (sum(b)>zero) then
                  b = b/sum(b)
               else
                  b = zero
               end if

               ! Copy into row/col/S
               do i=1,3
                  if (b(i)>zero) then
                     found = .true.
                     n_s = n_s+1
                     row(n_s) = i_dst
                     col(n_s) = ib(i)
                     S(n_s) = b(i)
                  end if
               end do
            end if
         end if

         if ((.not.valid).or.(.not.found)) then
            ! Find nearest valid neighbor
            next = 1
            do while (.not.found)
               ! Allocation
               allocate(nn_index_ext(next))

               ! Find nearest neighors
               call tree_src%find_nearest_neighbors(lon_dst(i_dst),lat_dst(i_dst),next,nn_index_ext)

               ! Check mask
               if (mask_src(nn_index_ext(next))) then
                  found = .true.
               else
                  next = next+1
                  deallocate(nn_index_ext)
               end if

               ! Check next
               if (next>n_src) call mpl%abort('${subr}$','cannot find valid nearest neighbor')
            end do
            n_s = n_s+1
            row(n_s) = i_dst
            col(n_s) = nn_index_ext(next)
            S(n_s) = one
            deallocate(nn_index_ext)
         end if
      else
         ! Valid subsampled point
         n_s = n_s+1
         row(n_s) = i_dst
         col(n_s) = nn_index(1)
         S(n_s) = one
      end if
   end if

   ! Update
   if (ifmt>0) call mpl%prog_print(i_dst)
end do
if (ifmt>0) call mpl%prog_final

! Check interpolation
do i_s=1,n_s
   if (.not.mask_src(col(i_s))) call mpl%abort('${subr}$','masked source point')
end do
missing = .false.
do i_dst=1,n_dst
   if (mask_dst(i_dst)) missing(i_dst) = .true.
end do
do i_s=1,n_s
   missing(row(i_s)) = .false.
end do
if (any(missing)) call mpl%abort('${subr}$','missing destination points')

! Allocation
linop%n_s = n_s
linop%n_src = n_src
linop%n_dst = n_dst
call linop%alloc

! Copy data
linop%row = row(1:linop%n_s)
linop%col = col(1:linop%n_s)
linop%S = S(1:linop%n_s)

! Release memory
if (lc1_interp) then
   do i_src=1,n_src
      call grad(i_src)%dealloc
   end do
end if
deallocate(row)
deallocate(col)
deallocate(S)

! Probe out
@:probe_out()

end subroutine linop_interp

!----------------------------------------------------------------------
! Subroutine: linop_interp_lat
!> Compute horizontal interpolation (latitude bands)
!----------------------------------------------------------------------
subroutine linop_interp_lat(linop,mpl,n_src,lat_src,n_dst,lat_dst,mask_dst,ifmt)

implicit none

! Passed variables
class(linop_type),intent(inout) :: linop     !< Linear operator
type(mpl_type),intent(inout) :: mpl          !< MPI data
integer,intent(in) :: n_src                  !< Source size
real(kind_real),intent(in) :: lat_src(n_src) !< Source latitudes
integer,intent(in) :: n_dst                  !< Destination size
real(kind_real),intent(in) :: lat_dst(n_dst) !< Destination latitudes
logical,intent(in) :: mask_dst(n_dst)        !< Destination mask
integer,intent(in) :: ifmt                   !< Format indentation

! Local variables
integer :: i_src,i_dst,n_s
integer :: order(n_src)
integer :: row(2*n_dst),col(2*n_dst)
real(kind_real) :: lat_src_tmp(n_src),S(2*n_dst)
character(len=7) :: cfmt

! Set name
@:set_name(linop_interp_lat)

! Probe in
@:probe_in()

! Order source points
lat_src_tmp = lat_src
call qsort(n_src,lat_src_tmp,order)

! Compute interpolation
if (ifmt>0) then
   write(cfmt,'(a,i2.2,a)') '(a',ifmt,',a)'
   write(mpl%info,cfmt) '','Compute interpolation: '
   call mpl%flush(newl=.false.)
   call mpl%prog_init(n_dst)
end if
n_s = 0
col = mpl%msv%vali
do i_dst=1,n_dst
   if (mask_dst(i_dst)) then
      if (n_src==1) then
         ! Destination point
         row(n_s+1) = i_dst

         ! Source point
         col(n_s+1) = 1

         ! Weights
         S(n_s+1) = one

         ! Update counter
         n_s = n_s+1
      else
         ! Destination point
         row(n_s+1) = i_dst
         row(n_s+2) = i_dst

         ! Source points
         if (eq(lat_dst(i_dst),lat_src_tmp(1))) then
            ! First latitude point
            col(n_s+1) = 1
            col(n_s+2) = 2
         else
            ! In between
            do i_src=1,n_src-1
               if (inf(lat_src_tmp(i_src),lat_dst(i_dst)).and.infeq(lat_dst(i_dst),lat_src_tmp(i_src+1))) then
                  col(n_s+1) = i_src
                  col(n_s+2) = i_src+1
                  exit
               end if
            end do
         end if

         ! Check source points
         if (mpl%msv%is(col(n_s+1)).or.mpl%msv%is(col(n_s+2))) call mpl%abort('${subr}$','cannot find source points')

         ! Weights
         S(n_s+1) = (lat_src_tmp(col(n_s+2))-lat_dst(i_dst))/(lat_src_tmp(col(n_s+2))-lat_src_tmp(col(n_s+1)))
         S(n_s+2) = (lat_dst(i_dst)-lat_src_tmp(col(n_s+1)))/(lat_src_tmp(col(n_s+2))-lat_src_tmp(col(n_s+1)))

         ! Update counter
         n_s = n_s+2
      end if
   end if

   ! Update
   if (ifmt>0) call mpl%prog_print(i_dst)
end do
if (ifmt>0) call mpl%prog_final

! Allocation
linop%n_s = n_s
linop%n_src = n_src
linop%n_dst = n_dst
call linop%alloc

! Copy data
linop%row = row(1:linop%n_s)
linop%col = order(col(1:linop%n_s))
linop%S = S(1:linop%n_s)

! Probe out
@:probe_out()

end subroutine linop_interp_lat

!----------------------------------------------------------------------
! Subroutine: linop_interp_nn
!> Compute horizontal interpolation (nearest valid neighbor)
!----------------------------------------------------------------------
subroutine linop_interp_nn(linop,mpl,nam,il0,n_src,lon_src,lat_src,mask_src,tree_src,n_dst,lon_dst,lat_dst,mask_dst,mesh_mask, &
 & ifmt,rh)

implicit none

! Passed variables
class(linop_type),intent(inout) :: linop         !< Linear operator
type(mpl_type),intent(inout) :: mpl              !< MPI data
type(nam_type),intent(in) :: nam                 !< Namelist
integer,intent(in) :: il0                        !< Level
integer,intent(in) :: n_src                      !< Source size
real(kind_real),intent(in) :: lon_src(n_src)     !< Source longitudes
real(kind_real),intent(in) :: lat_src(n_src)     !< Source latitudes
logical,intent(in) :: mask_src(n_src)            !< Source mask
type(tree_type),intent(in) :: tree_src           !< Source tree
integer,intent(in) :: n_dst                      !< Destination size
real(kind_real),intent(in) :: lon_dst(n_dst)     !< Destination longitudes
real(kind_real),intent(in) :: lat_dst(n_dst)     !< Destination latitudes
logical,intent(in) :: mask_dst(n_dst)            !< Destination mask
type(mesh_type),intent(in) :: mesh_mask          !< Mask checking mesh
integer,intent(in) :: ifmt                       !< Format indentation
real(kind_real),intent(in),optional :: rh(n_dst) !< Interpolation radius

! Local variables
integer :: n_s_max,ithread,i_dst,i_s,i,n
integer :: c_n_s(mpl%nthread)
integer,allocatable :: nn_index(:)
real(kind_real) :: lrh(n_dst),nd
real(kind_real),allocatable :: nn_dist(:),wgt(:)
logical :: found,missing(n_dst)
logical,allocatable :: nn_valid(:)
character(len=7) :: cfmt
type(linop_type) :: c(mpl%nthread)

! Set name
@:set_name(linop_interp_nn)

! Probe in
@:probe_in()

! Local interpolation radius
lrh = zero
if (present(rh)) lrh = rh

! Allocation
n_s_max = int(real(30*n_dst,kind_real)/real(mpl%nthread,kind_real))
do ithread=1,mpl%nthread
   c(ithread)%n_s = n_s_max
   call c(ithread)%alloc
end do

! Initialization
c_n_s = 0

! Compute interpolation
if (ifmt>0) then
   write(cfmt,'(a,i2.2,a)') '(a',ifmt,',a)'
   write(mpl%info,cfmt) '','Compute interpolation: '
   call mpl%flush(newl=.false.)
   call mpl%prog_init(n_dst)
end if
!$omp parallel do schedule(static) private(i_dst,ithread,n,i,nd,found) firstprivate(nn_index,nn_dist,nn_valid,wgt)
do i_dst=1,n_dst
   if (mask_dst(i_dst)) then
      ! Find nearest valid neighbors
      ithread = 1
!$    ithread = omp_get_thread_num()+1
      if (lrh(i_dst)>zero) then
         ! Count number of required neighbors
         call tree_src%count_nearest_neighbors(lon_dst(i_dst),lat_dst(i_dst),lrh(i_dst),n)
         n = max(n,1)
      else
         n = 1
      end if

      ! Allocation
      allocate(nn_index(n))
      allocate(nn_dist(n))
      allocate(nn_valid(n))

      ! Find nearest neighors
      call tree_src%find_nearest_neighbors(lon_dst(i_dst),lat_dst(i_dst),n,nn_index,nn_dist)

      ! Check if neighbors are masked
      do i=1,n
         nn_valid(i) = mask_src(nn_index(i))
      end do

      ! Check arcs
      if (nam%mask_check) then
         do i=1,n
            if (nn_valid(i)) call mesh_mask%check_arc(mpl,lon_src(nn_index(i)),lat_src(nn_index(i)), &
 & lon_dst(i_dst),lat_dst(i_dst),il0,nn_valid(i))
         end do
      end if

      ! Check validity
      found = .true.
      if (lrh(i_dst)>zero) then
         if (count(nn_valid(1:n))<nmin) found = .false.
      else
         if (.not.nn_valid(1)) found = .false.
      end if

      if (found) then
         ! Add valid operations
         if (lrh(i_dst)>zero) then
            ! Allocation
            allocate(wgt(n))

            ! Compute weights
            wgt = zero
            do i=1,n
               if (nn_valid(i)) then
                 nd = nn_dist(i)/lrh(i_dst)
                 wgt(i) = fit_func(mpl,'hor',nd)
               end if
            end do

            ! Normalize weights
            wgt = wgt/sum(wgt)

            ! Copy indices and weights
            do i=1,n
               if (wgt(i)>zero) call c(ithread)%add_op(c_n_s(ithread),i_dst,nn_index(i),wgt(i))
            end do

            ! Release memory
            deallocate(wgt)
         else
            ! Copy index and weight
            call c(ithread)%add_op(c_n_s(ithread),i_dst,nn_index(1),one)
         end if
      else
         ! Fallback to nearest non-masked neighbor
         n = n+1
         do while (.not.found)
            if (n>n_src) call mpl%abort('${subr}$','cannot find valid nearest neighbor')

            ! Release memory
            deallocate(nn_index)

            ! Allocation
            allocate(nn_index(n))

            ! Find nearest neighors
            call tree_src%find_nearest_neighbors(lon_dst(i_dst),lat_dst(i_dst),n,nn_index)

            ! Check if last neighbor is masked
            if (mask_src(nn_index(n))) then
               call c(ithread)%add_op(c_n_s(ithread),i_dst,nn_index(n),one)
               found = .true.
            else
               n = n+1
            end if
         end do
      end if

      ! Release memory
      deallocate(nn_index)
      deallocate(nn_dist)
      deallocate(nn_valid)
   end if

   ! Update
   if (ifmt>0) call mpl%prog_print(i_dst)
end do
!$omp end parallel do
if (ifmt>0) call mpl%prog_final

! Gather data from threads
call linop%gather(mpl,c_n_s,c)
linop%n_src = n_src
linop%n_dst = n_dst

! Check interpolation
missing = .false.
do i_dst=1,n_dst
   if (mask_dst(i_dst)) missing(i_dst) = .true.
end do
do i_s=1,linop%n_s
   missing(linop%row(i_s)) = .false.
end do
if (linop%n_s>0) then
   if (any(missing)) call mpl%abort('${subr}$','missing destination points')
end if

! Probe out
@:probe_out()

end subroutine linop_interp_nn

!----------------------------------------------------------------------
! Subroutine: linop_compute_grad
!> Compute gradient
!----------------------------------------------------------------------
subroutine linop_compute_grad(linop,mpl,i,mesh,tree)

implicit none

! Passed variables
class(linop_type),intent(inout) :: linop !< Linear operator
type(mpl_type),intent(inout) :: mpl      !< MPI data
integer,intent(in) :: i                  !< Index
type(mesh_type),intent(in) :: mesh       !< Mesh
type(tree_type),intent(in) :: tree       !< Tree

! Local variables
integer,parameter :: nn_grad = 8
integer :: j,j_next,km_next,i_s,im
integer,allocatable :: km(:),nn_index(:)
real(kind_real) :: cx,sx,cy,sy,gamma,wgt,wgt_sum
real(kind_real),allocatable :: xp(:),yp(:),zp(:)
real(kind_real),allocatable :: Svec_tmp(:,:)

! Set name
@:set_name(linop_compute_grad)

! Probe in
@:probe_in()

! Inverse order
im = mesh%order_inv(i)

! Construct the rotation
call constr(mesh%x(im),mesh%y(im),mesh%z(im),cx,sx,cy,sy)

if (.false.) then
   ! Allocation
   linop%n_s = nn_grad+1
   call linop%alloc(3)
   allocate(Svec_tmp(linop%n_s,2))
   allocate(nn_index(nn_grad+1))
   allocate(km(nn_grad+1))
   allocate(xp(nn_grad+1))
   allocate(yp(nn_grad+1))
   allocate(zp(nn_grad+1))

   ! Get nearest neighbors
   call tree%find_nearest_neighbors(mesh%lon(im),mesh%lat(im),nn_grad+1,nn_index)
   
   ! Loop over neigbors
   do j=1,nn_grad+1
      ! Inverse order
      km(j) = mesh%order_inv(nn_index(j))

      ! Get rotated coordinates
      call aplyr(mpl,mesh%x(km(j)),mesh%y(km(j)),mesh%z(km(j)),cx,sx,cy,sy,xp(j),yp(j),zp(j))
   end do

   ! Initialization
   wgt_sum = zero
   linop%col = nn_index
   Svec_tmp = zero

   ! Loop over neigbors
   do j=2,nn_grad+1
      if ((xp(j)>zero).and.(yp(j)>zero)) then
         ! Weight
         wgt = one/(xp(j)**2+yp(j)**2)
         wgt_sum = wgt_sum+wgt

         ! Add contribution
         do i_s=1,linop%n_s
            if (linop%col(i_s)==nn_index(1)) then
               Svec_tmp(i_s,1) = Svec_tmp(i_s,1)-wgt/xp(j)
               Svec_tmp(i_s,2) = Svec_tmp(i_s,2)-wgt/yp(j)
            end if
            if (linop%col(i_s)==nn_index(j)) then
               Svec_tmp(i_s,1) = Svec_tmp(i_s,1)+wgt/xp(j)
               Svec_tmp(i_s,2) = Svec_tmp(i_s,2)+wgt/yp(j)
            end if
         end do
      end if
   end do

   ! Averaged gradient
   if (wgt_sum>zero) then
      Svec_tmp = Svec_tmp/wgt_sum
   else
      call mpl%abort('${subr}$','zero weight sum')
   end if

   ! Apply inverse rotation
   linop%Svec(1:linop%n_s,1) = cy*Svec_tmp(:,1)
   linop%Svec(1:linop%n_s,2) = cx*Svec_tmp(:,2)-sx*sy*Svec_tmp(:,1)
   linop%Svec(1:linop%n_s,3) = -sx*Svec_tmp(:,2)-cx*sy*Svec_tmp(:,1)

   ! Release memory
   deallocate(Svec_tmp)
   deallocate(nn_index)
   deallocate(km)
   deallocate(xp)
   deallocate(yp)
   deallocate(zp)
else
   ! Allocation
   linop%n_s = mesh%rows(im)%cols+1
   call linop%alloc(3)
   allocate(Svec_tmp(linop%n_s,2))
   allocate(km(mesh%rows(im)%cols))
   allocate(xp(mesh%rows(im)%cols))
   allocate(yp(mesh%rows(im)%cols))
   allocate(zp(mesh%rows(im)%cols))
   
   ! Loop over neigbors
   do j=1,mesh%rows(im)%cols
      ! Get index
      km(j) = mesh%rows(im)%nodes(j)
   
      ! Get rotated coordinates
      call aplyr(mpl,mesh%x(km(j)),mesh%y(km(j)),mesh%z(km(j)),cx,sx,cy,sy,xp(j),yp(j),zp(j))
   end do
   
   ! Initialization
   wgt_sum = zero
   i_s = 1
   linop%col(i_s) = im
   do j=1,mesh%rows(im)%cols
      i_s = i_s+1
      linop%col(i_s) = km(j)
   end do
   Svec_tmp = zero
   
   ! Loop over triangles
   do j=1,mesh%rows(im)%cols
      ! Get next neighbor
      if (j<mesh%rows(im)%cols) then
         j_next = j+1
      else
         j_next = 1
      end if
      km_next = km(j_next)
   
      ! Compute plane's normal vector components
      ! See Goodman et al., 1995: Local Derivative Estimation for Scattered Data Interpolation, section 3
      ! Warning: in second equation of (8) for beta, "y"s should be "x"s
      gamma = xp(j)*yp(j_next)-xp(j_next)*yp(j)
      if (abs(gamma)>zero) then
         ! Weight
         wgt = two/abs(gamma)
         wgt_sum = wgt_sum+wgt

         ! Add contribution
         do i_s=1,linop%n_s
            if (linop%col(i_s)==im) then
               Svec_tmp(i_s,1) = Svec_tmp(i_s,1)+wgt*(yp(j)-yp(j_next))/gamma
               Svec_tmp(i_s,2) = Svec_tmp(i_s,2)+wgt*(xp(j_next)-xp(j))/gamma
            end if
            if (linop%col(i_s)==km(j)) then
               Svec_tmp(i_s,1) = Svec_tmp(i_s,1)+wgt*yp(j_next)/gamma
               Svec_tmp(i_s,2) = Svec_tmp(i_s,2)-wgt*xp(j_next)/gamma
            end if
            if (linop%col(i_s)==km_next) then
               Svec_tmp(i_s,1) = Svec_tmp(i_s,1)-wgt*yp(j)/gamma
               Svec_tmp(i_s,2) = Svec_tmp(i_s,2)+wgt*xp(j)/gamma
            end if
         end do
      else
         call mpl%abort('${subr}$','gamma should not be zero')
      end if
   end do
   
   ! Averaged gradient
   if (wgt_sum>zero) then
      Svec_tmp = Svec_tmp/wgt_sum
   else
      call mpl%abort('${subr}$','zero weight sum')
   end if
   
   ! Grid indices
   do i_s=1,linop%n_s
      linop%col(i_s) = mesh%order(linop%col(i_s))
   end do
   
   ! Apply inverse rotation
   linop%Svec(1:linop%n_s,1) = cy*Svec_tmp(:,1)
   linop%Svec(1:linop%n_s,2) = cx*Svec_tmp(:,2)-sx*sy*Svec_tmp(:,1)
   linop%Svec(1:linop%n_s,3) = -sx*Svec_tmp(:,2)-cx*sy*Svec_tmp(:,1)
   
   ! Release memory
   deallocate(Svec_tmp)
   deallocate(km)
   deallocate(xp)
   deallocate(yp)
   deallocate(zp)
end if

! Probe out
@:probe_out()

end subroutine linop_compute_grad

end module type_linop
