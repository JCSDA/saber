#:include 'instrumentation.fypp'
#:include 'generics.fypp'
!----------------------------------------------------------------------
! Module: tools_gc99
!> Gaspari and Cohn (1999)-inspired functions and their square-roots
! Author: Benjamin Menetrier
! Licensing: this code is distributed under the CeCILL-C license
! Copyright 2015-... UCAR, CERFACS, METEO-FRANCE and IRIT
! WARNING: this module is generated by the python script
!            tools/saber_fit_function.py
!          to modify this module, update and rerun the python script
! 2015-... UCAR, CERFACS, METEO-FRANCE and IRIT
!----------------------------------------------------------------------
module tools_gc99

use tools_const, only: zero,half,one,two
use tools_kinds, only: kind_real
use tools_netcdf, only: open_file,inquire_dim_size,get_att,inquire_var,get_var,close_file
use tools_repro, only: repro_th,eq,inf,infeq,sup
use type_mpl, only: mpl_type
@:use_probe()

implicit none

! Public parameters
integer,parameter :: nnd = 51
integer,parameter :: naxis_inv = 8
real(kind_real),parameter :: ndmin = 0.00000000_kind_real
real(kind_real),parameter :: ndmax = 1.00000000_kind_real
real(kind_real),parameter :: dnd = 0.02000000_kind_real
real(kind_real),parameter :: axis_invmin = 0.20000000_kind_real
real(kind_real),parameter :: axis_invmax = 0.90000000_kind_real
real(kind_real),parameter :: axis_inv(naxis_inv) = (/ &
 & 0.20000000_kind_real, &
 & 0.30000000_kind_real, &
 & 0.40000000_kind_real, &
 & 0.50000000_kind_real, &
 & 0.60000000_kind_real, &
 & 0.70000000_kind_real, &
 & 0.80000000_kind_real, &
 & 0.90000000_kind_real/)
real(kind_real),parameter :: func_inv_hor(naxis_inv) = (/ &
 & 0.52493537_kind_real, &
 & 0.45867618_kind_real, &
 & 0.40328526_kind_real, &
 & 0.35260315_kind_real, &
 & 0.30349756_kind_real, &
 & 0.25363138_kind_real, &
 & 0.20023294_kind_real, &
 & 0.13645909_kind_real/)
real(kind_real),parameter :: func_hor(nnd) = (/ &
 & 1.00000000_kind_real, &
 & 0.99763095_kind_real, &
 & 0.99066350_kind_real, &
 & 0.97930394_kind_real, &
 & 0.96444048_kind_real, &
 & 0.94459916_kind_real, &
 & 0.92155595_kind_real, &
 & 0.89536258_kind_real, &
 & 0.86619744_kind_real, &
 & 0.83444272_kind_real, &
 & 0.80041852_kind_real, &
 & 0.76448545_kind_real, &
 & 0.72648585_kind_real, &
 & 0.68762573_kind_real, &
 & 0.64765586_kind_real, &
 & 0.60715551_kind_real, &
 & 0.56623840_kind_real, &
 & 0.52546185_kind_real, &
 & 0.48505631_kind_real, &
 & 0.44508100_kind_real, &
 & 0.40620171_kind_real, &
 & 0.36844690_kind_real, &
 & 0.33223519_kind_real, &
 & 0.29771507_kind_real, &
 & 0.26507979_kind_real, &
 & 0.23452434_kind_real, &
 & 0.20660278_kind_real, &
 & 0.17984581_kind_real, &
 & 0.15574377_kind_real, &
 & 0.13377315_kind_real, &
 & 0.11462341_kind_real, &
 & 0.09637051_kind_real, &
 & 0.08039710_kind_real, &
 & 0.06657327_kind_real, &
 & 0.05432425_kind_real, &
 & 0.04369898_kind_real, &
 & 0.03466290_kind_real, &
 & 0.02722834_kind_real, &
 & 0.02058214_kind_real, &
 & 0.01520998_kind_real, &
 & 0.01106331_kind_real, &
 & 0.00762670_kind_real, &
 & 0.00514772_kind_real, &
 & 0.00320818_kind_real, &
 & 0.00190125_kind_real, &
 & 0.00101978_kind_real, &
 & 0.00045321_kind_real, &
 & 0.00016843_kind_real, &
 & 0.00004210_kind_real, &
 & 0.00000335_kind_real, &
 & 0.00000000_kind_real/)
real(kind_real),parameter :: func_inv_ver(naxis_inv) = (/ &
 & 0.53598040_kind_real, &
 & 0.46866120_kind_real, &
 & 0.41267433_kind_real, &
 & 0.36118279_kind_real, &
 & 0.31105744_kind_real, &
 & 0.25992387_kind_real, &
 & 0.20463576_kind_real, &
 & 0.13909325_kind_real/)
real(kind_real),parameter :: func_ver(nnd) = (/ &
 & 1.00000000_kind_real, &
 & 0.99765451_kind_real, &
 & 0.99079426_kind_real, &
 & 0.97969549_kind_real, &
 & 0.96466052_kind_real, &
 & 0.94599971_kind_real, &
 & 0.92396748_kind_real, &
 & 0.89886177_kind_real, &
 & 0.87097591_kind_real, &
 & 0.84059109_kind_real, &
 & 0.80799930_kind_real, &
 & 0.77348800_kind_real, &
 & 0.73734335_kind_real, &
 & 0.69985731_kind_real, &
 & 0.66131200_kind_real, &
 & 0.62199983_kind_real, &
 & 0.58220794_kind_real, &
 & 0.54222400_kind_real, &
 & 0.50233620_kind_real, &
 & 0.46283295_kind_real, &
 & 0.42400018_kind_real, &
 & 0.38612807_kind_real, &
 & 0.34950399_kind_real, &
 & 0.31440030_kind_real, &
 & 0.28114786_kind_real, &
 & 0.25000000_kind_real, &
 & 0.22118847_kind_real, &
 & 0.19467039_kind_real, &
 & 0.17036798_kind_real, &
 & 0.14818225_kind_real, &
 & 0.12800035_kind_real, &
 & 0.10974394_kind_real, &
 & 0.09331200_kind_real, &
 & 0.07860806_kind_real, &
 & 0.06553623_kind_real, &
 & 0.05400056_kind_real, &
 & 0.04390400_kind_real, &
 & 0.03515189_kind_real, &
 & 0.02765020_kind_real, &
 & 0.02129600_kind_real, &
 & 0.01600068_kind_real, &
 & 0.01166412_kind_real, &
 & 0.00819203_kind_real, &
 & 0.00548883_kind_real, &
 & 0.00345597_kind_real, &
 & 0.00200009_kind_real, &
 & 0.00102297_kind_real, &
 & 0.00043200_kind_real, &
 & 0.00013504_kind_real, &
 & 0.00001659_kind_real, &
 & 0.00000000_kind_real/)

interface fit_func
   module procedure gc99_fit_func
end interface
interface fit_func_sqrt
   module procedure gc99_fit_func_sqrt
end interface

private
public :: naxis_inv,axis_inv,axis_invmin,axis_invmax
public :: func_inv_hor,func_inv_ver
public :: fit_func,fit_func_sqrt

contains

!----------------------------------------------------------------------
! Function: gc99_fit_func
!> Fit function
!----------------------------------------------------------------------
function gc99_fit_func(mpl,dir,nd) result(value)

! Passed variables
type(mpl_type),intent(inout) :: mpl !< MPI data
character(len=*),intent(in) :: dir  !< Direction
real(kind_real),intent(in) :: nd    !< Normalized distance

! Returned variable
real(kind_real) :: value

! Local variables
integer :: indm,indp
real(kind_real) :: rndm,rndp

! Set name
@:set_name(gc99_fit_func)

! Probe in
@:probe_in()

! Check bounds
if (inf(nd,zero)) call mpl%abort('${subr}$','negative normalized distance')

! Initialization
value = zero

if (eq(nd,zero)) then
   ! Origin
   value = one
elseif (infeq(nd,one)) then
   ! Inside support

   ! Indices
   indm = floor(nd/dnd)+1
   if (indm==nnd) then
      indp = indm
   else
      indp = indm+1
   end if

   ! Coefficients
   if (indm==nnd) then
      rndm = one
   else
      rndm = real(indp-1,kind_real)-nd/dnd
   end if
   rndp = (one-rndm)

   ! Interpolated value
   if (dir=='hor') then
      ! Horizontal fit function
      value = rndm*func_hor(indm)+rndp*func_hor(indp)
   elseif (dir=='ver') then
      ! Vertical fit function
      value = rndm*func_ver(indm)+rndp*func_ver(indp)
   else
      call mpl%abort('${subr}$','wrong direction: '//dir)
   end if
end if

! Probe out
@:probe_out()

end function gc99_fit_func

!----------------------------------------------------------------------
! Function: gc99_fit_func_sqrt
!> Fit function function square-root
!----------------------------------------------------------------------
function gc99_fit_func_sqrt(mpl,nd) result(value)

! Passed variables
type(mpl_type),intent(inout) :: mpl !< MPI data
real(kind_real),intent(in) :: nd    !< Normalized distance

! Returned variable
real(kind_real) :: value

! Set name
@:set_name(gc99_fit_func_sqrt)

! Probe in
@:probe_in()

! Check bounds
if (inf(nd,zero)) call mpl%abort('${subr}$','negative normalized distance')

! Initialization
value = zero

if (eq(nd,zero)) then
   ! Origin
   value = one
elseif (infeq(nd,half)) then
   ! Inside support
   value = one-(two*nd)
end if

! Probe out
@:probe_out()

end function gc99_fit_func_sqrt

end module tools_gc99
