#:include 'instrumentation.fypp'
!----------------------------------------------------------------------
! Module: type_mom
!> Moments derived type
! Author: Benjamin Menetrier
! Licensing: this code is distributed under the CeCILL-C license
! Copyright 2015-... UCAR, CERFACS, METEO-FRANCE and IRIT
!----------------------------------------------------------------------
module type_mom

use fckit_mpi_module, only: fckit_mpi_sum,fckit_mpi_status
!$ use omp_lib
use tools_const, only: zero,one,two,four
use tools_kinds, only: kind_real
use tools_netcdf, only: create_file,open_file,define_grp,inquire_grp,define_dim,check_dim,inquire_dim_size,define_var, &
 & inquire_var,put_var,get_var,close_file
use tools_repro, only: eq
use type_ens, only: ens_type
use type_geom, only: geom_type
use type_mom_blk, only: mom_blk_type
use type_mpl, only: mpl_type
use type_nam, only: nam_type
@:use_probe()
use type_samp, only: samp_type

implicit none

! Moments derived type
type mom_type
   ! Moments data
   integer :: iens                             !< Ensemble index
   integer :: ne                               !< Ensemble size
   integer :: nsub                             !< Number of sub-ensembles
   type(mom_blk_type),allocatable :: blk(:)    !< Moments blocks
   real(kind_real),allocatable :: m1(:,:,:)    !< Ensemble mean
   real(kind_real),allocatable :: m2(:,:,:)    !< Ensemble variance
   real(kind_real),allocatable :: dirac(:,:,:) !< Raw ensemble dirac test

   ! Dimensions for local I/O
   integer :: nc1a                             !< Number of points in subset Sc1, halo A
contains
   procedure :: alloc => mom_alloc
   procedure :: init => mom_init
   procedure :: partial_dealloc => mom_partial_dealloc
   procedure :: dealloc => mom_dealloc
   procedure :: mom_read
   procedure :: mom_read_single
   generic :: read => mom_read,mom_read_single
   procedure :: mom_write
   procedure :: mom_write_single
   generic :: write => mom_write,mom_write_single
   procedure :: send => mom_send
   procedure :: receive => mom_receive
   procedure :: update => mom_update
   procedure :: compute => mom_compute
end type mom_type

private
public :: mom_type

contains

!----------------------------------------------------------------------
! Subroutine: mom_alloc
!> Allocation
!----------------------------------------------------------------------
subroutine mom_alloc(mom,nam,geom,ne,nsub,iens)

implicit none

! Passed variables
class(mom_type),intent(inout) :: mom  !< Moments
type(nam_type),intent(in) :: nam      !< Namelist
type(geom_type),intent(in) :: geom    !< Geometry
integer,intent(in) :: ne              !< Ensemble size
integer,intent(in) :: nsub            !< Number of sub-ensembles
integer,intent(in) :: iens            !< Ensemble index

! Local variables
integer :: iv

! Set name
@:set_name(mom_alloc)

! Probe in
@:probe_in()

! Set attributes
mom%ne = ne
mom%nsub = nsub
mom%iens = iens

! Allocation
allocate(mom%blk(nam%nv))
do iv=1,nam%nv
   ! Allocation
   call mom%blk(iv)%alloc(nam,geom,mom%nc1a,ne,nsub,nam%iterative_algo)
end do
if (nam%check_dirac) then
   if (nam%iterative_algo) then
      allocate(mom%m1(geom%nc0a,geom%nl0,nam%nv))
      allocate(mom%m2(geom%nc0a,geom%nl0,nam%nv))
   end if
   allocate(mom%dirac(geom%nc0a,geom%nl0,nam%nv))
end if

! Probe out
@:probe_out()

end subroutine mom_alloc

!----------------------------------------------------------------------
! Subroutine: mom_init
!> Initialization
!----------------------------------------------------------------------
subroutine mom_init(mom,nam)

implicit none

! Passed variables
class(mom_type),intent(inout) :: mom !< Moments
type(nam_type),intent(in) :: nam     !< Namelist

! Local variables
integer :: iv

! Set name
@:set_name(mom_init)

! Probe in
@:probe_in()

! Initialization
do iv=1,nam%nv
   call mom%blk(iv)%init(nam%iterative_algo)
end do
if (nam%check_dirac) then
   if (nam%iterative_algo) then
      mom%m1 = zero
      mom%m2 = zero
   end if
   mom%dirac = zero
end if

! Probe out
@:probe_out()

end subroutine mom_init

!----------------------------------------------------------------------
! Subroutine: mom_partial_dealloc
!> Release memory (partial)
!----------------------------------------------------------------------
subroutine mom_partial_dealloc(mom)

implicit none

! Passed variables
class(mom_type),intent(inout) :: mom !< Moments

! Local variables
integer :: iv

! Set name
@:set_name(mom_partial_dealloc)

! Probe in
@:probe_in()

! Release memory
if (allocated(mom%blk)) then
   do iv=1,size(mom%blk)
      call mom%blk(iv)%dealloc
   end do
   deallocate(mom%blk)
end if
if (allocated(mom%m1)) deallocate(mom%m1)
if (allocated(mom%m2)) deallocate(mom%m2)

! Probe out
@:probe_out()

end subroutine mom_partial_dealloc

!----------------------------------------------------------------------
! Subroutine: mom_dealloc
!> Release memory
!----------------------------------------------------------------------
subroutine mom_dealloc(mom)

implicit none

! Passed variables
class(mom_type),intent(inout) :: mom !< Moments

! Set name
@:set_name(mom_dealloc)

! Probe in
@:probe_in()

! Release memory
call mom%partial_dealloc
if (allocated(mom%dirac)) deallocate(mom%dirac)

! Probe out
@:probe_out()

end subroutine mom_dealloc

!----------------------------------------------------------------------
! Subroutine: mom_read
!> Read
!----------------------------------------------------------------------
subroutine mom_read(mom,mpl,nam,geom,samp,ens,iens)

implicit none

! Passed variables
class(mom_type),intent(inout) :: mom !< Moments
type(mpl_type),intent(inout) :: mpl  !< MPI data
type(nam_type),intent(in) :: nam     !< Namelist
type(geom_type),intent(in) :: geom   !< Geometry
type(samp_type),intent(in) :: samp   !< Sampling
type(ens_type), intent(in) :: ens    !< Ensemble
integer,intent(in) :: iens           !< Ensemble index

! Local variables
integer :: iproc,iprocio
type(mom_type) :: mom_tmp

! Set name
@:set_name(mom_read)

! Probe in
@:probe_in()

do iproc=1,mpl%nproc
   ! Reading task
   iprocio = mod(iproc,mpl%nprocio)
   if (iprocio==0) iprocio = mpl%nprocio

   if (mpl%myproc==iprocio) then
      write(mpl%info,'(a10,a,i6,a,i6)') '','Read moments of task ',iproc,' from task ',iprocio
      call mpl%flush

      if (iproc==iprocio) then
         ! Read data
         call mom%read(mpl,nam,geom,ens,iens,iproc)
         if (mom%nc1a/=samp%nc1a) call mpl%abort('${subr}$','mom%nc1a is not equal to samp%nc1a')
      else
         ! Read data
         call mom_tmp%read(mpl,nam,geom,ens,iens,iproc)

         ! Send data to task iproc
         call mom_tmp%send(mpl,nam,geom,iproc)

         ! Release memory
         call mom_tmp%dealloc
      end if
   elseif (mpl%myproc==iproc) then
      ! Receive data from task iprocio
      write(mpl%info,'(a10,a,i6,a,i6)') '','Receive moments of task ',iproc,' from task ',iprocio
      call mpl%flush
      call mom%receive(mpl,nam,geom,ens%ne,ens%nsub,iens,iprocio)
      if (mom%nc1a/=samp%nc1a) call mpl%abort('${subr}$','mom%nc1a is not equal to samp%nc1a')
   end if
end do

! Update tag
call mpl%update_tag(3)

! Probe out
@:probe_out()

end subroutine mom_read

!----------------------------------------------------------------------
! Subroutine: mom_read_single
!> Read, single task
!----------------------------------------------------------------------
subroutine mom_read_single(mom,mpl,nam,geom,ens,iens,iproc)

implicit none

! Passed variables
class(mom_type),intent(inout) :: mom !< Moments
type(mpl_type),intent(inout) :: mpl  !< MPI data
type(nam_type),intent(in) :: nam     !< Namelist
type(geom_type),intent(in) :: geom   !< Geometry
type(ens_type), intent(in) :: ens    !< Ensemble
integer,intent(in) :: iens           !< Ensemble index
integer,intent(in) :: iproc          !< Task index

! Local variables
integer :: iv,isub
integer :: ncid,grpid,m2_1_id,m2_2_id,m11_id,m22_id
character(len=1024) :: fname_mom,grpname

! Set name
@:set_name(mom_read_single)

! Probe in
@:probe_in()

do isub=1,ens%nsub
   ! Set file name
   write(fname_mom,'(a,a,i6.6,a,i1)') trim(nam%fname_mom_default),'_',isub,'_',iens
   if (iens==1) then
      if (allocated(nam%fname_mom1)) fname_mom = nam%fname_mom1(isub)
   elseif (iens==2) then
      if (allocated(nam%fname_mom2)) fname_mom = nam%fname_mom2(isub)
   end if

   ! Open file
   ncid = open_file(mpl,fname_mom,iproc)

   if (isub==1) then
      ! Get dimension
      mom%nc1a = inquire_dim_size(mpl,ncid,'nc1a',0)

      ! Allocation
      if (ens%ne==0) call mpl%abort('${subr}$','ensemble size is zero')
      call mom%alloc(nam,geom,ens%ne,ens%nsub,iens)

      ! Initialization
      call mom%init(nam)
   end if

   do iv=1,nam%nv
      ! Get group name
      call nam%alias(nam%variables(iv),grpname)

      ! Get group
      grpid = inquire_grp(mpl,ncid,grpname)

      ! Get variables
      m2_1_id = inquire_var(mpl,grpid,'m2_1')
      m2_2_id = inquire_var(mpl,grpid,'m2_2')
      m11_id = inquire_var(mpl,grpid,'m11')
      m22_id = inquire_var(mpl,grpid,'m22')

      ! Read data
      call get_var(mpl,grpid,m2_1_id,mom%blk(iv)%m2_1(:,:,isub))
      call get_var(mpl,grpid,m2_2_id,mom%blk(iv)%m2_2(:,:,:,:,isub))
      call get_var(mpl,grpid,m11_id,mom%blk(iv)%m11(:,:,:,:,:,isub))
      call get_var(mpl,grpid,m22_id,mom%blk(iv)%m22(:,:,:,:,:,isub))
   end do

   ! Close file
   call close_file(mpl,ncid)
end do

! Probe out
@:probe_out()

end subroutine mom_read_single

!----------------------------------------------------------------------
! Subroutine: mom_write
!> Write
!----------------------------------------------------------------------
subroutine mom_write(mom,mpl,nam,geom,samp)

implicit none

! Passed variables
class(mom_type),intent(inout) :: mom !< Moments
type(mpl_type),intent(inout) :: mpl  !< MPI data
type(nam_type),intent(in) :: nam     !< Namelist
type(geom_type),intent(in) :: geom   !< Geometry
type(samp_type),intent(in) :: samp   !< Sampling

! Local variables
integer :: iproc,iprocio
type(mom_type) :: mom_tmp

! Set name
@:set_name(mom_write)

! Probe in
@:probe_in()

do iproc=1,mpl%nproc
   ! Writing task
   iprocio = mod(iproc,mpl%nprocio)
   if (iprocio==0) iprocio = mpl%nprocio

   if (mpl%myproc==iprocio) then
      write(mpl%info,'(a10,a,i6,a,i6)') '','Write moments of task ',iproc,' from task ',iprocio
      call mpl%flush

      if (iproc==iprocio) then
         ! Write data
         mom%nc1a = samp%nc1a
         call mom%write(mpl,nam,geom,iproc)
      else
         ! Receive data from task iproc
         call mom_tmp%receive(mpl,nam,geom,mom%ne,mom%nsub,mom%iens,iproc)

         ! Write data
         call mom_tmp%write(mpl,nam,geom,iproc)

         ! Release memory
         call mom_tmp%dealloc
      end if
   elseif (mpl%myproc==iproc) then
      ! Send data to task iprocio
      write(mpl%info,'(a10,a,i6,a,i6)') '','Send moments of task ',iproc,' to task ',iprocio
      call mpl%flush
      mom%nc1a = samp%nc1a
      call mom%send(mpl,nam,geom,iprocio)
   end if
end do

! Update tag
call mpl%update_tag(3)

! Probe out
@:probe_out()

end subroutine mom_write

!----------------------------------------------------------------------
! Subroutine: mom_write_single
!> Write, single task
!----------------------------------------------------------------------
subroutine mom_write_single(mom,mpl,nam,geom,iproc)

implicit none

! Passed variables
class(mom_type),intent(in) :: mom   !< Moments
type(mpl_type),intent(inout) :: mpl !< MPI data
type(nam_type),intent(in) :: nam    !< Namelist
type(geom_type),intent(in) :: geom  !< Geometry
integer,intent(in) :: iproc         !< Task index

! Local variables
integer :: iv,isub
integer :: ncid,grpid,nc1a_id,nc3_id,nc4_id,nl0r_id,nl0_id,m2_1_id,m2_2_id,m11_id,m22_id
character(len=1024) :: fname_mom,grpname

! Set name
@:set_name(mom_write_single)

! Probe in
@:probe_in()

do isub=1,mom%nsub
   ! Set file name
   write(fname_mom,'(a,a,i6.6,a,i1)') trim(nam%fname_mom_default),'_',isub,'_',mom%iens
   if (mom%iens==1) then
      if (allocated(nam%fname_mom1)) fname_mom = nam%fname_mom1(isub)
   elseif (mom%iens==2) then
      if (allocated(nam%fname_mom2)) fname_mom = nam%fname_mom2(isub)
   end if

   ! Create file
   ncid = create_file(mpl,fname_mom,iproc)

   ! Define or get dimension
   if (isub==1) nc1a_id = define_dim(mpl,ncid,'nc1a',mom%nc1a)

   do iv=1,nam%nv
      ! Get group name
      call nam%alias(nam%variables(iv),grpname)

      ! Define group
      grpid = define_grp(mpl,ncid,grpname)

      ! Define or get dimensions
      nl0_id = define_dim(mpl,grpid,'nl0',geom%nl0)
      nc3_id = define_dim(mpl,grpid,'nc3',nam%nc3)
      nc4_id = define_dim(mpl,grpid,'nc4',nam%nc4)
      nl0r_id = define_dim(mpl,grpid,'nl0r',nam%nl0r)

      ! Define or get variables
      m2_1_id = define_var(mpl,grpid,'m2_1','real',(/nc1a_id,nl0_id/))
      m2_2_id = define_var(mpl,grpid,'m2_2','real',(/nc1a_id,nc3_id,nc4_id,nl0_id/))
      m11_id = define_var(mpl,grpid,'m11','real',(/nc1a_id,nc3_id,nc4_id,nl0r_id,nl0_id/))
      m22_id = define_var(mpl,grpid,'m22','real',(/nc1a_id,nc3_id,nc4_id,nl0r_id,nl0_id/))

      ! Write variables
      call put_var(mpl,grpid,m2_1_id,mom%blk(iv)%m2_1(:,:,isub))
      call put_var(mpl,grpid,m2_2_id,mom%blk(iv)%m2_2(:,:,:,:,isub))
      call put_var(mpl,grpid,m11_id,mom%blk(iv)%m11(:,:,:,:,:,isub))
      call put_var(mpl,grpid,m22_id,mom%blk(iv)%m22(:,:,:,:,:,isub))
   end do

   ! Close file
   call close_file(mpl,ncid)
end do

! Probe out
@:probe_out()

end subroutine mom_write_single

!----------------------------------------------------------------------
! Subroutine: mom_send
!> Send
!----------------------------------------------------------------------
subroutine mom_send(mom,mpl,nam,geom,iproc)

implicit none

! Passed variables
class(mom_type),intent(in) :: mom  !< Moments
type(mpl_type),intent(inout) :: mpl !< MPI data
type(nam_type),intent(in) :: nam    !< Namelist
type(geom_type),intent(in) :: geom  !< Geometry
integer,intent(in) :: iproc         !< Destination task

! Local variables
integer :: nbufi,nbufr,ibufi,ibufr,iv,bufs(2)
integer,allocatable :: bufi(:)
real(kind_real),allocatable :: bufr(:)

! Set name
@:set_name(mom_send)

! Probe in
@:probe_in()

! Initialization
nbufi = 0
nbufr = 0

! nc1a
nbufi = nbufi+1

do iv=1,nam%nv
   ! m2_1
   nbufr = nbufr+mom%nc1a*geom%nl0*mom%nsub

   ! m2_2
   nbufr = nbufr+mom%nc1a*nam%nc3*nam%nc4*geom%nl0*mom%nsub

   ! m11
   nbufr = nbufr+mom%nc1a*nam%nc3*nam%nc4*nam%nl0r*geom%nl0*mom%nsub

   ! m22
   nbufr = nbufr+mom%nc1a*nam%nc3*nam%nc4*nam%nl0r*geom%nl0*mom%nsub
end do


! Allocation
allocate(bufi(nbufi))
allocate(bufr(nbufr))

! Initialization
ibufi = 0
ibufr = 0

! nc1a
bufi(ibufi+1) = mom%nc1a
ibufi = ibufi+1

do iv=1,nam%nv
   ! m2_1
   bufr(ibufr+1:ibufr+mom%nc1a*geom%nl0*mom%nsub) = reshape(mom%blk(iv)%m2_1,(/mom%nc1a*geom%nl0*mom%nsub/))
   ibufr = ibufr+mom%nc1a*geom%nl0*mom%nsub

   ! m2_2
   bufr(ibufr+1:ibufr+mom%nc1a*nam%nc3*nam%nc4*geom%nl0*mom%nsub) = reshape(mom%blk(iv)%m2_2, &
 & (/mom%nc1a*nam%nc3*nam%nc4*geom%nl0*mom%nsub/))
   ibufr = ibufr+mom%nc1a*nam%nc3*nam%nc4*geom%nl0*mom%nsub

   ! m11
   bufr(ibufr+1:ibufr+mom%nc1a*nam%nc3*nam%nc4*nam%nl0r*geom%nl0*mom%nsub) = reshape(mom%blk(iv)%m11, &
 & (/mom%nc1a*nam%nc3*nam%nc4*nam%nl0r*geom%nl0*mom%nsub/))
   ibufr = ibufr+mom%nc1a*nam%nc3*nam%nc4*nam%nl0r*geom%nl0*mom%nsub

   ! m22
   bufr(ibufr+1:ibufr+mom%nc1a*nam%nc3*nam%nc4*nam%nl0r*geom%nl0*mom%nsub) = reshape(mom%blk(iv)%m22, &
 & (/mom%nc1a*nam%nc3*nam%nc4*nam%nl0r*geom%nl0*mom%nsub/))
   ibufr = ibufr+mom%nc1a*nam%nc3*nam%nc4*nam%nl0r*geom%nl0*mom%nsub
end do

! Check sizes
if (ibufi/=nbufi) call mpl%abort('${subr}$','wrong final index ibufi')
if (ibufr/=nbufr) call mpl%abort('${subr}$','wrong final index ibufr')

! Send buffer size
bufs = (/nbufi,nbufr/)
call mpl%f_comm%send(bufs,iproc-1,mpl%tag)

! Send data
call mpl%f_comm%send(bufi,iproc-1,mpl%tag+1)
call mpl%f_comm%send(bufr,iproc-1,mpl%tag+2)

! Release memory
deallocate(bufi)
deallocate(bufr)

! Probe out
@:probe_out()

end subroutine mom_send

!----------------------------------------------------------------------
! Subroutine: mom_receive
!> Receive
!----------------------------------------------------------------------
subroutine mom_receive(mom,mpl,nam,geom,ne,nsub,iens,iproc)

implicit none

! Passed variables
class(mom_type),intent(inout) :: mom !< Moments
type(mpl_type),intent(inout) :: mpl    !< MPI data
type(nam_type),intent(in) :: nam       !< Namelist
type(geom_type),intent(in) :: geom     !< Geometry
integer,intent(in) :: ne               !< Ensemble size
integer,intent(in) :: nsub             !< Number of sub-ensembles
integer,intent(in) :: iens             !< Ensemble index
integer,intent(in) :: iproc            !< Source task

! Local variables
integer :: nbufi,nbufr,ibufi,ibufr,iv,bufs(2)
integer,allocatable :: bufi(:)
real(kind_real),allocatable :: bufr(:)
type(fckit_mpi_status) :: status

! Set name
@:set_name(mom_receive)

! Probe in
@:probe_in()

! Receive buffer size
call mpl%f_comm%receive(bufs,iproc-1,mpl%tag,status)
nbufi = bufs(1)
nbufr = bufs(2)

! Allocation
allocate(bufi(nbufi))
allocate(bufr(nbufr))

! Receive data
call mpl%f_comm%receive(bufi,iproc-1,mpl%tag+1,status)
call mpl%f_comm%receive(bufr,iproc-1,mpl%tag+2,status)

! Initialization
ibufi = 0
ibufr = 0

! nc1a
mom%nc1a = bufi(ibufi+1)
ibufi = ibufi+1

! Allocation
call mom%alloc(nam,geom,ne,nsub,iens)

do iv=1,nam%nv
   ! m2_1
   mom%blk(iv)%m2_1 = reshape(bufr(ibufr+1:ibufr+mom%nc1a*geom%nl0*mom%nsub),(/mom%nc1a,geom%nl0,mom%nsub/))
   ibufr = ibufr+mom%nc1a*geom%nl0*mom%nsub

   ! m2_2
   mom%blk(iv)%m2_2 = reshape(bufr(ibufr+1:ibufr+mom%nc1a*nam%nc3*nam%nc4*geom%nl0*mom%nsub), &
 & (/mom%nc1a,nam%nc3,nam%nc4,geom%nl0,mom%nsub/))
   ibufr = ibufr+mom%nc1a*nam%nc3*nam%nc4*geom%nl0*mom%nsub

   ! m11
   mom%blk(iv)%m11 = reshape(bufr(ibufr+1:ibufr+mom%nc1a*nam%nc3*nam%nc4*nam%nl0r*geom%nl0*mom%nsub), &
 & (/mom%nc1a,nam%nc3,nam%nc4,nam%nl0r,geom%nl0,mom%nsub/))
   ibufr = ibufr+mom%nc1a*nam%nc3*nam%nc4*nam%nl0r*geom%nl0*mom%nsub

   ! m22
   mom%blk(iv)%m22 = reshape(bufr(ibufr+1:ibufr+mom%nc1a*nam%nc3*nam%nc4*nam%nl0r*geom%nl0*mom%nsub), &
 & (/mom%nc1a,nam%nc3,nam%nc4,nam%nl0r,geom%nl0,mom%nsub/))
   ibufr = ibufr+mom%nc1a*nam%nc3*nam%nc4*nam%nl0r*geom%nl0*mom%nsub
end do


! Check sizes
if (ibufi/=nbufi) call mpl%abort('${subr}$','wrong final index ibufi')
if (ibufr/=nbufr) call mpl%abort('${subr}$','wrong final index ibufr')

! Release memory
deallocate(bufr)

! Probe out
@:probe_out()

end subroutine mom_receive

!----------------------------------------------------------------------
! Subroutine: mom_update
!> Update centered moments
!----------------------------------------------------------------------
subroutine mom_update(mom,mpl,nam,geom,samp,fld_c0a,ie,iens)

implicit none

! Passed variables
class(mom_type),intent(inout) :: mom                             !< Moments
type(mpl_type),intent(inout) :: mpl                              !< MPI data
type(nam_type),intent(in) :: nam                                 !< Namelist
type(geom_type),intent(in) :: geom                               !< Geometry
type(samp_type),intent(in) :: samp                               !< Sampling
real(kind_real),intent(in) :: fld_c0a(geom%nc0a,geom%nl0,nam%nv) !< Field
integer,intent(in) :: ie                                         !< Member index
integer,intent(in) :: iens                                       !< Ensemble index

! Local variables
integer :: ens_ne,ens_nsub,isub,ie_sub,jl0r,jl0,il0,il0ic1,il0ic3,jc3,jc4,ic1a,iv,jc0a,idir
real(kind_real) :: fac1,fac2,fac3,fac4,fac5,fac_norm_cov,fac_norm_m22,cor_norm
real(kind_real) :: fld_c0b(samp%nc0b,geom%nl0,nam%nv),fld_c0c(samp%nc0c,geom%nl0,nam%nv)
real(kind_real) :: fld_c1a(samp%nc1a,geom%nl0)
real(kind_real),allocatable :: fld_c3a(:,:,:,:),wgt_dir(:),pert_c0a(:,:,:)

! Set name
@:set_name(mom_update)

! Probe in
@:probe_in()

! Update moments
write(mpl%info,'(a)') '-------------------------------------------------------------------'
call mpl%flush
write(mpl%info,'(a)') '--- Update moments'
call mpl%flush

! Indices
if (iens==1) then
   ens_ne = nam%ens1_ne
   ens_nsub = nam%ens1_nsub
elseif (iens==2) then
   ens_ne = nam%ens2_ne
   ens_nsub = nam%ens2_nsub
end if
isub = (ie-1)/(ens_ne/ens_nsub)+1
ie_sub = ie-(isub-1)*ens_ne/ens_nsub

! Computation factors
fac1 = one/real(ie_sub,kind_real)
fac2 = one/real(ie_sub**2,kind_real)
fac3 = real((ie_sub-1)*(ie_sub**2-3*ie_sub+3),kind_real)/real(ie_sub**3,kind_real)
fac4 = real((ie_sub-1)*(ie_sub-2),kind_real)/real(ie_sub**2,kind_real)
fac5 = real(ie_sub-1,kind_real)/real(ie_sub,kind_real)

if (ie==1) then
   ! Allocation
   mom%nc1a = samp%nc1a
   call mom%alloc(nam,geom,ens_ne,ens_nsub,iens)

   ! Initialization
   call mom%init(nam)
end if

! Halo extension
do iv=1,nam%nv
   call samp%com_c0_AB%ext(mpl,fld_c0a(:,:,iv),fld_c0b(:,:,iv))
   call samp%com_c0_AC%ext(mpl,fld_c0a(:,:,iv),fld_c0c(:,:,iv))
end do

do iv=1,nam%nv
   ! Allocation
   allocate(fld_c3a(samp%nc1a,nam%nc3,nam%nc4,geom%nl0))

   ! Interpolate fields
   fld_c1a = mpl%msv%valr
   fld_c3a = mpl%msv%valr
   !$omp parallel do schedule(static) private(il0,il0ic1)
   do il0=1,geom%nl0
      il0ic1 = samp%l0_to_l0ic1(il0)
      call samp%interp_c0b_to_c1a(il0ic1)%apply(mpl,fld_c0b(:,il0,iv),fld_c1a(:,il0))
   end do
   !$omp end parallel do
   !$omp parallel do schedule(static) private(il0,jc3,jc4,il0ic3)
   do il0=1,geom%nl0
      do jc4=1,nam%nc4
         do jc3=1,nam%nc3
            il0ic3 = samp%l0_to_l0ic3(il0,jc3,jc4)
            call samp%interp_c0c_to_c3a(jc3,jc4,il0ic3)%apply(mpl,fld_c0c(:,il0,iv),fld_c3a(:,jc3,jc4,il0))
         end do
      end do
   end do
   !$omp end parallel do

   ! Remove mean
   fld_c1a = fld_c1a-mom%blk(iv)%m1_1(:,:,isub)
   fld_c3a = fld_c3a-mom%blk(iv)%m1_2(:,:,:,:,isub)

   !$omp parallel do schedule(static) private(il0,jl0r,jl0,jc3,jc4)
   do il0=1,geom%nl0
      do jl0r=1,nam%nl0r
         jl0 = geom%l0rl0_to_l0(jl0r,il0)
         do jc4=1,nam%nc4
            do jc3=1,nam%nc3
               ! Update fourth-order moment
               mom%blk(iv)%m22(:,jc3,jc4,jl0r,il0,isub) = mom%blk(iv)%m22(:,jc3,jc4,jl0r,il0,isub) &
 & -two*fac1*(mom%blk(iv)%m21(:,jc3,jc4,jl0r,il0,isub)*fld_c3a(:,jc3,jc4,jl0) &
 & +mom%blk(iv)%m12(:,jc3,jc4,jl0r,il0,isub)*fld_c1a(:,il0)) &
 & +fac2*(four*mom%blk(iv)%m11(:,jc3,jc4,jl0r,il0,isub)*fld_c1a(:,il0)*fld_c3a(:,jc3,jc4,jl0) &
 & +mom%blk(iv)%m2_2(:,jc3,jc4,jl0,isub)*fld_c1a(:,il0)**2+mom%blk(iv)%m2_1(:,il0,isub)*fld_c3a(:,jc3,jc4,jl0)**2) &
 & +fac3*fld_c1a(:,il0)**2*fld_c3a(:,jc3,jc4,jl0)**2

               ! Update third-order moments
               mom%blk(iv)%m21(:,jc3,jc4,jl0r,il0,isub) = mom%blk(iv)%m21(:,jc3,jc4,jl0r,il0,isub) &
 & -fac1*(two*mom%blk(iv)%m11(:,jc3,jc4,jl0r,il0,isub)*fld_c1a(:,il0)+mom%blk(iv)%m2_1(:,il0,isub)*fld_c3a(:,jc3,jc4,jl0)) &
 & +fac4*fld_c1a(:,il0)**2*fld_c3a(:,jc3,jc4,jl0)
               mom%blk(iv)%m12(:,jc3,jc4,jl0r,il0,isub) = mom%blk(iv)%m12(:,jc3,jc4,jl0r,il0,isub) &
 & -fac1*(two*mom%blk(iv)%m11(:,jc3,jc4,jl0r,il0,isub)*fld_c3a(:,jc3,jc4,jl0)+mom%blk(iv)%m2_2(:,jc3,jc4,jl0,isub)*fld_c1a(:,il0)) &
 & +fac4*fld_c3a(:,jc3,jc4,jl0)**2*fld_c1a(:,il0)

               ! Update covariance
               mom%blk(iv)%m11(:,jc3,jc4,jl0r,il0,isub) = mom%blk(iv)%m11(:,jc3,jc4,jl0r,il0,isub)+fac5*fld_c1a(:,il0) &
 & *fld_c3a(:,jc3,jc4,jl0)
            end do
         end do
      end do
   end do
   !$omp end parallel do

   ! Update variance
   mom%blk(iv)%m2_1(:,:,isub) = mom%blk(iv)%m2_1(:,:,isub)+fac5*fld_c1a**2
   mom%blk(iv)%m2_2(:,:,:,:,isub) = mom%blk(iv)%m2_2(:,:,:,:,isub)+fac5*fld_c3a**2

   ! Update mean
   mom%blk(iv)%m1_1(:,:,isub) = mom%blk(iv)%m1_1(:,:,isub)+fac1*fld_c1a
   mom%blk(iv)%m1_2(:,:,:,:,isub) = mom%blk(iv)%m1_2(:,:,:,:,isub)+fac1*fld_c3a

   ! Release memory
   deallocate(fld_c3a)
end do

if (nam%check_dirac) then
   ! Allocation
   allocate(wgt_dir(geom%ndir))
   allocate(pert_c0a(geom%nc0a,geom%nl0,nam%nv))

   ! Get perturbation
   do jl0=1,geom%nl0
      do jc0a=1,geom%nc0a
         if (geom%gmask_c0a(jc0a,jl0)) pert_c0a(jc0a,jl0,:) = fld_c0a(jc0a,jl0,:)-mom%m1(jc0a,jl0,:)
      end do
   end do

   ! Get weight
   wgt_dir = zero
   do idir=1,geom%ndir
      if (geom%iprocdir(idir)==mpl%myproc) wgt_dir(idir) = pert_c0a(geom%ic0adir(idir),geom%il0dir(idir),geom%ivdir(idir))
   end do

   ! Communication
   call mpl%f_comm%allreduce(wgt_dir,fckit_mpi_sum())

   do jl0=1,geom%nl0
      do jc0a=1,geom%nc0a
         if (geom%gmask_c0a(jc0a,jl0)) then
            idir = geom%inbdir(jc0a,jl0)
            if (mpl%msv%isnot(idir)) then
               ! Update covariance
               mom%dirac(jc0a,jl0,:) = mom%dirac(jc0a,jl0,:)+fac5*wgt_dir(idir)*pert_c0a(jc0a,jl0,:)

               ! Update variance
               mom%m2(jc0a,jl0,:) = mom%m2(jc0a,jl0,:)+fac5*pert_c0a(jc0a,jl0,:)**2

               ! Update mean
               mom%m1(jc0a,jl0,:) = mom%m1(jc0a,jl0,:)+fac1*pert_c0a(jc0a,jl0,:)
            end if
         end if
      end do
   end do

   ! Release memory
   deallocate(wgt_dir)
   deallocate(pert_c0a)
end if

if (ie==mom%ne) then
   ! Normalize moments or set missing values
   fac_norm_cov = real(mom%nsub,kind_real)/real(mom%ne-mom%nsub,kind_real)
   fac_norm_m22 = real(mom%nsub,kind_real)/real(mom%ne,kind_real)
   do iv=1,nam%nv
      !$omp parallel do schedule(static) private(il0,jc3,jc4,ic1a,jl0r,jl0)
      do il0=1,geom%nl0
         do ic1a=1,samp%nc1a
            if (samp%smask_c1a(ic1a,il0)) then
               mom%blk(iv)%m2_1(ic1a,il0,:) = mom%blk(iv)%m2_1(ic1a,il0,:)*fac_norm_cov
            else
               mom%blk(iv)%m2_1(ic1a,il0,:) = mpl%msv%valr
            end if
         end do
         do jc4=1,nam%nc4
            do jc3=1,nam%nc3
               do ic1a=1,samp%nc1a
                  if (samp%smask_c3a(ic1a,jc3,jc4,il0)) then
                     mom%blk(iv)%m2_2(ic1a,jc3,jc4,il0,:) = mom%blk(iv)%m2_2(ic1a,jc3,jc4,il0,:)*fac_norm_cov
                  else
                     mom%blk(iv)%m2_2(ic1a,jc3,jc4,il0,:) = mpl%msv%valr
                  end if
                  do jl0r=1,nam%nl0r
                     jl0 = geom%l0rl0_to_l0(jl0r,il0)
                     if (samp%smask_c1a(ic1a,il0).and.samp%smask_c3a(ic1a,jc3,jc4,jl0)) then
                        mom%blk(iv)%m11(ic1a,jc3,jc4,jl0r,il0,:) = mom%blk(iv)%m11(ic1a,jc3,jc4,jl0r,il0,:)*fac_norm_cov
                        mom%blk(iv)%m22(ic1a,jc3,jc4,jl0r,il0,:) = mom%blk(iv)%m22(ic1a,jc3,jc4,jl0r,il0,:)*fac_norm_m22
                     else
                        mom%blk(iv)%m11(ic1a,jc3,jc4,jl0r,il0,:) = mpl%msv%valr
                        mom%blk(iv)%m22(ic1a,jc3,jc4,jl0r,il0,:) = mpl%msv%valr
                     end if
                  end do
               end do
            end do
         end do
      end do
      !$omp end parallel do
   end do

   ! Normalize raw ensemble dirac test
   if (nam%check_dirac) then
      ! Allocation
      allocate(wgt_dir(geom%ndir))

      ! Variance at dirac points
      wgt_dir = zero
      do idir=1,geom%ndir
         if (geom%iprocdir(idir)==mpl%myproc) wgt_dir(idir) = mom%m2(geom%ic0adir(idir),geom%il0dir(idir),geom%ivdir(idir))
      end do

      ! Communication
      call mpl%f_comm%allreduce(wgt_dir,fckit_mpi_sum())

      ! Normalize
      do jl0=1,geom%nl0
         do jc0a=1,geom%nc0a
            if (geom%gmask_c0a(jc0a,jl0)) then
               idir = geom%inbdir(jc0a,jl0)
               if (mpl%msv%isnot(idir)) then
                  do iv=1,nam%nv
                     cor_norm = wgt_dir(idir)*mom%m2(jc0a,jl0,iv)
                     if (cor_norm>zero) then
                        mom%dirac(jc0a,jl0,iv) = mom%dirac(jc0a,jl0,iv)/sqrt(cor_norm)
                     else
                        mom%dirac(jc0a,jl0,iv) = mpl%msv%valr
                     end if
                  end do
               else
                  mom%dirac(jc0a,jl0,:) = mpl%msv%valr
               end if
            else
               mom%dirac(jc0a,jl0,:) = mpl%msv%valr
            end if
         end do
      end do

      ! Release memory
      deallocate(wgt_dir)
   end if

   ! Write sample moments
   if (nam%write_mom) then
      write(mpl%info,'(a10,a)') '','Write sample moments'
      call mpl%flush
      call mom%write(mpl,nam,geom,samp)
   end if
end if

! Probe out
@:probe_out()

end subroutine mom_update

!----------------------------------------------------------------------
! Subroutine: mom_compute
!> Compute centered moments
!----------------------------------------------------------------------
subroutine mom_compute(mom,mpl,nam,geom,samp,ens,iens)

implicit none

! Passed variables
class(mom_type),intent(inout) :: mom  !< Moments
type(mpl_type),intent(inout) :: mpl   !< MPI data
type(nam_type),intent(in) :: nam      !< Namelist
type(geom_type),intent(in) :: geom    !< Geometry
type(samp_type),intent(in) :: samp    !< Sampling
type(ens_type), intent(inout) :: ens  !< Ensemble
integer,intent(in) :: iens            !< Ensemble index

! Local variables
integer :: ie,ie_sub,jl0r,jl0,il0,il0ic1,il0ic3,isub,jc3,jc4,ic1a,iv,jc0a,idir
real(kind_real) :: fac_norm_cov,fac_norm_m22,cor_norm
real(kind_real) :: fld_c0a(geom%nc0a,geom%nl0,nam%nv),fld_c0b(samp%nc0b,geom%nl0,nam%nv),fld_c0c(samp%nc0c,geom%nl0,nam%nv)
real(kind_real) :: fld_c1a(samp%nc1a,geom%nl0)
real(kind_real),allocatable :: fld_c3a(:,:,:,:),wgt_dir(:),m2(:,:,:)

! Set name
@:set_name(mom_compute)

! Probe in
@:probe_in()

! Allocation
mom%nc1a = samp%nc1a
call mom%alloc(nam,geom,ens%ne,ens%nsub,iens)
if (nam%check_dirac) then
   allocate(wgt_dir(geom%ndir))
   allocate(m2(geom%nc0a,geom%nl0,nam%nv))
end if

! Initialization
call mom%init(nam)

! Loop on sub-ensembles
do isub=1,ens%nsub
   if (ens%nsub==1) then
      write(mpl%info,'(a10,a)') '','Full ensemble, member:'
      call mpl%flush(newl=.false.)
   else
      write(mpl%info,'(a10,a,i6,a)') '','Sub-ensemble ',isub,', member:'
      call mpl%flush(newl=.false.)
   end if

   ! Compute centered moments
   do ie_sub=1,ens%ne/ens%nsub
      write(mpl%info,'(i6)') ie_sub
      call mpl%flush(newl=.false.)

      ! Full ensemble index
      ie = ie_sub+(isub-1)*ens%ne/ens%nsub

      ! Get perturbation on subset Sc0
      call ens%get_c0(mpl,nam,geom,'pert',ie,fld_c0a)

      ! Halo extension
      do iv=1,nam%nv
         call samp%com_c0_AB%ext(mpl,fld_c0a(:,:,iv),fld_c0b(:,:,iv))
         call samp%com_c0_AC%ext(mpl,fld_c0a(:,:,iv),fld_c0c(:,:,iv))
      end do

      do iv=1,nam%nv
         ! Allocation
         allocate(fld_c3a(samp%nc1a,nam%nc3,nam%nc4,geom%nl0))

         ! Interpolate fields
         fld_c1a = mpl%msv%valr
         fld_c3a = mpl%msv%valr
         !$omp parallel do schedule(static) private(il0,il0ic1)
         do il0=1,geom%nl0
            il0ic1 = samp%l0_to_l0ic1(il0)
            call samp%interp_c0b_to_c1a(il0ic1)%apply(mpl,fld_c0b(:,il0,iv),fld_c1a(:,il0))
         end do
         !$omp end parallel do
         !$omp parallel do schedule(static) private(il0,jc3,jc4,il0ic3)
         do il0=1,geom%nl0
            do jc4=1,nam%nc4
               do jc3=1,nam%nc3
                  il0ic3 = samp%l0_to_l0ic3(il0,jc3,jc4)
                  call samp%interp_c0c_to_c3a(jc3,jc4,il0ic3)%apply(mpl,fld_c0c(:,il0,iv),fld_c3a(:,jc3,jc4,il0))
               end do
            end do
         end do
         !$omp end parallel do

         !$omp parallel do schedule(static) private(il0,jl0r,jl0,jc3,jc4)
         do il0=1,geom%nl0
            do jl0r=1,nam%nl0r
               jl0 = geom%l0rl0_to_l0(jl0r,il0)

               do jc4=1,nam%nc4
                  do jc3=1,nam%nc3
                     ! Fourth-order moment
                     mom%blk(iv)%m22(:,jc3,jc4,jl0r,il0,isub) = mom%blk(iv)%m22(:,jc3,jc4,jl0r,il0,isub)+(fld_c1a(:,il0) &
 & *fld_c3a(:,jc3,jc4,jl0))**2

                     ! Covariance
                     mom%blk(iv)%m11(:,jc3,jc4,jl0r,il0,isub) = mom%blk(iv)%m11(:,jc3,jc4,jl0r,il0,isub)+fld_c1a(:,il0) &
 & *fld_c3a(:,jc3,jc4,jl0)
                  end do
               end do
            end do
         end do
         !$omp end parallel do

         ! Variances
         mom%blk(iv)%m2_1(:,:,isub) = mom%blk(iv)%m2_1(:,:,isub)+fld_c1a**2
         mom%blk(iv)%m2_2(:,:,:,:,isub) = mom%blk(iv)%m2_2(:,:,:,:,isub)+fld_c3a**2

         ! Release memory
         deallocate(fld_c3a)
      end do

      if (nam%check_dirac) then
         ! Get weight
         wgt_dir = zero
         do idir=1,geom%ndir
            if (geom%iprocdir(idir)==mpl%myproc) wgt_dir(idir) = fld_c0a(geom%ic0adir(idir),geom%il0dir(idir),geom%ivdir(idir))
         end do

         ! Communication
         call mpl%f_comm%allreduce(wgt_dir,fckit_mpi_sum())

         ! Covariance
         do jl0=1,geom%nl0
            do jc0a=1,geom%nc0a
               if (geom%gmask_c0a(jc0a,jl0)) then
                  idir = geom%inbdir(jc0a,jl0)
                  if (mpl%msv%isnot(idir)) then
                     mom%dirac(jc0a,jl0,:) = mom%dirac(jc0a,jl0,:)+wgt_dir(idir)*fld_c0a(jc0a,jl0,:)
                  end if
               end if
            end do
         end do
      end if
   end do
   write(mpl%info,'(a)') ''
   call mpl%flush
end do

! Normalize moments or set missing values
fac_norm_cov = real(mom%nsub,kind_real)/real(mom%ne-mom%nsub,kind_real)
fac_norm_m22 = real(mom%nsub,kind_real)/real(mom%ne,kind_real)
do iv=1,nam%nv
   !$omp parallel do schedule(static) private(il0,jc3,jc4,ic1a,jl0r,jl0)
   do il0=1,geom%nl0
      do ic1a=1,samp%nc1a
         if (samp%smask_c1a(ic1a,il0)) then
            mom%blk(iv)%m2_1(ic1a,il0,:) = mom%blk(iv)%m2_1(ic1a,il0,:)*fac_norm_cov
         else
            mom%blk(iv)%m2_1(ic1a,il0,:) = mpl%msv%valr
         end if
      end do
      do jc4=1,nam%nc4
         do jc3=1,nam%nc3
            do ic1a=1,samp%nc1a
               if (samp%smask_c3a(ic1a,jc3,jc4,il0)) then
                  mom%blk(iv)%m2_2(ic1a,jc3,jc4,il0,:) = mom%blk(iv)%m2_2(ic1a,jc3,jc4,il0,:)*fac_norm_cov
               else
                  mom%blk(iv)%m2_2(ic1a,jc3,jc4,il0,:) = mpl%msv%valr
               end if
               do jl0r=1,nam%nl0r
                  jl0 = geom%l0rl0_to_l0(jl0r,il0)
                  if (samp%smask_c1a(ic1a,il0).and.samp%smask_c3a(ic1a,jc3,jc4,jl0)) then
                     mom%blk(iv)%m11(ic1a,jc3,jc4,jl0r,il0,:) = mom%blk(iv)%m11(ic1a,jc3,jc4,jl0r,il0,:)*fac_norm_cov
                     mom%blk(iv)%m22(ic1a,jc3,jc4,jl0r,il0,:) = mom%blk(iv)%m22(ic1a,jc3,jc4,jl0r,il0,:)*fac_norm_m22
                  else
                     mom%blk(iv)%m11(ic1a,jc3,jc4,jl0r,il0,:) = mpl%msv%valr
                     mom%blk(iv)%m22(ic1a,jc3,jc4,jl0r,il0,:) = mpl%msv%valr
                  end if
               end do
            end do
         end do
      end do
   end do
   !$omp end parallel do
end do

! Normalize raw ensemble dirac test
if (nam%check_dirac) then
   ! Get ensemble variance
   call ens%compute_moments(mpl,nam,geom)
   call ens%get_c0(mpl,nam,geom,'m2',0,m2)

   ! Variance at dirac points
   wgt_dir = zero
   do idir=1,geom%ndir
      if (geom%iprocdir(idir)==mpl%myproc) wgt_dir(idir) = m2(geom%ic0adir(idir),geom%il0dir(idir),geom%ivdir(idir))
   end do

   ! Communication
   call mpl%f_comm%allreduce(wgt_dir,fckit_mpi_sum())

   ! Normalize
   do jl0=1,geom%nl0
      do jc0a=1,geom%nc0a
         if (geom%gmask_c0a(jc0a,jl0)) then
            idir = geom%inbdir(jc0a,jl0)
            if (mpl%msv%isnot(idir)) then
               do iv=1,nam%nv
                  cor_norm = wgt_dir(idir)*m2(jc0a,jl0,iv)
                  if (cor_norm>zero) then
                     mom%dirac(jc0a,jl0,iv) = mom%dirac(jc0a,jl0,iv)*fac_norm_cov/sqrt(cor_norm)
                  else
                     mom%dirac(jc0a,jl0,iv) = mpl%msv%valr
                  end if
               end do
            else
               mom%dirac(jc0a,jl0,:) = mpl%msv%valr
            end if
         else
            mom%dirac(jc0a,jl0,:) = mpl%msv%valr
         end if
      end do
   end do

   ! Release memory
   deallocate(wgt_dir)
   deallocate(m2)
end if

! Write sample moments
if (nam%write_mom) then
   write(mpl%info,'(a10,a)') '','Write sample moments'
   call mpl%flush
   call mom%write(mpl,nam,geom,samp)
end if

! Probe out
@:probe_out()

end subroutine mom_compute

end module type_mom
