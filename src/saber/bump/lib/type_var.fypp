#:include 'instrumentation.fypp'
!----------------------------------------------------------------------
! Module: type_var
!> Variance derived type
! Author: Benjamin Menetrier
! Licensing: this code is distributed under the CeCILL-C license
! Copyright 2015-... UCAR, CERFACS, METEO-FRANCE and IRIT
!----------------------------------------------------------------------
module type_var

use fckit_mpi_module, only: fckit_mpi_sum
!$ use omp_lib
use tools_const, only: zero,half,one,two,three,four,six,rad2deg,reqkm
use tools_func, only: zss_sum,zss_count,global_average
use tools_kinds, only: kind_real,huge_real
use tools_netcdf, only: create_file,open_file,define_grp,inquire_grp,put_att,get_att,define_dim,inquire_var,define_var,close_file
use type_ens, only: ens_type
use type_geom, only: geom_type
use type_gsi, only: gsi_type
use type_mpl, only: mpl_type
use type_nam, only: nam_type
use type_nicas_blk, only: nicas_blk_type
@:use_probe()
use type_rng, only: rng_type

implicit none

! Variance derived type
type var_type
   ! Attributes
   integer :: ne                                 !< Ensemble size

   ! Computational data
   real(kind_real),allocatable :: m2(:,:,:)      !< Variance
   real(kind_real),allocatable :: m4(:,:,:)      !< Fourth-order centered moment
   real(kind_real),allocatable :: m2flt(:,:,:)   !< Filtered variance
   real(kind_real),allocatable :: m2sqrt(:,:,:)  !< Variance square-root

   ! Sequential update data
   real(kind_real),allocatable :: seq_m1(:,:,:)  !< Sequentially updated mean
   real(kind_real),allocatable :: seq_m2(:,:,:)  !< Sequentially updated variance
   real(kind_real),allocatable :: seq_m3(:,:,:)  !< Sequentially updated third-order centered moment
   real(kind_real),allocatable :: seq_m4(:,:,:)  !< Sequentially updated fourth-order centered moment

   ! BUMP interface data
   real(kind_real),allocatable :: bump_m2(:,:,:) !< BUMP interface variance
   integer :: bump_m2_counter = 0                !< BUMP interface variance counter
   real(kind_real),allocatable :: bump_m4(:,:,:) !< BUMP interface fourth-order centered moment
   integer :: bump_m4_counter = 0                !< BUMP interface fourth-order centered moment counter
contains
   procedure :: alloc => var_alloc
   procedure :: partial_bump_dealloc => var_partial_bump_dealloc
   procedure :: partial_dealloc => var_partial_dealloc
   procedure :: dealloc => var_dealloc
   procedure :: update => var_update
   procedure :: run_var => var_run_var
   procedure :: from_gsi => var_from_gsi
   procedure :: filter => var_filter
   procedure :: apply_sqrt => var_apply_sqrt
   procedure :: apply_sqrt_inv => var_apply_sqrt_inv
end type var_type

private
public :: var_type

contains

!----------------------------------------------------------------------
! Subroutine: var_alloc
!> Allocation
!----------------------------------------------------------------------
subroutine var_alloc(var,nam,geom)

implicit none

! Passed variables
class(var_type),intent(inout) :: var !< Variance
type(nam_type),intent(in) :: nam     !< Namelist
type(geom_type),intent(in) :: geom   !< Geometry

! Set name
@:set_name(var_alloc)

! Probe in
@:probe_in()

! Allocation
allocate(var%m2(geom%nc0a,geom%nl0,nam%nv))
allocate(var%m4(geom%nc0a,geom%nl0,nam%nv))
if (nam%var_filter) allocate(var%m2flt(geom%nc0a,geom%nl0,nam%nv))
if (.not.allocated(var%m2sqrt)) allocate(var%m2sqrt(geom%nc0a,geom%nl0,nam%nv))
if (nam%iterative_algo) then
   allocate(var%seq_m1(geom%nc0a,geom%nl0,nam%nv))
   allocate(var%seq_m2(geom%nc0a,geom%nl0,nam%nv))
   allocate(var%seq_m3(geom%nc0a,geom%nl0,nam%nv))
   allocate(var%seq_m4(geom%nc0a,geom%nl0,nam%nv))
end if


! Probe out
@:probe_out()

end subroutine var_alloc

!----------------------------------------------------------------------
! Subroutine: var_partial_bump_dealloc
!> Release memory (partial)
!----------------------------------------------------------------------
subroutine var_partial_bump_dealloc(var)

implicit none

! Passed variables
class(var_type),intent(inout) :: var !< Variance

! Set name
@:set_name(var_partial_bump_dealloc)

! Probe in
@:probe_in()

! Release memory
if (allocated(var%bump_m2)) deallocate(var%bump_m2)
if (allocated(var%bump_m4)) deallocate(var%bump_m4)

! Probe out
@:probe_out()

end subroutine var_partial_bump_dealloc

!----------------------------------------------------------------------
! Subroutine: var_partial_dealloc
!> Release memory (partial)
!----------------------------------------------------------------------
subroutine var_partial_dealloc(var)

implicit none

! Passed variables
class(var_type),intent(inout) :: var !< Variance

! Set name
@:set_name(var_partial_dealloc)

! Probe in
@:probe_in()

! Release memory
call var%partial_bump_dealloc
if (allocated(var%m2flt)) deallocate(var%m2flt)
if (allocated(var%seq_m1)) deallocate(var%seq_m1)
if (allocated(var%seq_m2)) deallocate(var%seq_m2)
if (allocated(var%seq_m3)) deallocate(var%seq_m3)
if (allocated(var%seq_m4)) deallocate(var%seq_m4)

! Probe out
@:probe_out()

end subroutine var_partial_dealloc

!----------------------------------------------------------------------
! Subroutine: var_dealloc
!> Release memory (full)
!----------------------------------------------------------------------
subroutine var_dealloc(var)

implicit none

! Passed variables
class(var_type),intent(inout) :: var !< Variance

! Set name
@:set_name(var_dealloc)

! Probe in
@:probe_in()

! Release memory
call var%partial_dealloc
if (allocated(var%m2)) deallocate(var%m2)
if (allocated(var%m4)) deallocate(var%m4)
if (allocated(var%m2sqrt)) deallocate(var%m2sqrt)

! Probe out
@:probe_out()

end subroutine var_dealloc

!----------------------------------------------------------------------
! Subroutine: var_update
!> Update variance
!----------------------------------------------------------------------
subroutine var_update(var,mpl,rng,nam,geom,fld_c0a,ie)

implicit none

! Passed variables
class(var_type),intent(inout) :: var                             !< Variance
type(mpl_type),intent(inout) :: mpl                              !< MPI data
type(rng_type),intent(inout) :: rng                              !< Random number generator
type(nam_type),intent(inout) :: nam                              !< Namelist
type(geom_type),intent(inout) :: geom                            !< Geometry
real(kind_real),intent(in) :: fld_c0a(geom%nc0a,geom%nl0,nam%nv) !< Field
integer,intent(in) :: ie                                         !< Member index

! Local variables
integer :: isub,ie_sub,ic0a,il0,iv
real(kind_real) :: fac1,fac2,fac3,fac4,fac5,fac_norm_m2,fac_norm_m4
real(kind_real) :: pert_c0a(geom%nc0a,geom%nl0,nam%nv)

! Set name
@:set_name(var_update)

! Probe in
@:probe_in()

! Update variance
write(mpl%info,'(a)') '-------------------------------------------------------------------'
call mpl%flush
write(mpl%info,'(a)') '--- Update variance'
call mpl%flush

! Indices
isub = (ie-1)/(nam%ens1_ne/nam%ens1_nsub)+1
ie_sub = ie-(isub-1)*nam%ens1_ne/nam%ens1_nsub

! Computation factors
fac1 = one/real(ie_sub,kind_real)
fac2 = one/real(ie_sub**2,kind_real)
fac3 = real((ie_sub-1)*(ie_sub**2-3*ie_sub+3),kind_real)/real(ie_sub**3,kind_real)
fac4 = real((ie_sub-1)*(ie_sub-2),kind_real)/real(ie_sub**2,kind_real)
fac5 = real(ie_sub-1,kind_real)/real(ie_sub,kind_real)

if (ie==1) then
   ! Allocation
   call var%alloc(nam,geom)

   ! Initialization
   var%ne = nam%ens1_ne
   var%m2 = zero
   var%m4 = zero
end if
if (ie_sub==1) then
   ! Initialization
   var%seq_m1 = zero
   var%seq_m2 = zero
   var%seq_m3 = zero
   var%seq_m4 = zero
end if

! Remove mean
pert_c0a = fld_c0a-var%seq_m1

! Update fourth-order centered moment
var%seq_m4 = var%seq_m4-four*fac1*var%seq_m3*pert_c0a+six*fac2*var%seq_m2*pert_c0a**2+fac3*pert_c0a**4

! Update third-order centered moment
var%seq_m3 = var%seq_m3-three*fac1*var%seq_m2*pert_c0a+fac4*pert_c0a**3

! Update variance
var%seq_m2 = var%seq_m2+fac5*pert_c0a**2

! Update mean
var%seq_m1 = var%seq_m1+fac1*pert_c0a

! Average variance and fourth-order centered moment
if (ie_sub==nam%ens1_ne/nam%ens1_nsub) then
   var%m2 = var%m2+var%seq_m2
   var%m4 = var%m4+var%seq_m4
end if

if (ie==nam%ens1_ne) then
   ! Normalization
   fac_norm_m2 = one/real(nam%ens1_ne-nam%ens1_nsub,kind_real)
   fac_norm_m4 = one/real(nam%ens1_ne,kind_real)
   !$omp parallel do schedule(static) private(iv,il0,ic0a)
   do iv=1,nam%nv
      do il0=1,geom%nl0
         do ic0a=1,geom%nc0a
            if (geom%gmask_c0a(ic0a,il0)) then
               var%m2(ic0a,il0,iv) = var%m2(ic0a,il0,iv)*fac_norm_m2
               var%m4(ic0a,il0,iv) = var%m4(ic0a,il0,iv)*fac_norm_m4
            else
               var%m2(ic0a,il0,iv) = mpl%msv%valr
               var%m4(ic0a,il0,iv) = mpl%msv%valr
            end if
         end do
      end do
   end do
   !$omp end parallel do

   if (nam%var_filter) then
      ! Filter variance
      call var%filter(mpl,rng,nam,geom)

      ! Take square-root
      do iv=1,nam%nv
         do il0=1,geom%nl0
            do ic0a=1,geom%nc0a
               if (geom%gmask_c0a(ic0a,il0).and.mpl%msv%isnot(var%m2flt(ic0a,il0,iv))) then
                  var%m2sqrt(ic0a,il0,iv) = sqrt(var%m2flt(ic0a,il0,iv))
               else
                  var%m2sqrt(ic0a,il0,iv) = mpl%msv%valr
               end if
            end do
         end do
      end do
   else
      ! Take square-root
      do iv=1,nam%nv
         do il0=1,geom%nl0
            do ic0a=1,geom%nc0a
               if (geom%gmask_c0a(ic0a,il0).and.mpl%msv%isnot(var%m2(ic0a,il0,iv))) then
                  var%m2sqrt(ic0a,il0,iv) = sqrt(var%m2(ic0a,il0,iv))
               else
                  var%m2sqrt(ic0a,il0,iv) = mpl%msv%valr
               end if
            end do
         end do
      end do
   end if
end if

! Reset random seed if necessary
if (nam%default_seed) call rng%reseed(mpl)

! Probe out
@:probe_out()

end subroutine var_update

!----------------------------------------------------------------------
! Subroutine: var_run_var
!> Compute variance
!----------------------------------------------------------------------
subroutine var_run_var(var,mpl,rng,nam,geom,gsi,ens)

implicit none

! Passed variables
class(var_type),intent(inout) :: var  !< Variance
type(mpl_type),intent(inout) :: mpl   !< MPI data
type(rng_type),intent(inout) :: rng   !< Random number generator
type(nam_type),intent(inout) :: nam   !< Namelist
type(geom_type),intent(inout) :: geom !< Geometry
type(gsi_type),intent(in) :: gsi      !< GSI data
type(ens_type), intent(inout) :: ens  !< Ensemble

! Local variables
integer :: ic0a,il0,iv

! Set name
@:set_name(var_run_var)

! Probe in
@:probe_in()

! Allocation
if (.not.nam%iterative_algo) call var%alloc(nam,geom)

if (nam%forced_var) then
   ! Initialization
   var%ne = 0

   ! Copy variance
   do iv=1,nam%nv
      do il0=1,geom%nl0
         var%m2(:,il0,iv) = nam%stddev(il0,iv)**2
      end do
   end do

   ! Missing fourth-order centered moment
   var%m4 = mpl%msv%valr
elseif (nam%from_gsi) then
   ! Initialization
   var%ne = 0

   ! Interpolate variance from GSI data
   call var%from_gsi(mpl,nam,geom,gsi)

   ! Missing fourth-order centered moment
   var%m4 = mpl%msv%valr
elseif (nam%new_var) then
   write(mpl%info,'(a7,a)') '','Compute variance'
   call mpl%flush

   ! Initialization
   var%ne = ens%ne

   ! Compute variance
   call ens%compute_moments(mpl,nam,geom)
   call ens%get_c0(mpl,nam,geom,'m2',0,var%m2)
   call ens%get_c0(mpl,nam,geom,'m4',0,var%m4)
elseif (var%bump_m2_counter>0) then
   ! Initialization
   var%ne = nam%ne

   ! Copy normalized quantities
   var%m2 = var%bump_m2/real(var%bump_m2_counter,kind_real)
   if (var%bump_m4_counter>0) var%m4 = var%bump_m4/real(var%bump_m4_counter,kind_real)

   ! Release memory (partial)
   call var%partial_bump_dealloc
end if

if (nam%var_filter) then
   ! Filter variance
   call var%filter(mpl,rng,nam,geom)

   ! Take square-root
   do iv=1,nam%nv
      do il0=1,geom%nl0
         do ic0a=1,geom%nc0a
            if (geom%gmask_c0a(ic0a,il0).and.mpl%msv%isnot(var%m2flt(ic0a,il0,iv))) then
               var%m2sqrt(ic0a,il0,iv) = sqrt(var%m2flt(ic0a,il0,iv))
            else
               var%m2sqrt(ic0a,il0,iv) = mpl%msv%valr
            end if
         end do
      end do
   end do
else
   ! Take square-root
   do iv=1,nam%nv
      do il0=1,geom%nl0
         do ic0a=1,geom%nc0a
            if (geom%gmask_c0a(ic0a,il0).and.mpl%msv%isnot(var%m2(ic0a,il0,iv))) then
               var%m2sqrt(ic0a,il0,iv) = sqrt(var%m2(ic0a,il0,iv))
            else
               var%m2sqrt(ic0a,il0,iv) = mpl%msv%valr
            end if
         end do
      end do
   end do
end if

! Reset random seed if necessary
if (nam%default_seed) call rng%reseed(mpl)

! Probe out
@:probe_out()

end subroutine var_run_var

!----------------------------------------------------------------------
! Subroutine: var_from_gsi
!> Interpolate standard-deviation from GSI data
!----------------------------------------------------------------------
subroutine var_from_gsi(var,mpl,nam,geom,gsi)

implicit none

! Passed variables
class(var_type),intent(inout) :: var !< Variance
type(mpl_type),intent(inout) :: mpl  !< MPI data
type(nam_type),intent(inout) :: nam  !< Namelist
type(geom_type),intent(in) :: geom   !< Geometry
type(gsi_type),intent(in) :: gsi     !< GSI data

! Local variables
integer :: il0,ic0a,iv,ilatm,ilatp
real(kind_real) :: rlatm,rlatp

! Set name
@:set_name(var_from_gsi)

! Probe in
@:probe_in()

! Interpolate
do iv=1,nam%nv
   ! Initialization
   var%m2(:,:,iv) = zero

   if (gsi%var2d(iv)) then
      ! 2D variable
      var%m2(:,:,iv) = mpl%msv%valr
      do ic0a=1,geom%nc0a
         call gsi%interp_lat(mpl,geom%lat_c0a(ic0a),ilatm,ilatp,rlatm,rlatp)
         var%m2(ic0a,gsi%ilev2d,iv) = (rlatm*gsi%stddev(ilatm,1,iv)+rlatp*gsi%stddev(ilatp,1,iv))**2
      end do
   else
      ! 3D variable
      do ic0a=1,geom%nc0a
         call gsi%interp_lat(mpl,geom%lat_c0a(ic0a),ilatm,ilatp,rlatm,rlatp)
         do il0=1,geom%nl0
            var%m2(ic0a,il0,iv) = &
 & (rlatm*gsi%rlevm(il0)*gsi%stddev(ilatm,gsi%l0_to_levm(il0),iv) &
 & +rlatm*gsi%rlevp(il0)*gsi%stddev(ilatm,gsi%l0_to_levp(il0),iv) &
 & +rlatp*gsi%rlevm(il0)*gsi%stddev(ilatp,gsi%l0_to_levm(il0),iv) &
 & +rlatp*gsi%rlevp(il0)*gsi%stddev(ilatp,gsi%l0_to_levp(il0),iv))**2
         end do
      end do
   end if
end do

! Probe out
@:probe_out()

end subroutine var_from_gsi

!----------------------------------------------------------------------
! Subroutine: var_filter
!> Filter variance
!----------------------------------------------------------------------
subroutine var_filter(var,mpl,rng,nam,geom)

implicit none

! Passed variables
class(var_type),intent(inout) :: var  !< Variance
type(mpl_type),intent(inout) :: mpl   !< MPI data
type(rng_type),intent(inout) :: rng   !< Random number generator
type(nam_type),intent(inout) :: nam   !< Namelist
type(geom_type),intent(inout) :: geom !< Geometry

! Local variables
integer :: iv,il0,il0i,iter,ipass,ipass_min(geom%nl0)
real(kind_real) :: P9,P20,P21,diff,diff_abs_min(geom%nl0),m2avg
real(kind_real) :: m2avg_init(geom%nl0,nam%nv),m2sq(geom%nl0),m4(geom%nl0),m2sqasy(geom%nl0)
real(kind_real) :: rhflt(geom%nl0),drhflt(geom%nl0),m2prod(geom%nl0),m2_ini(geom%nc0a,geom%nl0),m2(geom%nc0a,geom%nl0)
logical :: dichotomy(geom%nl0),convergence(geom%nl0)
type(nicas_blk_type) :: nicas_blk

! Set name
@:set_name(var_filter)

! Probe in
@:probe_in()

! Filter variance
write(mpl%info,'(a7,a)') '','Filter variance'
call mpl%flush

! Initial averaged value
do iv=1,nam%nv
   do il0=1,geom%nl0
      m2avg_init(il0,iv) = global_average(mpl,var%m2(:,il0,iv),geom%gmask_c0a(:,il0))
   end do
end do

if ((nam%var_niter<=0).and.(nam%var_npass<=0)) then
   ! Copy value
   do iv=1,nam%nv
      do il0=1,geom%nl0
         var%m2flt(:,il0,iv) = m2avg_init(il0,iv)
      end do
   end do
else
   ! Ensemble size-dependent coefficients
   if (var%ne<3) call mpl%abort('${subr}$','var%ne should be larger than 3')
   P9 = -real(var%ne,kind_real)/real((var%ne-2)*(var%ne-3),kind_real)
   P20 = real((var%ne-1)*(var%ne**2-3*var%ne+3),kind_real)/real(var%ne*(var%ne-2)*(var%ne-3),kind_real)
   P21 = real(var%ne-1,kind_real)/real(var%ne+1,kind_real)

   do iv=1,nam%nv
      write(mpl%info,'(a10,a,a)') '','Variable ',trim(nam%variables(iv))
      call mpl%flush

      ! Global sum
      m2sq = zero
      m4 = zero
      do il0=1,geom%nl0
         if (mpl%msv%isanynot(var%m2(:,il0,iv))) m2sq(il0) = zss_sum(var%m2(:,il0,iv)**2,mask=geom%gmask_c0a(:,il0))
         if (mpl%msv%isanynot(var%m4(:,il0,iv))) m4(il0) = zss_sum(var%m4(:,il0,iv),mask=geom%gmask_c0a(:,il0))
      end do
      call mpl%f_comm%allreduce(m2sq,fckit_mpi_sum())
      call mpl%f_comm%allreduce(m4,fckit_mpi_sum())

      ! Asymptotic statistics
      if (nam%gau_approx) then
         ! Gaussian approximation
         m2sqasy = P21*m2sq
      else
         ! General case
         m2sqasy = P20*m2sq+P9*m4
      end if

      ! Initialization
      m2_ini = var%m2(:,:,iv)

      if (nam%var_niter>0) then
         ! Dichotomy initialization
         convergence = .true.
         dichotomy = .false.
         rhflt = nam%var_rhflt(1:geom%nl0,iv)
         drhflt = rhflt

         ! Global product
         do il0=1,geom%nl0
            m2prod(il0) = zss_sum(m2_ini(:,il0)**2,mask=geom%gmask_c0a(:,il0))
         end do
         call mpl%f_comm%allreduce(m2prod,fckit_mpi_sum())

         ! Save results
         do il0=1,geom%nl0
            diff = m2prod(il0)-m2sqasy(il0)
            diff_abs_min(il0) = abs(diff)
            var%m2flt(:,il0,iv) = m2(:,il0)
         end do

         do iter=1,nam%var_niter
            ! Copy initial value
            m2 = m2_ini

            ! Set smoother parameters
            call nicas_blk%compute_parameters(mpl,rng,nam,geom,rhflt)

            ! Apply smoother
            do il0=1,geom%nl0
               il0i = nicas_blk%l0_to_l0i(il0)
               call nicas_blk%cmp(il0i)%apply_horizontal_smoother(mpl,geom,il0,m2(:,il0))
            end do

            ! Global product
            do il0=1,geom%nl0
               m2prod(il0) = zss_sum(m2(:,il0)*m2_ini(:,il0),mask=geom%gmask_c0a(:,il0))
            end do
            call mpl%f_comm%allreduce(m2prod,fckit_mpi_sum())

            ! Update support radius
            do il0=1,geom%nl0
               diff = m2prod(il0)-m2sqasy(il0)
               if ((abs(diff)<diff_abs_min(il0)).or.(nam%var_niter==1)) then
                  ! Copy best result
                  diff_abs_min(il0) = abs(diff)
                  var%m2flt(:,:,iv) = m2
               end if
               if (iter<nam%var_niter) then
                  if (diff>zero) then
                     ! Increase filtering support radius
                     if (dichotomy(il0)) then
                        drhflt(il0) = half*drhflt(il0)
                        rhflt(il0) = rhflt(il0)+drhflt(il0)
                     else
                        convergence(il0) = .false.
                        rhflt(il0) = rhflt(il0)+drhflt(il0)
                        drhflt(il0) = two*drhflt(il0)
                    end if
                  else
                     ! Convergence
                     convergence(il0) = .true.

                     ! Change dichotomy status
                     dichotomy(il0) = .true.

                     ! Decrease filtering support radius
                     drhflt(il0) = half*drhflt(il0)
                     rhflt(il0) = rhflt(il0)-drhflt(il0)
                  end if
               end if
            end do

            ! Release memory
            call nicas_blk%dealloc
         end do

         ! Global product
         do il0=1,geom%nl0
            m2prod(il0) = zss_sum(var%m2flt(:,il0,iv)*m2_ini(:,il0),mask=geom%gmask_c0a(:,il0))
         end do
         call mpl%f_comm%allreduce(m2prod,fckit_mpi_sum())

         ! Print results
         write(mpl%info,'(a13,a)') '','Optimal filtering length-scale:'
         call mpl%flush
         do il0=1,geom%nl0
            if (m2sqasy(il0)>zero) then
               write(mpl%test,'(a16,a,i3,a,f10.2,a,e12.5)') '','Level ',il0,': rhflt = ',rhflt(il0)*reqkm, &
 & ' km, rel. diff. = ',(m2prod(il0)-m2sqasy(il0))/m2sqasy(il0)
               call mpl%flush
            end if
         end do
      elseif (nam%var_npass>0) then
         ! Initialization
         m2 = var%m2(:,:,iv)

         ! Global product
         do il0=1,geom%nl0
            m2prod(il0) = zss_sum(m2_ini(:,il0)**2,mask=geom%gmask_c0a(:,il0))
         end do
         call mpl%f_comm%allreduce(m2prod,fckit_mpi_sum())

         ! Save results
         do il0=1,geom%nl0
            diff = m2prod(il0)-m2sqasy(il0)
            diff_abs_min(il0) = abs(diff)
            ipass_min(il0) = 0
            var%m2flt(:,il0,iv) = m2(:,il0)
         end do

         ! Set unique smoother parameters
         rhflt = nam%var_rhflt(1:geom%nl0,iv)
         call nicas_blk%compute_parameters(mpl,rng,nam,geom,rhflt)

         ! Apply smoother
         do ipass=1,nam%var_npass
            ! Apply smoother
            do il0=1,geom%nl0
               il0i = nicas_blk%l0_to_l0i(il0)
               call nicas_blk%cmp(il0i)%apply_horizontal_smoother(mpl,geom,il0,m2(:,il0))
            end do

            ! Global product
            do il0=1,geom%nl0
               m2prod(il0) = zss_sum(m2(:,il0)*m2_ini(:,il0),mask=geom%gmask_c0a(:,il0))
            end do
            call mpl%f_comm%allreduce(m2prod,fckit_mpi_sum())

            ! Save results
            do il0=1,geom%nl0
               diff = m2prod(il0)-m2sqasy(il0)
               if (abs(diff)<diff_abs_min(il0)) then
                  diff_abs_min(il0) = abs(diff)
                  ipass_min(il0) = ipass
                  var%m2flt(:,il0,iv) = m2(:,il0)
               end if
            end do
         end do

         ! Release memory
         call nicas_blk%dealloc

         ! Global product
         do il0=1,geom%nl0
            m2prod(il0) = zss_sum(var%m2flt(:,il0,iv)*m2_ini(:,il0),mask=geom%gmask_c0a(:,il0))
         end do
         call mpl%f_comm%allreduce(m2prod,fckit_mpi_sum())

         ! Print results
         write(mpl%info,'(a13,a,i2,a)') '','Optimal number of passes (max. is ',nam%var_npass,')'
         call mpl%flush
         do il0=1,geom%nl0
            if (m2sqasy(il0)>zero) then
               write(mpl%test,'(a16,a,i3,a,i2,a,f10.2,a,e12.5)') '','Level ',il0,': ',ipass_min(il0),' x ',rhflt(il0)*reqkm, &
 & 'km, rel. diff. = ',(m2prod(il0)-m2sqasy(il0))/m2sqasy(il0)
               call mpl%flush
            end if
         end do
      end if
   end do
end if

! Averaged value (initial / final)
write(mpl%info,'(a7,a)') '','Averaged value (initial / final):'
call mpl%flush
do iv=1,nam%nv
   write(mpl%info,'(a10,a,a)') '','Variable ',trim(nam%variables(iv))
   call mpl%flush
   do il0=1,geom%nl0
      m2avg = global_average(mpl,var%m2(:,il0,iv),geom%gmask_c0a(:,il0))
      write(mpl%test,'(a13,a,i3,a,e12.5,a,e12.5)') '','Level ',il0,' ~> ',m2avg_init(il0,iv),' / ',m2avg
      call mpl%flush
   end do
end do

! Probe out
@:probe_out()

end subroutine var_filter

!----------------------------------------------------------------------
! Subroutine: var_apply_sqrt
!> Apply square-root variance
!----------------------------------------------------------------------
subroutine var_apply_sqrt(var,mpl,nam,geom,fld)

implicit none

! Passed variables
class(var_type),intent(in) :: var                               !< Variance
type(mpl_type),intent(inout) :: mpl                             !< MPI data
type(nam_type),intent(in) :: nam                                !< Namelist
type(geom_type),intent(in) :: geom                              !< Geometry
real(kind_real),intent(inout) :: fld(geom%nc0a,geom%nl0,nam%nv) !< Source/destination vector

! Local variables
integer :: ic0a,il0,iv

! Set name
@:set_name(var_apply_sqrt)

! Probe in
@:probe_in()

! Apply variance square-root
do il0=1,geom%nl0
   do ic0a=1,geom%nc0a
      if (geom%gmask_c0a(ic0a,il0)) then
         do iv=1,nam%nv
            if (mpl%msv%isnot(fld(ic0a,il0,iv))) then
               fld(ic0a,il0,iv) = fld(ic0a,il0,iv)*var%m2sqrt(ic0a,il0,iv)
            else
               fld(ic0a,il0,iv) = zero
            end if
         end do
      end if
   end do
end do

! Probe out
@:probe_out()

end subroutine var_apply_sqrt

!----------------------------------------------------------------------
! Subroutine: var_apply_sqrt_inv
!> Apply square-root variance inverse
!----------------------------------------------------------------------
subroutine var_apply_sqrt_inv(var,mpl,nam,geom,fld)

implicit none

! Passed variables
class(var_type),intent(in) :: var                               !< Variance
type(mpl_type),intent(inout) :: mpl                             !< MPI data
type(nam_type),intent(in) :: nam                                !< Namelist
type(geom_type),intent(in) :: geom                              !< Geometry
real(kind_real),intent(inout) :: fld(geom%nc0a,geom%nl0,nam%nv) !< Source/destination vector

! Local variables
integer :: ic0a,il0,iv

! Set name
@:set_name(var_apply_sqrt_inv)

! Probe in
@:probe_in()

! Apply inverse variance square-root
do il0=1,geom%nl0
   do ic0a=1,geom%nc0a
      if (geom%gmask_c0a(ic0a,il0)) then
         do iv=1,nam%nv
            if (mpl%msv%isnot(fld(ic0a,il0,iv))) then
               fld(ic0a,il0,iv) = fld(ic0a,il0,iv)/var%m2sqrt(ic0a,il0,iv)
            else
               fld(ic0a,il0,iv) = zero
            end if
         end do
      end if
   end do
end do

! Probe out
@:probe_out()

end subroutine var_apply_sqrt_inv

end module type_var
