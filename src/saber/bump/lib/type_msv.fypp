#:include 'generics.fypp'
#:include 'instrumentation.fypp'
!----------------------------------------------------------------------
! Module: type_msv
!> Deal with missing values
! Author: Benjamin Menetrier
! Licensing: this code is distributed under the CeCILL-C license
! Copyright 2015-... UCAR, CERFACS, METEO-FRANCE and IRIT
!----------------------------------------------------------------------
module type_msv

use iso_fortran_env, only: output_unit
use tools_kinds,only: kind_int,kind_real
@:use_probe()

implicit none

type msv_type
   ! Missing values
   integer :: vali           !< Missing value for integers
   real(kind_real) :: valr   !< Missing value for reals
   logical :: vall = .false. !< Missing value for logicals
contains
   #:for dtype in dtypes_ir
      procedure msv_isnot_${dtype}$_r0
      procedure msv_is_${dtype}$_r0
      #:for rank in ranks_123456
         procedure msv_isnot_${dtype}$_r${rank}$
         procedure msv_is_${dtype}$_r${rank}$
         procedure msv_isanynot_${dtype}$_r${rank}$
         procedure msv_isany_${dtype}$_r${rank}$
         procedure msv_isallnot_${dtype}$_r${rank}$
         procedure msv_isall_${dtype}$_r${rank}$
      #:endfor
   #:endfor
@:init_procedure(14)
   generic :: isnot => &
   #:for dtype in dtypes_ir
@:add_procedure(msv_isnot_${dtype}$_r0)
      #:for rank in ranks_123456
@:add_procedure(msv_isnot_${dtype}$_r${rank}$)
      #:endfor
   #:endfor
@:init_procedure(14)
   generic :: is => &
   #:for dtype in dtypes_ir
@:add_procedure(msv_is_${dtype}$_r0)
      #:for rank in ranks_123456
@:add_procedure(msv_is_${dtype}$_r${rank}$)
      #:endfor
   #:endfor
@:init_procedure(12)
   generic :: isanynot => &
   #:for dtype in dtypes_ir
      #:for rank in ranks_123456
@:add_procedure(msv_isanynot_${dtype}$_r${rank}$)
      #:endfor
   #:endfor
@:init_procedure(12)
   generic :: isany => &
   #:for dtype in dtypes_ir
      #:for rank in ranks_123456
@:add_procedure(msv_isany_${dtype}$_r${rank}$)
      #:endfor
   #:endfor
@:init_procedure(12)
   generic :: isallnot => &
   #:for dtype in dtypes_ir
      #:for rank in ranks_123456
@:add_procedure(msv_isallnot_${dtype}$_r${rank}$)
      #:endfor
   #:endfor
@:init_procedure(12)
   generic :: isall => &
   #:for dtype in dtypes_ir
      #:for rank in ranks_123456
@:add_procedure(msv_isall_${dtype}$_r${rank}$)
      #:endfor
   #:endfor
end type msv_type

private
public :: msv_type

contains

#:for dtype in dtypes_ir
!----------------------------------------------------------------------
! Function: msv_isnot_${dtype}$_r0
!> Check if a value is not set to missing value
!----------------------------------------------------------------------
function msv_isnot_${dtype}$_r0(msv,value) result(test)

implicit none

! Passed variables
class(msv_type),intent(in) :: msv    !< Missing values
${ftype[dtype]}$,intent(in) :: value !< Value

! Returned variable
logical :: test

! Set name
@:set_name(msv_isnot_${dtype}$_r0)

! Probe in
@:probe_in()

! Check distance to missing value
test = abs(value-${msv[dtype]}$)>${zero[dtype]}$

! Probe out
@:probe_out()

end function msv_isnot_${dtype}$_r0
#:endfor

#:for dtype in dtypes_ir
   #:for rank in ranks_123456
!----------------------------------------------------------------------
! Function: msv_isnot_${dtype}$_r${rank}$
!> Check if an array is not set to missing value
!----------------------------------------------------------------------
function msv_isnot_${dtype}$_r${rank}$(msv,array) result(test)

implicit none

! Passed variables
class(msv_type),intent(in) :: msv                   !< Missing values
${ftype[dtype]}$,intent(in) :: array(${dim[rank]}$) !< Array

! Returned variable
logical :: test( &
#:for arg_dim in range(1,rank)
 & size(array,${arg_dim}$), &
#:endfor
 & size(array,${rank}$))

! Set name
@:set_name(msv_isnot_${dtype}$_r${rank}$)

! Probe in
@:probe_in()

! Check distance to missing value
test = abs(array-${msv[dtype]}$)>${zero[dtype]}$

! Probe out
@:probe_out()

end function msv_isnot_${dtype}$_r${rank}$
   #:endfor
#:endfor

#:for dtype in dtypes_ir
!----------------------------------------------------------------------
! Function: msv_is_${dtype}$_r0
!> Check if a value is set to missing value
!----------------------------------------------------------------------
function msv_is_${dtype}$_r0(msv,value) result(test)

implicit none

! Passed variables
class(msv_type),intent(in) :: msv    !< Missing values
${ftype[dtype]}$,intent(in) :: value !< Value

! Returned variable
logical :: test

! Set name
@:set_name(msv_is_${dtype}$_r0)

! Probe in
@:probe_in()

! Inverse of msv%isnot
test = .not.msv%isnot(value)

! Probe out
@:probe_out()

end function msv_is_${dtype}$_r0
#:endfor

#:for dtype in dtypes_ir
   #:for rank in ranks_123456
!----------------------------------------------------------------------
! Function: msv_is_${dtype}$_r${rank}$
!> Check if an array is not set to missing value
!----------------------------------------------------------------------
function msv_is_${dtype}$_r${rank}$(msv,array) result(test)

implicit none

! Passed variables
class(msv_type),intent(in) :: msv                   !< Missing values
${ftype[dtype]}$,intent(in) :: array(${dim[rank]}$) !< Array

! Returned variable
logical :: test( &
#:for arg_dim in range(1,rank)
 & size(array,${arg_dim}$), &
#:endfor
 & size(array,${rank}$))

! Set name
@:set_name(msv_is_${dtype}$_r${rank}$)

! Probe in
@:probe_in()

! Inverse of msv%isnot
test = .not.msv%isnot(array)

! Probe out
@:probe_out()

end function msv_is_${dtype}$_r${rank}$
   #:endfor
#:endfor

#:for dtype in dtypes_ir
   #:for rank in ranks_123456
!----------------------------------------------------------------------
! Function: msv_isanynot_${dtype}$_r${rank}$
!> Check if any value in an array is not set to missing value
!----------------------------------------------------------------------
function msv_isanynot_${dtype}$_r${rank}$(msv,array) result(test)

implicit none

! Passed variables
class(msv_type),intent(in) :: msv                   !< Missing values
${ftype[dtype]}$,intent(in) :: array(${dim[rank]}$) !< Array

! Returned variable
logical :: test

! Set name
@:set_name(msv_isanynot_${dtype}$_r${rank}$)

! Probe in
@:probe_in()

! Check array size
if (size(array)==0) then
   write(output_unit,'(a)') 'Error: empty array in ${subr}$'
   call flush(output_unit)
   error stop 6
end if

! Any of msv%isnot
test = any(msv%isnot(array))

! Probe out
@:probe_out()

end function msv_isanynot_${dtype}$_r${rank}$
   #:endfor
#:endfor

#:for dtype in dtypes_ir
   #:for rank in ranks_123456
!----------------------------------------------------------------------
! Function: msv_isany_${dtype}$_r${rank}$
!> Check if any value in an array is set to missing value
!----------------------------------------------------------------------
function msv_isany_${dtype}$_r${rank}$(msv,array) result(test)

implicit none

! Passed variables
class(msv_type),intent(in) :: msv                   !< Missing values
${ftype[dtype]}$,intent(in) :: array(${dim[rank]}$) !< Array

! Returned variable
logical :: test

! Set name
@:set_name(msv_isany_${dtype}$_r${rank}$)

! Probe in
@:probe_in()

! Check array size
if (size(array)==0) then
   write(output_unit,'(a)') 'Error: empty array in ${subr}$'
   call flush(output_unit)
   error stop 7
end if

! Inverse of msv%isallnot
test = .not.msv%isallnot(array)

! Probe out
@:probe_out()

end function msv_isany_${dtype}$_r${rank}$
   #:endfor
#:endfor

#:for dtype in dtypes_ir
   #:for rank in ranks_123456
!----------------------------------------------------------------------
! Function: msv_isallnot_${dtype}$_r${rank}$
!> Check if all values in an array are not set to missing value
!----------------------------------------------------------------------
function msv_isallnot_${dtype}$_r${rank}$(msv,array) result(test)

implicit none

! Passed variables
class(msv_type),intent(in) :: msv                   !< Missing values
${ftype[dtype]}$,intent(in) :: array(${dim[rank]}$) !< Array

! Returned variable
logical :: test

! Set name
@:set_name(msv_isallnot_${dtype}$_r${rank}$)

! Probe in
@:probe_in()

! Check array size
if (size(array)==0) then
   write(output_unit,'(a)') 'Error: empty array in ${subr}$'
   call flush(output_unit)
   error stop 8
end if

! All of msv%isnot
test = all(msv%isnot(array))

! Probe out
@:probe_out()

end function msv_isallnot_${dtype}$_r${rank}$
   #:endfor
#:endfor

#:for dtype in dtypes_ir
   #:for rank in ranks_123456
!----------------------------------------------------------------------
! Function: msv_isall_${dtype}$_r${rank}$
!> Check if all values in an array are set to missing value
!----------------------------------------------------------------------
function msv_isall_${dtype}$_r${rank}$(msv,array) result(test)

implicit none

! Passed variables
class(msv_type),intent(in) :: msv                   !< Missing values
${ftype[dtype]}$,intent(in) :: array(${dim[rank]}$) !< Array

! Returned variable
logical :: test

! Set name
@:set_name(msv_isall_${dtype}$_r${rank}$)

! Probe in
@:probe_in()

! Check array size
if (size(array)==0) then
   write(output_unit,'(a)') 'Error: empty array in ${subr}$'
   call flush(output_unit)
   error stop 7
end if

! Inverse of msv%isanynot
test = .not.msv%isanynot(array)

! Probe out
@:probe_out()

end function msv_isall_${dtype}$_r${rank}$
   #:endfor
#:endfor

end module type_msv
