#:include 'instrumentation.fypp'
!----------------------------------------------------------------------
! Module: type_wind
!> Wind derived type
! Author: Benjamin Menetrier
! Licensing: this code is distributed under the CeCILL-C license
! Copyright 2015-... UCAR, CERFACS, METEO-FRANCE and IRIT
!----------------------------------------------------------------------
module type_wind

use fckit_mpi_module, only: fckit_mpi_status
!$ use omp_lib
use tools_const, only: zero,half,one,two,eight,ten,twelve,pi,req
use tools_func, only: sphere_dist,zss_count
use tools_kinds, only: kind_real,huge_real
use tools_netcdf, only: create_file,open_file,put_att,get_att,close_file
use type_com, only: com_type
use type_geom, only: geom_type
use type_linop, only: linop_type
use type_mpl, only: mpl_type
use type_nam, only: nam_type
@:use_probe()
use type_rng, only: rng_type

implicit none

! Wind derived type
type wind_type
   integer :: nlla                       !< Size of halo A on regular grid
   integer :: nllb                       !< Size of halo B on regular grid
   integer :: nllw                       !< Size of halo W on regular grid
   integer :: nc0b                       !< Size of halo B on subset Sc0
   type(com_type) :: com_c0_AB           !< Communication on subset Sc0, halo A to halo B
   type(com_type) :: com_ll_AB           !< Communication on regular grid, halo A to halo B
   type(linop_type) :: interp_c0b_to_llw !< Interpolation from subset Sc0, halo B, to regular grid, halo W
   type(linop_type) :: interp_llb_to_c0a !< Interpolation from regular grid, halo B, to subset Sc0, halo A
   type(linop_type) :: transform         !< psi/chi to u/v transform
contains
   procedure :: dealloc => wind_dealloc
   procedure :: read_local => wind_read_local
   procedure :: write_local => wind_write_local
   procedure :: send => wind_send
   procedure :: receive => wind_receive
   procedure :: buffer_size => wind_buffer_size
   procedure :: serialize => wind_serialize
   procedure :: deserialize => wind_deserialize
   procedure :: setup => wind_setup
   procedure :: psichi_to_uv => wind_psichi_to_uv
   procedure :: psichi_to_uv_ad => wind_psichi_to_uv_ad
end type wind_type

private
public :: wind_type

contains

!----------------------------------------------------------------------
! Subroutine: wind_dealloc
!> Release memory (full)
!----------------------------------------------------------------------
subroutine wind_dealloc(wind)

implicit none

! Passed variables
class(wind_type),intent(inout) :: wind !< Wind

! Set name
@:set_name(wind_dealloc)

! Probe in
@:probe_in()

! Release memory
call wind%com_c0_AB%dealloc
call wind%com_ll_AB%dealloc
call wind%interp_c0b_to_llw%dealloc
call wind%interp_llb_to_c0a%dealloc
call wind%transform%dealloc

! Probe out
@:probe_out()

end subroutine wind_dealloc

!----------------------------------------------------------------------
! Subroutine: wind_read_local
!> Read
!----------------------------------------------------------------------
subroutine wind_read_local(wind,mpl,nam)

implicit none

! Passed variables
class(wind_type),intent(inout) :: wind !< Wind data
type(mpl_type),intent(inout) :: mpl    !< MPI data
type(nam_type),intent(in) :: nam       !< Namelist

! Local variables
integer :: iproc,iprocio,ncid
type(wind_type) :: wind_tmp

! Set name
@:set_name(wind_read_local)

! Probe in
@:probe_in()

! Read wind transform
do iproc=1,mpl%nproc
   ! Reading task
   iprocio = mod(iproc,mpl%nprocio)
   if (iprocio==0) iprocio = mpl%nprocio

   if (mpl%myproc==iprocio) then
      write(mpl%info,'(a7,a,i6)') '','Read wind data of task ',iproc
      call mpl%flush

      ! Open file
      ncid = open_file(mpl,nam%fname_wind,iproc)

      if (iproc==iprocio) then
         ! Read attributes
         call get_att(mpl,ncid,0,'nlla',wind%nlla)
         call get_att(mpl,ncid,0,'nllb',wind%nllb)
         call get_att(mpl,ncid,0,'nllw',wind%nllw)
         call get_att(mpl,ncid,0,'nc0b',wind%nc0b)

         ! Read data
         wind%com_c0_AB%prefix = 'com_c0_AB'
         call wind%com_c0_AB%read(mpl,ncid)
         wind%com_ll_AB%prefix = 'com_ll_AB'
         call wind%com_ll_AB%read(mpl,ncid)
         wind%interp_c0b_to_llw%prefix = 'interp_c0b_to_llw'
         call wind%interp_c0b_to_llw%read(mpl,ncid)
         wind%interp_llb_to_c0a%prefix = 'interp_llb_to_c0a'
         call wind%interp_llb_to_c0a%read(mpl,ncid)
         wind%transform%prefix = 'transform'
         call wind%transform%read(mpl,ncid)
      else
         ! Read attributes
         call get_att(mpl,ncid,0,'nlla',wind_tmp%nlla)
         call get_att(mpl,ncid,0,'nllb',wind_tmp%nllb)
         call get_att(mpl,ncid,0,'nllw',wind_tmp%nllw)
         call get_att(mpl,ncid,0,'nc0b',wind_tmp%nc0b)

         ! Read data
         wind_tmp%com_c0_AB%prefix = 'com_c0_AB'
         call wind_tmp%com_c0_AB%read(mpl,ncid)
         wind_tmp%com_ll_AB%prefix = 'com_ll_AB'
         call wind_tmp%com_ll_AB%read(mpl,ncid)
         wind_tmp%interp_c0b_to_llw%prefix = 'interp_c0b_to_llw'
         call wind_tmp%interp_c0b_to_llw%read(mpl,ncid)
         wind_tmp%interp_llb_to_c0a%prefix = 'interp_llb_to_c0a'
         call wind_tmp%interp_llb_to_c0a%read(mpl,ncid)
         wind_tmp%transform%prefix = 'transform'
         call wind_tmp%transform%read(mpl,ncid)

         ! Send data to task iproc
         call wind_tmp%send(mpl,iproc)

         ! Release memory
         call wind_tmp%dealloc
      end if

      ! Close files
      call close_file(mpl,ncid)
   elseif (mpl%myproc==iproc) then
      ! Receive data from task iprocio
      write(mpl%info,'(a7,a,i6)') '','Receive wind data from task ',iprocio
      call mpl%flush
      call wind%receive(mpl,iprocio)
   end if
end do

! Update tag
call mpl%update_tag(4)

! Probe out
@:probe_out()

end subroutine wind_read_local

!----------------------------------------------------------------------
! Subroutine: wind_write_local
!> Write
!----------------------------------------------------------------------
subroutine wind_write_local(wind,mpl,nam)

implicit none

! Passed variables
class(wind_type),intent(inout) :: wind !< Wind data
type(mpl_type),intent(inout) :: mpl    !< MPI data
type(nam_type),intent(in) :: nam       !< Namelist

! Local variables
integer :: iproc,iprocio,ncid
type(wind_type) :: wind_tmp

! Set name
@:set_name(wind_write_local)

! Probe in
@:probe_in()

! Write wind blocks
do iproc=1,mpl%nproc
   ! Writing task
   iprocio = mod(iproc,mpl%nprocio)
   if (iprocio==0) iprocio = mpl%nprocio

   if (mpl%myproc==iprocio) then
      write(mpl%info,'(a7,a,i6)') '','Write wind data of task ',iproc
      call mpl%flush

      ! Open file
      ncid = create_file(mpl,nam%fname_wind,iproc)
      if (iproc==iprocio) then
         ! Write attributes
         call put_att(mpl,ncid,0,'nlla',wind%nlla)
         call put_att(mpl,ncid,0,'nllb',wind%nllb)
         call put_att(mpl,ncid,0,'nllw',wind%nllw)
         call put_att(mpl,ncid,0,'nc0b',wind%nc0b)

         ! Write data (definition mode)
         call wind%com_c0_AB%write_def(mpl,ncid)
         call wind%com_ll_AB%write_def(mpl,ncid)
         call wind%interp_c0b_to_llw%write_def(mpl,ncid)
         call wind%interp_llb_to_c0a%write_def(mpl,ncid)
         call wind%transform%write_def(mpl,ncid)

         ! Write data (data mode)
         call wind%com_c0_AB%write_data(mpl)
         call wind%com_ll_AB%write_data(mpl)
         call wind%interp_c0b_to_llw%write_data(mpl)
         call wind%interp_llb_to_c0a%write_data(mpl)
         call wind%transform%write_data(mpl)
      else
         ! Receive data from task iproc
         call wind_tmp%receive(mpl,iproc)

         ! Write attributes (definition mode)
         call put_att(mpl,ncid,0,'nlla',wind_tmp%nlla)
         call put_att(mpl,ncid,0,'nllb',wind_tmp%nllb)
         call put_att(mpl,ncid,0,'nllw',wind_tmp%nllw)
         call put_att(mpl,ncid,0,'nc0b',wind_tmp%nc0b)

         ! Write data (data mode)
         call wind_tmp%com_c0_AB%write_def(mpl,ncid)
         call wind_tmp%com_ll_AB%write_def(mpl,ncid)
         call wind_tmp%interp_c0b_to_llw%write_def(mpl,ncid)
         call wind_tmp%interp_llb_to_c0a%write_def(mpl,ncid)
         call wind_tmp%transform%write_def(mpl,ncid)

         ! Write data
         call wind_tmp%com_c0_AB%write_data(mpl)
         call wind_tmp%com_ll_AB%write_data(mpl)
         call wind_tmp%interp_c0b_to_llw%write_data(mpl)
         call wind_tmp%interp_llb_to_c0a%write_data(mpl)
         call wind_tmp%transform%write_data(mpl)

         ! Release memory
         call wind_tmp%dealloc
      end if

      ! Close files
      call close_file(mpl,ncid)
   elseif (mpl%myproc==iproc) then
      ! Send data to task iprocio
      write(mpl%info,'(a7,a,i6)') '','Send wind data to task ',iprocio
      call mpl%flush
      call wind%send(mpl,iprocio)
   end if
end do

! Update tag
call mpl%update_tag(4)

! Probe out
@:probe_out()

end subroutine wind_write_local

!----------------------------------------------------------------------
! Subroutine: wind_send
!> Send
!----------------------------------------------------------------------
subroutine wind_send(wind,mpl,iproc)

implicit none

! Passed variables
class(wind_type),intent(in) :: wind !< Wind data
type(mpl_type),intent(inout) :: mpl !< MPI data
integer,intent(in) :: iproc         !< Destination task

! Local variables
integer :: nbufi,nbufr,bufs(2)
integer,allocatable :: bufi(:)
real(kind_real),allocatable :: bufr(:)

! Set name
@:set_name(wind_send)

! Probe in
@:probe_in()

! Buffer size
call wind%buffer_size(mpl,nbufi,nbufr)

! Allocation
allocate(bufi(nbufi))
allocate(bufr(nbufr))

! Serialize
call wind%serialize(mpl,nbufi,nbufr,bufi,bufr)

! Send buffer size
bufs = (/nbufi,nbufr/)
call mpl%f_comm%send(bufs,iproc-1,mpl%tag)

! Send data
call mpl%f_comm%send(bufi,iproc-1,mpl%tag+1)
call mpl%f_comm%send(bufr,iproc-1,mpl%tag+2)

! Probe out
@:probe_out()

end subroutine wind_send

!----------------------------------------------------------------------
! Subroutine: wind_receive
!> Receive
!----------------------------------------------------------------------
subroutine wind_receive(wind,mpl,iproc)

implicit none

! Passed variables
class(wind_type),intent(inout) :: wind !< Wind data
type(mpl_type),intent(inout) :: mpl    !< MPI data
integer,intent(in) :: iproc            !< Source task

! Local variables
integer :: nbufi,nbufr,bufs(2)
integer,allocatable :: bufi(:)
real(kind_real),allocatable :: bufr(:)
type(fckit_mpi_status) :: status

! Set name
@:set_name(wind_receive)

! Probe in
@:probe_in()

! Receive buffer size
call mpl%f_comm%receive(bufs,iproc-1,mpl%tag,status)
nbufi = bufs(1)
nbufr = bufs(2)

! Allocation
allocate(bufi(nbufi))
allocate(bufr(nbufr))

! Receive data
call mpl%f_comm%receive(bufi,iproc-1,mpl%tag+1,status)
call mpl%f_comm%receive(bufr,iproc-1,mpl%tag+2,status)

! Deserialize
call wind%deserialize(mpl,nbufi,nbufr,bufi,bufr)

! Release memory
deallocate(bufi)
deallocate(bufr)

! Probe out
@:probe_out()

end subroutine wind_receive

!----------------------------------------------------------------------
! Subroutine: wind_buffer_size
!> Buffer size
!----------------------------------------------------------------------
subroutine wind_buffer_size(wind,mpl,nbufi,nbufr)

implicit none

! Passed variables
class(wind_type),intent(in) :: wind !< Wind data block
type(mpl_type),intent(inout) :: mpl !< MPI data
integer,intent(out) :: nbufi        !< Buffer size (integer)
integer,intent(out) :: nbufr        !< Buffer size (real)

! Local variables
integer :: nnbufi,nnbufr

! Set name
@:set_name(wind_buffer_size)

! Probe in
@:probe_in()

! Initialization
nbufi = 0
nbufr = 0

! Total dimensions
nbufi = nbufi+2

! Dimensions
nbufi = nbufi+4

! com_c0_AB
call wind%com_c0_AB%buffer_size(mpl,nnbufi)
nbufi = nbufi+nnbufi

! com_ll_AB
call wind%com_ll_AB%buffer_size(mpl,nnbufi)
nbufi = nbufi+nnbufi

! interp_c0b_to_llw
call wind%interp_c0b_to_llw%buffer_size(nnbufi,nnbufr)
nbufi = nbufi+nnbufi
nbufr = nbufr+nnbufr

! interp_llb_to_c0a
call wind%interp_llb_to_c0a%buffer_size(nnbufi,nnbufr)
nbufi = nbufi+nnbufi
nbufr = nbufr+nnbufr

! transform
call wind%transform%buffer_size(nnbufi,nnbufr)
nbufi = nbufi+nnbufi
nbufr = nbufr+nnbufr

! Probe out
@:probe_out()

end subroutine wind_buffer_size

!----------------------------------------------------------------------
! Subroutine: wind_serialize
!> Serialize
!----------------------------------------------------------------------
subroutine wind_serialize(wind,mpl,nbufi,nbufr,bufi,bufr)

implicit none

! Passed variables
class(wind_type),intent(in) :: wind           !< Wind data block
type(mpl_type),intent(inout) :: mpl           !< MPI data
integer,intent(in) :: nbufi                   !< Buffer size (integer)
integer,intent(in) :: nbufr                   !< Buffer size (real)
integer,intent(out) :: bufi(nbufi)            !< Buffer (integer)
real(kind_real),intent(out) :: bufr(nbufr)    !< Buffer (real)

! Local variables
integer :: ibufi,ibufr,nnbufi,nnbufr

! Set name
@:set_name(wind_serialize)

! Probe in
@:probe_in()

! Initialization
ibufi = 0
ibufr = 0

! Total dimensions
bufi(ibufi+1) = nbufi
ibufi = ibufi+1
bufi(ibufi+1) = nbufr
ibufi = ibufi+1

! nlla
bufi(ibufi+1) = wind%nlla
ibufi = ibufi+1

! nllb
bufi(ibufi+1) = wind%nllb
ibufi = ibufi+1

! nllw
bufi(ibufi+1) = wind%nllw
ibufi = ibufi+1

! nc0b
bufi(ibufi+1) = wind%nc0b
ibufi = ibufi+1

! com_c0_AB
call wind%com_c0_AB%buffer_size(mpl,nnbufi)
call wind%com_c0_AB%serialize(mpl,nnbufi,bufi(ibufi+1:ibufi+nnbufi))
ibufi = ibufi+nnbufi

! com_ll_AB
call wind%com_ll_AB%buffer_size(mpl,nnbufi)
call wind%com_ll_AB%serialize(mpl,nnbufi,bufi(ibufi+1:ibufi+nnbufi))
ibufi = ibufi+nnbufi

! interp_c0b_to_llw
call wind%interp_c0b_to_llw%buffer_size(nnbufi,nnbufr)
call wind%interp_c0b_to_llw%serialize(mpl,nnbufi,nnbufr,bufi(ibufi+1:ibufi+nnbufi),bufr(ibufr+1:ibufr+nnbufr))
ibufi = ibufi+nnbufi
ibufr = ibufr+nnbufr

! interp_llb_to_c0a
call wind%interp_llb_to_c0a%buffer_size(nnbufi,nnbufr)
call wind%interp_llb_to_c0a%serialize(mpl,nnbufi,nnbufr,bufi(ibufi+1:ibufi+nnbufi),bufr(ibufr+1:ibufr+nnbufr))
ibufi = ibufi+nnbufi
ibufr = ibufr+nnbufr

! transform
call wind%transform%buffer_size(nnbufi,nnbufr)
call wind%transform%serialize(mpl,nnbufi,nnbufr,bufi(ibufi+1:ibufi+nnbufi),bufr(ibufr+1:ibufr+nnbufr))
ibufi = ibufi+nnbufi
ibufr = ibufr+nnbufr

! Check sizes
if (ibufi/=nbufi) call mpl%abort('${subr}$','inconsistent final offset/buffer size (integer)')
if (ibufr/=nbufr) call mpl%abort('${subr}$','inconsistent final offset/buffer size (real)')

! Probe out
@:probe_out()

end subroutine wind_serialize

!----------------------------------------------------------------------
! Subroutine: wind_deserialize
!> Deserialize
!----------------------------------------------------------------------
subroutine wind_deserialize(wind,mpl,nbufi,nbufr,bufi,bufr)

implicit none

! Passed variables
class(wind_type),intent(inout) :: wind    !< Wind data block
type(mpl_type),intent(inout) :: mpl       !< MPI data
integer,intent(in) :: nbufi               !< Buffer size (integer)
integer,intent(in) :: nbufr               !< Buffer size (real)
integer,intent(in) :: bufi(nbufi)         !< Buffer (integer)
real(kind_real),intent(in) :: bufr(nbufr) !< Buffer (real)

! Local variables
integer :: ibufi,ibufr,nnbufi,nnbufr

! Set name
@:set_name(wind_deserialize)

! Probe in
@:probe_in()

! Initialization
ibufi = 0
ibufr = 0

! Check sizes
if (bufi(ibufi+1)/=nbufi) call mpl%abort('${subr}$','inconsistent initial value/buffer size (integer)')
ibufi = ibufi+1
if (bufi(ibufi+1)/=nbufr) call mpl%abort('${subr}$','inconsistent initial value/buffer size (real)')
ibufi = ibufi+1

! nlla
wind%nlla = bufi(ibufi+1)
ibufi = ibufi+1

! nllb
wind%nllb = bufi(ibufi+1)
ibufi = ibufi+1

! nllw
wind%nllw = bufi(ibufi+1)
ibufi = ibufi+1

! nc0b
wind%nc0b = bufi(ibufi+1)
ibufi = ibufi+1

! com_c0_AB
wind%com_c0_AB%prefix = 'com_c0_AB'
nnbufi = bufi(ibufi+1)
call wind%com_c0_AB%deserialize(mpl,nnbufi,bufi(ibufi+1:ibufi+nnbufi))
ibufi = ibufi+nnbufi

! com_ll_AB
wind%com_ll_AB%prefix = 'com_ll_AB'
nnbufi = bufi(ibufi+1)
call wind%com_ll_AB%deserialize(mpl,nnbufi,bufi(ibufi+1:ibufi+nnbufi))
ibufi = ibufi+nnbufi

! interp_c0b_to_llw
wind%interp_c0b_to_llw%prefix = 'interp_c0b_to_llw'
nnbufi = bufi(ibufi+1)
nnbufr = bufi(ibufi+2)
call wind%interp_c0b_to_llw%deserialize(mpl,nnbufi,nnbufr,bufi(ibufi+1:ibufi+nnbufi),bufr(ibufr+1:ibufr+nnbufr))
ibufi = ibufi+nnbufi
ibufr = ibufr+nnbufr

! interp_llb_to_c0a
wind%interp_llb_to_c0a%prefix = 'interp_llb_to_c0a'
nnbufi = bufi(ibufi+1)
nnbufr = bufi(ibufi+2)
call wind%interp_llb_to_c0a%deserialize(mpl,nnbufi,nnbufr,bufi(ibufi+1:ibufi+nnbufi),bufr(ibufr+1:ibufr+nnbufr))
ibufi = ibufi+nnbufi
ibufr = ibufr+nnbufr

! transform
wind%transform%prefix = 'transform'
nnbufi = bufi(ibufi+1)
nnbufr = bufi(ibufi+2)
call wind%transform%deserialize(mpl,nnbufi,nnbufr,bufi(ibufi+1:ibufi+nnbufi),bufr(ibufr+1:ibufr+nnbufr))
ibufi = ibufi+nnbufi
ibufr = ibufr+nnbufr

! Probe out
@:probe_out()

end subroutine wind_deserialize

!----------------------------------------------------------------------
! Subroutine: wind_setup
!> Setup
!----------------------------------------------------------------------
subroutine wind_setup(wind,mpl,rng,nam,geom)

implicit none

! Passed variables
class(wind_type),intent(inout) :: wind !< Wind
type(mpl_type),intent(inout) :: mpl    !< MPI data
type(rng_type),intent(inout) :: rng    !< Random number generator
type(nam_type),intent(in) :: nam       !< Namelist
type(geom_type),intent(in) :: geom     !< Geometry

! Local variables
integer :: ilon,ilat,ic0a,illw,i_s,jc0u,ic0b,ic0u,ic0,jc0b,illa,iproc,nll,ill,jll,illb,jllb,isg
integer :: ilonp,ilonm,ilatp,ilatm
integer :: illw_lonp(nam%wind_nsg),illw_lonm(nam%wind_nsg),illw_latp(nam%wind_nsg),illw_latm(nam%wind_nsg)
integer,allocatable :: lonlat_to_proc(:,:),lonlat_to_llw(:,:),c0u_to_c0b(:),c0b_to_c0(:),lla_to_ll(:),ll_to_llb(:),llb_to_ll(:)
integer,allocatable :: lonlat_to_ll(:,:)
real(kind_real) :: sgnorm,dlat,dlon,ff,ldlat,ldlon,rlonm,rlonp,rlatm,rlatp,sum_psi,sum_chi,sum_u,sum_v,sum1,sum2
real(kind_real) :: psi(geom%nc0a,geom%nl0),psi_save(geom%nc0a,geom%nl0),chi(geom%nc0a,geom%nl0),chi_save(geom%nc0a,geom%nl0)
real(kind_real) :: u(geom%nc0a,geom%nl0),u_save(geom%nc0a,geom%nl0),v(geom%nc0a,geom%nl0),v_save(geom%nc0a,geom%nl0)
real(kind_real),allocatable :: lon1d(:),lat1d(:),lon_llw(:),lat_llw(:),dist(:),wgt(:)
logical :: gmask
logical,allocatable :: lcheck_lonlat(:,:),gmask_llw(:),lcheck_c0b(:),lcheck_llb(:)

! Set name
@:set_name(wind_setup)

! Probe in
@:probe_in()

if (nam%new_wind) then
   ! Define regular grid
   write(mpl%info,'(a7,a)') '','Define regular grid: '
   call mpl%flush(newl=.false.)

   ! Allocation
   nll = nam%wind_nlon*nam%wind_nlat
   allocate(lon1d(nam%wind_nlon))
   allocate(lat1d(nam%wind_nlat))
   allocate(lonlat_to_proc(nam%wind_nlon,nam%wind_nlat))
   allocate(lcheck_lonlat(nam%wind_nlon,nam%wind_nlat))

   ! Define regular grid
   dlon = two*pi/real(nam%wind_nlon,kind_real)
   do ilon=1,nam%wind_nlon
      lon1d(ilon) = -pi+half*dlon+real(ilon-1,kind_real)*dlon
   end do
   dlat = pi/real(nam%wind_nlat,kind_real)
   do ilat=1,nam%wind_nlat
      lat1d(ilat) = -half*pi+half*dlat+real(ilat-1,kind_real)*dlat
   end do

   ! Split among processors
   lcheck_lonlat = .false.
   call mpl%prog_init(nll)
   ill = 0
   do ilat=1,nam%wind_nlat
      do ilon=1,nam%wind_nlon
         call geom%index_from_lonlat(mpl,lon1d(ilon),lat1d(ilat),0,lonlat_to_proc(ilon,ilat),ic0a,gmask)
         if (lonlat_to_proc(ilon,ilat)==mpl%myproc) then
            ! Add this point and its neighbors
            lcheck_lonlat(ilon,ilat) = .true.

            do isg=1,nam%wind_nsg
               ! Longitude + isg
               ilonp = ilon+isg
               if (ilonp>nam%wind_nlon) ilonp = ilonp-nam%wind_nlon
               lcheck_lonlat(ilonp,ilat) = .true.

               ! Longitude - isg
               ilonm = ilon-isg
               if (ilonm<1) ilonm = ilonm+nam%wind_nlon
               lcheck_lonlat(ilonm,ilat) = .true.
            end do

            do isg=1,nam%wind_nsg
               ! Latitude + isg
               ilatp = ilat+isg
               if (ilatp<=nam%wind_nlat) lcheck_lonlat(ilon,ilatp) = .true.


               ! Latitude - isg
               ilatm = ilat-isg
               if (ilatm>0) lcheck_lonlat(ilon,ilatm) = .true.
            end do
         end if
         ill = ill+1
         call mpl%prog_print(ill)
      end do
   end do
   call mpl%prog_final

   ! Count points
   wind%nlla = count(lonlat_to_proc==mpl%myproc)
   wind%nllw = count(lcheck_lonlat)

   ! Allocation
   allocate(lonlat_to_llw(nam%wind_nlon,nam%wind_nlat))
   allocate(lon_llw(wind%nllw))
   allocate(lat_llw(wind%nllw))
   allocate(gmask_llw(wind%nllw))

   ! Regular grid on halo W
   lonlat_to_llw = mpl%msv%vali
   illw = 0
   do ilat=1,nam%wind_nlat
      do ilon=1,nam%wind_nlon
         if (lcheck_lonlat(ilon,ilat)) then
            illw = illw+1
            lonlat_to_llw(ilon,ilat) = illw
            lon_llw(illw) = lon1d(ilon)
            lat_llw(illw) = lat1d(ilat)
         end if
      end do
   end do
   gmask_llw = .true.

   ! Nearest neighbor interpolation from subset Sc0 to regular grid
   write(mpl%info,'(a7,a)') '','Nearest neighbor interpolation from subset Sc0 to regular grid'
   call mpl%flush
   call wind%interp_c0b_to_llw%interp(mpl,nam,0,geom%nc0u,geom%lon_c0u,geom%lat_c0u,geom%gmask_hor_c0u,geom%tree_c0u, &
 & wind%nllw,lon_llw,lat_llw,gmask_llw,geom%mesh_c0u,7)
   wind%interp_c0b_to_llw%prefix = 'interp_c0b_to_llw'

   ! Define halo B, compute conversions and communications for subset Sc0
   write(mpl%info,'(a7,a)') '','Define halo B, compute conversions and communications for subset Sc0'
   call mpl%flush

   ! Allocation
   allocate(lcheck_c0b(geom%nc0u))

   ! Define halo B for subset Sc0
   lcheck_c0b = .false.
   do ic0a=1,geom%nc0a
      ic0u = geom%c0a_to_c0u(ic0a)
      lcheck_c0b(ic0u) = .true.
   end do
   do i_s=1,wind%interp_c0b_to_llw%n_s
      jc0u = wind%interp_c0b_to_llw%col(i_s)
      lcheck_c0b(jc0u) = .true.
   end do

   ! Allocation
   wind%nc0b = zss_count(lcheck_c0b)
   allocate(c0u_to_c0b(geom%nc0u))
   allocate(c0b_to_c0(wind%nc0b))

   ! Conversions
   c0u_to_c0b = mpl%msv%vali
   ic0b = 0
   do ic0u=1,geom%nc0u
      if (lcheck_c0b(ic0u)) then
         ic0b = ic0b+1
         c0u_to_c0b(ic0u) = ic0b
         ic0 = geom%c0u_to_c0(ic0u)
         c0b_to_c0(ic0b) = ic0
      end if
   end do

   ! Local interpolation source
   wind%interp_c0b_to_llw%n_src = wind%nc0b
   do i_s=1,wind%interp_c0b_to_llw%n_s
      jc0u = wind%interp_c0b_to_llw%col(i_s)
      jc0b = c0u_to_c0b(jc0u)
      if (mpl%msv%isnot(jc0b)) then
         wind%interp_c0b_to_llw%col(i_s) = jc0b
      else
         call mpl%abort('${subr}$','wrong local source for inter_c0b_to_rg')
      end if
   end do

   ! Setup communications
   call wind%com_c0_AB%setup(mpl,'com_c0_AB',geom%nc0a,wind%nc0b,geom%nc0,geom%c0a_to_c0,c0b_to_c0)

   ! Release memory
   deallocate(lon_llw)
   deallocate(lat_llw)
   deallocate(lcheck_lonlat)
   deallocate(gmask_llw)
   deallocate(lcheck_c0b)
   deallocate(c0u_to_c0b)
   deallocate(c0b_to_c0)

   ! Conversion from psi/chi to u/v on regular grid, halo A
   write(mpl%info,'(a7,a)') '','Conversion from psi/chi to u/v on regular grid, halo A'
   call mpl%flush

   ! Allocation
   wind%transform%prefix = 'transform'
   wind%transform%n_src = 2*wind%nllw
   wind%transform%n_dst = 2*wind%nlla
   wind%transform%n_s = 8*nam%wind_nsg*wind%nlla
   call wind%transform%alloc

   ! Compute derivatives using Savitzky-Golay filters
   sgnorm = one/real((2*nam%wind_nsg+1)*((2*nam%wind_nsg+1)**2-1)/12,kind_real)
   illa = 0
   i_s = 0
   do ilat=1,nam%wind_nlat
      do ilon=1,nam%wind_nlon
         iproc = lonlat_to_proc(ilon,ilat)
         if (iproc==mpl%myproc) then
            ! Update indices
            illa = illa+1
            illw = lonlat_to_llw(ilon,ilat)

            do isg=1,nam%wind_nsg
               ! Longitude + isg
               ilonp = ilon+isg
               if (ilonp>nam%wind_nlon) ilonp = ilonp-nam%wind_nlon
               illw_lonp(isg) = lonlat_to_llw(ilonp,ilat)

               ! Longitude - isg
               ilonm = ilon-isg
               if (ilonm<1) ilonm = ilonm+nam%wind_nlon
               illw_lonm(isg) = lonlat_to_llw(ilonm,ilat)
            end do

            do isg=1,nam%wind_nsg
               ! Latitude + isg
               ilatp = min(ilat+isg,nam%wind_nlat)
               illw_latp(isg) = lonlat_to_llw(ilon,ilatp)

               ! Latitude - isg
               ilatm = max(ilat-isg,1)
               illw_latm(isg) = lonlat_to_llw(ilon,ilatm)
            end do

            ! Local factors
            ldlon = one/(req*dlon*cos(lat1d(ilat)))
            ldlat = one/(req*dlat)

            do isg=1,nam%wind_nsg
               ! Filter factor
               ff = real(isg,kind_real)*sgnorm

               ! psi to u
               i_s = i_s+1
               wind%transform%col(i_s) = illw_latp(isg)
               wind%transform%row(i_s) = illa
               wind%transform%S(i_s) = -ff*ldlat
               i_s = i_s+1
               wind%transform%col(i_s) = illw_latm(isg)
               wind%transform%row(i_s) = illa
               wind%transform%S(i_s) = ff*ldlat

               ! chi to u
               i_s = i_s+1
               wind%transform%col(i_s) = wind%nllw+illw_lonp(isg)
               wind%transform%row(i_s) = illa
               wind%transform%S(i_s) = ff*ldlon
               i_s = i_s+1
               wind%transform%col(i_s) = wind%nllw+illw_lonm(isg)
               wind%transform%row(i_s) = illa
               wind%transform%S(i_s) = -ff*ldlon

               ! psi to v
               i_s = i_s+1
               wind%transform%col(i_s) = illw_lonp(isg)
               wind%transform%row(i_s) = wind%nlla+illa
               wind%transform%S(i_s) = ff*ldlon
               i_s = i_s+1
               wind%transform%col(i_s) = illw_lonm(isg)
               wind%transform%row(i_s) = wind%nlla+illa
               wind%transform%S(i_s) = -ff*ldlon

               ! chi to v
               i_s = i_s+1
               wind%transform%col(i_s) = wind%nllw+illw_latp(isg)
               wind%transform%row(i_s) = wind%nlla+illa
               wind%transform%S(i_s) = ff*ldlat
               i_s = i_s+1
               wind%transform%col(i_s) = wind%nllw+illw_latm(isg)
               wind%transform%row(i_s) = wind%nlla+illa
               wind%transform%S(i_s) = -ff*ldlat
            end do
         end if
      end do
   end do

   ! Apply inflation
   wind%transform%S = nam%wind_inflation*wind%transform%S

   ! Count interpolation operations
   wind%interp_llb_to_c0a%n_s = 0
   do ic0a=1,geom%nc0a
      ! Get regular grid inferior indices
      ilatm = floor((geom%lat_c0a(ic0a)-half*dlat+half*pi)/dlat)+1

      if ((ilatm>0).and.(ilatm<nam%wind_nlat)) then
         ! Define bilinear interpolation weights
         wind%interp_llb_to_c0a%n_s = wind%interp_llb_to_c0a%n_s+4
      else
         ! Poles
         wind%interp_llb_to_c0a%n_s = wind%interp_llb_to_c0a%n_s+nam%wind_nlon
      end if
   end do

   ! Allocation
   allocate(lla_to_ll(wind%nlla))
   allocate(lonlat_to_ll(nam%wind_nlon,nam%wind_nlat))
   allocate(dist(nam%wind_nlon))
   allocate(wgt(nam%wind_nlon))

   ! Conversion
   ill = 0
   illa = 0
   do ilat=1,nam%wind_nlat
      do ilon=1,nam%wind_nlon
         ill = ill+1
         lonlat_to_ll(ilon,ilat) = ill
         iproc = lonlat_to_proc(ilon,ilat)
         if (iproc==mpl%myproc) then
            illa = illa+1
            lla_to_ll(illa) = ill
         end if
      end do
   end do

   ! Interpolation from regular grid to subset Sc0
   write(mpl%info,'(a7,a)') '','Interpolation from regular grid to subset Sc0'
   call mpl%flush
   wind%interp_llb_to_c0a%prefix = 'interp_llb_to_c0a'
   wind%interp_llb_to_c0a%n_dst = geom%nc0a
   call wind%interp_llb_to_c0a%alloc
   i_s = 0
   do ic0a=1,geom%nc0a
      ! Get regular grid inferior indices
      ilonm = floor((geom%lon_c0a(ic0a)-half*dlon+pi)/dlon)+1
      ilatm = floor((geom%lat_c0a(ic0a)-half*dlat+half*pi)/dlat)+1

      if ((ilatm>0).and.(ilatm<nam%wind_nlat)) then
         ! Define bilinear interpolation weights

         ! Longitude direction
         ilonp = ilonm+1
         if (ilonm==0) then
            ilonm = nam%wind_nlon
            rlonm = (lon1d(1)-geom%lon_c0a(ic0a))/dlon
            rlonp = (geom%lon_c0a(ic0a)-lon1d(nam%wind_nlon)+two*pi)/dlon
         elseif (ilonp==nam%wind_nlon+1) then
            ilonp = 1
            rlonm = (lon1d(1)-geom%lon_c0a(ic0a)+two*pi)/dlon
            rlonp = (geom%lon_c0a(ic0a)-lon1d(nam%wind_nlon))/dlon
         else
            rlonm = (lon1d(ilonp)-geom%lon_c0a(ic0a))/dlon
            rlonp = (geom%lon_c0a(ic0a)-lon1d(ilonm))/dlon
         end if

         ! Latitude direction
         ilatp = ilatm+1
         rlatm = (lat1d(ilatp)-geom%lat_c0a(ic0a))/dlat
         rlatp = (geom%lat_c0a(ic0a)-lat1d(ilatm))/dlat

         ! Copy weights
         i_s = i_s+1
         wind%interp_llb_to_c0a%row(i_s) = ic0a
         wind%interp_llb_to_c0a%col(i_s) = lonlat_to_ll(ilonm,ilatm)
         wind%interp_llb_to_c0a%S(i_s) = rlonm*rlatm
         i_s = i_s+1
         wind%interp_llb_to_c0a%row(i_s) = ic0a
         wind%interp_llb_to_c0a%col(i_s) = lonlat_to_ll(ilonp,ilatm)
         wind%interp_llb_to_c0a%S(i_s) = rlonp*rlatm
         i_s = i_s+1
         wind%interp_llb_to_c0a%row(i_s) = ic0a
         wind%interp_llb_to_c0a%col(i_s) = lonlat_to_ll(ilonm,ilatp)
         wind%interp_llb_to_c0a%S(i_s) = rlonm*rlatp
         i_s = i_s+1
         wind%interp_llb_to_c0a%row(i_s) = ic0a
         wind%interp_llb_to_c0a%col(i_s) = lonlat_to_ll(ilonp,ilatp)
         wind%interp_llb_to_c0a%S(i_s) = rlonp*rlatp
      else
         ! Poles
         
         ! Latitude indices
         if (ilatm==0) ilat = 1
         if (ilatm==nam%wind_nlat) ilat = nam%wind_nlat

         ! Get distances
         do ilon=1,nam%wind_nlon
            call sphere_dist(geom%lon_c0a(ic0a),geom%lat_c0a(ic0a),lon1d(ilon),lat1d(ilat),dist(ilon))
         end do
     
         ! Check for colocated point
         wgt = zero
         do ilon=1,nam%wind_nlon
            if (.not.(dist(ilon)>zero)) wgt(ilon) = one
         end do

         ! Get averaged weight if not colocated
         if (.not.any(wgt>zero)) then
            do ilon=1,nam%wind_nlon
               wgt(ilon) = one/dist(ilon)
            end do
            wgt = wgt/sum(wgt)
         end if

         ! Fill interpolation 
         do ilon=1,nam%wind_nlon
            i_s = i_s+1
            wind%interp_llb_to_c0a%row(i_s) = ic0a
            wind%interp_llb_to_c0a%col(i_s) = lonlat_to_ll(ilon,ilat)
            wind%interp_llb_to_c0a%S(i_s) = wgt(ilon)
         end do
      end if
   end do

   ! Define halo B, compute conversions and communications for regular grid
   write(mpl%info,'(a7,a)') '','Define halo B, compute conversions and communications for regular grid'
   call mpl%flush

   ! Allocation
   allocate(lcheck_llb(nll))

   ! Define halo B for regular grid
   lcheck_llb = .false.
   ill = 0
   do ilat=1,nam%wind_nlat
      do ilon=1,nam%wind_nlon
         ill = ill+1
         iproc = lonlat_to_proc(ilon,ilat)
         if (iproc==mpl%myproc) lcheck_llb(ill) = .true.
      end do
   end do
   do i_s=1,wind%interp_llb_to_c0a%n_s
      jll = wind%interp_llb_to_c0a%col(i_s)
      lcheck_llb(jll) = .true.
   end do

   ! Allocation
   wind%nllb = zss_count(lcheck_llb)
   allocate(ll_to_llb(nll))
   allocate(llb_to_ll(wind%nllb))

   ! Conversions
   illb = 0
   do ill=1,nll
      if (lcheck_llb(ill)) then
         illb = illb+1
         ll_to_llb(ill) = illb
         llb_to_ll(illb) = ill
      end if
   end do

   ! Local interpolation source
   wind%interp_llb_to_c0a%n_src = wind%nllb
   do i_s=1,wind%interp_llb_to_c0a%n_s
      jll = wind%interp_llb_to_c0a%col(i_s)
      jllb = ll_to_llb(jll)
      if (mpl%msv%isnot(jllb)) then
         wind%interp_llb_to_c0a%col(i_s) = jllb
      else
         call mpl%abort('${subr}$','wrong local source for inter_llb_to_rg')
      end if
   end do

   ! Setup communications
   call wind%com_ll_AB%setup(mpl,'com_ll_AB',wind%nlla,wind%nllb,nll,lla_to_ll,llb_to_ll)

   ! Release memory
   deallocate(lonlat_to_proc)
   deallocate(lla_to_ll)
   deallocate(lonlat_to_ll)
   deallocate(wgt)
   deallocate(lcheck_llb)
   deallocate(ll_to_llb)
   deallocate(llb_to_ll)
elseif (nam%load_wind_local) then
   ! Read local wind
   call wind%read_local(mpl,nam)
end if

! Test adjoint
if (nam%check_adjoints) then
   ! Initialization
   call rng%rand(zero,one,psi_save)
   call rng%rand(zero,one,chi_save)
   call rng%rand(zero,one,u_save)
   call rng%rand(zero,one,v_save)

   ! Adjoint test
   call wind%psichi_to_uv(mpl,geom,psi_save,chi_save,u,v)
   call wind%psichi_to_uv_ad(mpl,geom,u_save,v_save,psi,chi)

   ! Print result
   call mpl%dot_prod(psi,psi_save,sum_psi)
   call mpl%dot_prod(chi,chi_save,sum_chi)
   call mpl%dot_prod(u,u_save,sum_u)
   call mpl%dot_prod(v,v_save,sum_v)
   sum1 = sum_psi+sum_chi
   sum2 = sum_u+sum_v
   write(mpl%test,'(a7,a,e15.8,a,e15.8,a,e15.8)') '','Adjoint test: ',sum1,' / ',sum2,' / ',two*abs(sum1-sum2)/abs(sum1+sum2)
   call mpl%flush
end if

! Write local wind
if (nam%write_wind_local) call wind%write_local(mpl,nam)

! Probe out
@:probe_out()

end subroutine wind_setup

!----------------------------------------------------------------------
! Subroutine: wind_psichi_to_uv
!> Psi/chi to u/v
!----------------------------------------------------------------------
subroutine wind_psichi_to_uv(wind,mpl,geom,psi,chi,u,v)

implicit none

! Passed variables
class(wind_type),intent(in) :: wind                   !< Wind
type(mpl_type),intent(inout) :: mpl                   !< MPI data
type(geom_type),intent(in) :: geom                    !< Geometry
real(kind_real),intent(in) :: psi(geom%nc0a,geom%nl0) !< Stream function
real(kind_real),intent(in) :: chi(geom%nc0a,geom%nl0) !< Velocity potential
real(kind_real),intent(out) :: u(geom%nc0a,geom%nl0)  !< Zonal wind
real(kind_real),intent(out) :: v(geom%nc0a,geom%nl0)  !< Merdional wind

! Local variables
integer :: il0
real(kind_real) :: psi_c0b(wind%nc0b,geom%nl0),chi_c0b(wind%nc0b,geom%nl0)
real(kind_real) :: psi_llw(wind%nllw,geom%nl0),chi_llw(wind%nllw,geom%nl0),psichi_llw(2*wind%nllw)
real(kind_real) :: u_lla(wind%nlla,geom%nl0),v_lla(wind%nlla,geom%nl0),uv_lla(2*wind%nlla)
real(kind_real) :: u_llb(wind%nllb,geom%nl0),v_llb(wind%nllb,geom%nl0)

! Set name
@:set_name(wind_psichi_to_uv)

! Probe in
@:probe_in()

! Halo extension
call wind%com_c0_AB%ext(mpl,psi,psi_c0b)
call wind%com_c0_AB%ext(mpl,chi,chi_c0b)

! Interpolation
do il0=1,geom%nl0
   call wind%interp_c0b_to_llw%apply(mpl,psi_c0b(:,il0),psi_llw(:,il0))
   call wind%interp_c0b_to_llw%apply(mpl,chi_c0b(:,il0),chi_llw(:,il0))
end do

! psi/chi to u/v transform
do il0=1,geom%nl0
   ! Concatenate psi/chi
   psichi_llw(1:wind%nllw) = psi_llw(:,il0)
   psichi_llw(wind%nllw+1:2*wind%nllw) = chi_llw(:,il0)

   ! Apply transform
   call wind%transform%apply(mpl,psichi_llw,uv_lla)

   ! Deconcatenate u/v
   u_lla(:,il0) = uv_lla(1:wind%nlla)
   v_lla(:,il0) = uv_lla(wind%nlla+1:2*wind%nlla)
end do

! Halo extension
call wind%com_ll_AB%ext(mpl,u_lla,u_llb)
call wind%com_ll_AB%ext(mpl,v_lla,v_llb)

! Interpolation
do il0=1,geom%nl0
   call wind%interp_llb_to_c0a%apply(mpl,u_llb(:,il0),u(:,il0))
   call wind%interp_llb_to_c0a%apply(mpl,v_llb(:,il0),v(:,il0))
end do

! Probe out
@:probe_out()

end subroutine wind_psichi_to_uv

!----------------------------------------------------------------------
! Subroutine: wind_psichi_to_uv_ad
!> Psi/chi to u/v adjoint
!----------------------------------------------------------------------
subroutine wind_psichi_to_uv_ad(wind,mpl,geom,u,v,psi,chi)

implicit none

! Passed variables
class(wind_type),intent(in) :: wind                      !< Wind
type(mpl_type),intent(inout) :: mpl                      !< MPI data
type(geom_type),intent(in) :: geom                       !< Geometry
real(kind_real),intent(in) :: u(geom%nc0a,geom%nl0)      !< Zonal wind
real(kind_real),intent(in) :: v(geom%nc0a,geom%nl0)      !< Merdional wind
real(kind_real),intent(inout) :: psi(geom%nc0a,geom%nl0) !< Stream function
real(kind_real),intent(inout) :: chi(geom%nc0a,geom%nl0) !< Velocity potential

! Local variables
integer :: il0
real(kind_real) :: psi_c0b(wind%nc0b,geom%nl0),chi_c0b(wind%nc0b,geom%nl0)
real(kind_real) :: psi_llw(wind%nllw,geom%nl0),chi_llw(wind%nllw,geom%nl0),psichi_llw(2*wind%nllw)
real(kind_real) :: u_lla(wind%nlla,geom%nl0),v_lla(wind%nlla,geom%nl0),uv_lla(2*wind%nlla)
real(kind_real) :: u_llb(wind%nllb,geom%nl0),v_llb(wind%nllb,geom%nl0)

! Set name
@:set_name(wind_psichi_to_uv_ad)

! Probe in
@:probe_in()

! Interpolation
do il0=1,geom%nl0
   call wind%interp_llb_to_c0a%apply_ad(mpl,u(:,il0),u_llb(:,il0))
   call wind%interp_llb_to_c0a%apply_ad(mpl,v(:,il0),v_llb(:,il0))
end do

! Communication
call wind%com_ll_AB%red(mpl,u_llb,u_lla)
call wind%com_ll_AB%red(mpl,v_llb,v_lla)

! psi/chi to u/v transform
do il0=1,geom%nl0
   ! Concatenate u/v
   uv_lla(1:wind%nlla) = u_lla(:,il0)
   uv_lla(wind%nlla+1:2*wind%nlla) = v_lla(:,il0)

   ! Apply transform
   call wind%transform%apply_ad(mpl,uv_lla,psichi_llw)

   ! Deconcatenate psi/chi
   psi_llw(:,il0) = psichi_llw(1:wind%nllw)
   chi_llw(:,il0) = psichi_llw(wind%nllw+1:2*wind%nllw)
end do

! Interpolation
do il0=1,geom%nl0
   call wind%interp_c0b_to_llw%apply_ad(mpl,psi_llw(:,il0),psi_c0b(:,il0))
   call wind%interp_c0b_to_llw%apply_ad(mpl,chi_llw(:,il0),chi_c0b(:,il0))
end do

! Communication
call wind%com_c0_AB%red(mpl,psi_c0b,psi)
call wind%com_c0_AB%red(mpl,chi_c0b,chi)

! Probe out
@:probe_out()

end subroutine wind_psichi_to_uv_ad

end module type_wind
