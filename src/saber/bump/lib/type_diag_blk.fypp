#:include 'instrumentation.fypp'
!----------------------------------------------------------------------
! Module: type_diag_blk
!> Diagnostic block derived type
! Author: Benjamin Menetrier
! Licensing: this code is distributed under the CeCILL-C license
! Copyright 2015-... UCAR, CERFACS, METEO-FRANCE and IRIT
!----------------------------------------------------------------------
module type_diag_blk

!$ use omp_lib
use tools_const, only: zero,tenth,half,one,four,ten,pi
use tools_fit, only: condmax,diag_iso,diag_tensor,tensor_d2h,tensor_d2r,tensor_check_cond,fast_fit
use tools_func, only: vert_interp_size,vert_interp_setup,vert_interp
use tools_kinds, only: kind_real,huge_real
use tools_netcdf, only: define_grp,put_att,define_var,put_var
use tools_repro, only: inf,supeq
use tools_wrfda
use type_avg_blk, only: avg_blk_type
use type_geom, only: geom_type
use type_minim, only: minim_type
use type_mpl, only: mpl_type
use type_nam, only: nam_type
@:use_probe()
use type_samp, only: samp_type

implicit none

! Diagnostic block derived type
type diag_blk_type
   integer :: ic2a                                      !< Local index
   character(len=1024) :: prefix                        !< Prefix

   real(kind_real),allocatable :: raw(:,:,:,:)          !< Raw diagnostic
   real(kind_real),allocatable :: valid(:,:,:,:)        !< Number of valid couples

   real(kind_real),allocatable :: vert_coord(:)         !< Generalized vertical coordinate
   real(kind_real),allocatable :: fit(:,:,:,:)          !< Fit
   real(kind_real),allocatable :: fit_detail(:,:,:,:,:) !< Multi-components fit detail

   integer,allocatable :: ncmp                          !< Number of components
   real(kind_real),allocatable :: a_l0(:,:)             !< Amplitude, profiles
   real(kind_real),allocatable :: rh_l0(:,:)            !< Horizontal support radius, profiles
   real(kind_real),allocatable :: D11_l0(:,:)           !< Horizontal direct tensor, coefficient 11, profiles
   real(kind_real),allocatable :: D22_l0(:,:)           !< Horizontal direct tensor, coefficient 22, profiles
   real(kind_real),allocatable :: D12_l0(:,:)           !< Horizontal direct tensor, coefficient 12 (normalized), profiles
   real(kind_real),allocatable :: rv_l0(:,:)            !< Vertical support radius, profiles
   real(kind_real),allocatable :: hyb_coef_raw(:)       !< Raw hybrid coefficient
   real(kind_real),allocatable :: hyb_coef(:)           !< Hybrid coefficient

   real(kind_real),allocatable :: a_c0a(:,:,:)          !< Amplitudes, subset Sc0, halo A
   real(kind_real),allocatable :: rh_c0a(:,:,:)         !< Horizontal support radius, subset Sc0, halo A
   real(kind_real),allocatable :: D11_c0a(:,:,:)        !< Horizontal direct tensor, component 11, subset Sc0, halo A
   real(kind_real),allocatable :: D22_c0a(:,:,:)        !< Horizontal direct tensor, component 22, subset Sc0, halo A
   real(kind_real),allocatable :: D12_c0a(:,:,:)        !< Horizontal direct tensor, component 12 (normalized), subset Sc0, halo A
   real(kind_real),allocatable :: rv_c0a(:,:,:)         !< Vertical support radius, subset Sc0, halo A
   real(kind_real),allocatable :: hyb_coef_c0a(:,:)     !< Hybrid coefficient, subset Sc0, halo A
contains
   procedure :: alloc => diag_blk_alloc
   procedure :: partial_dealloc => diag_blk_partial_dealloc
   procedure :: dealloc => diag_blk_dealloc
   procedure :: write => diag_blk_write
   procedure :: fitting => diag_blk_fitting
   procedure :: localization => diag_blk_localization
   procedure :: hybridization => diag_blk_hybridization
end type diag_blk_type

real(kind_real),parameter :: D12max = 0.9_kind_real !< Maximum (absolute) value of the D12 tensor coefficient

private
public :: diag_blk_type

contains

!----------------------------------------------------------------------
! Subroutine: diag_blk_alloc
!> Allocation
!----------------------------------------------------------------------
subroutine diag_blk_alloc(diag_blk,mpl,nam,geom,samp,ic2a,prefix)

implicit none

! Passed variables
class(diag_blk_type),intent(inout) :: diag_blk !< Diagnostic block
type(mpl_type),intent(inout) :: mpl            !< MPI data
type(nam_type),intent(in) :: nam               !< Namelist
type(geom_type),intent(in) :: geom             !< Geometry
type(samp_type),intent(in) :: samp             !< Sampling
integer,intent(in) :: ic2a                     !< Local index
character(len=*),intent(in) :: prefix          !< Block prefix

! Set name
@:set_name(diag_blk_alloc)

! Probe in
@:probe_in()

! Set attributes
diag_blk%ic2a = ic2a
diag_blk%prefix = prefix

! Number of components
diag_blk%ncmp = nam%fit_ncmp

! Allocation
if ((ic2a==0).or.nam%local_diag) then
   allocate(diag_blk%raw(nam%nc3,nam%nc4,nam%nl0r,geom%nl0))
   allocate(diag_blk%valid(nam%nc3,nam%nc4,nam%nl0r,geom%nl0))
   allocate(diag_blk%vert_coord(geom%nl0))
   allocate(diag_blk%fit(nam%nc3,nam%nc4,nam%nl0r,geom%nl0))
   allocate(diag_blk%hyb_coef_raw(geom%nl0))
   allocate(diag_blk%hyb_coef(geom%nl0))
end if

! Initialization
if ((ic2a==0).or.nam%local_diag) then
   diag_blk%raw = mpl%msv%valr
   diag_blk%valid = mpl%msv%valr
   diag_blk%fit = mpl%msv%valr
   diag_blk%hyb_coef_raw = mpl%msv%valr
   diag_blk%hyb_coef = mpl%msv%valr
end if

! Vertical coordinate and distance
if ((ic2a==0).or.nam%local_diag) then
   if (ic2a==0) then
      diag_blk%vert_coord = geom%vert_coordavg
   else
      diag_blk%vert_coord = samp%vert_coord_c2a(ic2a,:)
   end if
end if

! Probe out
@:probe_out()

end subroutine diag_blk_alloc

!----------------------------------------------------------------------
! Subroutine: diag_blk_partial_dealloc
!> Release memory (partial)
!----------------------------------------------------------------------
subroutine diag_blk_partial_dealloc(diag_blk)

implicit none

! Passed variables
class(diag_blk_type),intent(inout) :: diag_blk !< Diagnostic block

! Set name
@:set_name(diag_blk_partial_dealloc)

! Probe in
@:probe_in()

! Release memory
if (allocated(diag_blk%raw)) deallocate(diag_blk%raw)
if (allocated(diag_blk%valid)) deallocate(diag_blk%valid)
if (allocated(diag_blk%vert_coord)) deallocate(diag_blk%vert_coord)
if (allocated(diag_blk%fit)) deallocate(diag_blk%fit)
if (allocated(diag_blk%fit_detail)) deallocate(diag_blk%fit_detail)
if (allocated(diag_blk%rh_l0)) deallocate(diag_blk%rh_l0)
if (allocated(diag_blk%D11_l0)) deallocate(diag_blk%D11_l0)
if (allocated(diag_blk%D22_l0)) deallocate(diag_blk%D22_l0)
if (allocated(diag_blk%D12_l0)) deallocate(diag_blk%D12_l0)
if (allocated(diag_blk%rv_l0)) deallocate(diag_blk%rv_l0)
if (allocated(diag_blk%hyb_coef_raw)) deallocate(diag_blk%hyb_coef_raw)
if (allocated(diag_blk%hyb_coef)) deallocate(diag_blk%hyb_coef)

! Probe out
@:probe_out()

end subroutine diag_blk_partial_dealloc

!----------------------------------------------------------------------
! Subroutine: diag_blk_dealloc
!> Release memory
!----------------------------------------------------------------------
subroutine diag_blk_dealloc(diag_blk)

implicit none

! Passed variables
class(diag_blk_type),intent(inout) :: diag_blk !< Diagnostic block

! Set name
@:set_name(diag_blk_dealloc)

! Probe in
@:probe_in()

! Release memory
call diag_blk%partial_dealloc
if (allocated(diag_blk%rh_c0a)) deallocate(diag_blk%rh_c0a)
if (allocated(diag_blk%D11_c0a)) deallocate(diag_blk%D11_c0a)
if (allocated(diag_blk%D22_c0a)) deallocate(diag_blk%D22_c0a)
if (allocated(diag_blk%D12_c0a)) deallocate(diag_blk%D12_c0a)
if (allocated(diag_blk%rv_c0a)) deallocate(diag_blk%rv_c0a)
if (allocated(diag_blk%hyb_coef_c0a)) deallocate(diag_blk%hyb_coef_c0a)

! Probe out
@:probe_out()

end subroutine diag_blk_dealloc

!----------------------------------------------------------------------
! Subroutine: diag_blk_write
!> Write
!----------------------------------------------------------------------
subroutine diag_blk_write(diag_blk,mpl,nam,geom,ncid,nc3_id,nc4_id,nl0r_id,nl0_1_id,nl0_2_id,ncmp_id)

implicit none

! Passed variables
class(diag_blk_type),intent(inout) :: diag_blk !< Diagnostic block
type(mpl_type),intent(inout) :: mpl            !< MPI data
type(nam_type),intent(in) :: nam               !< Namelist
type(geom_type),intent(in) :: geom             !< Geometry
integer,intent(in) :: ncid                     !< NetCDF ID
integer,intent(in) :: nc3_id                   !< NetCDF ID
integer,intent(in) :: nc4_id                   !< NetCDF ID
integer,intent(in) :: nl0r_id                  !< NetCDF ID
integer,intent(in) :: nl0_1_id                 !< NetCDF ID
integer,intent(in) :: nl0_2_id                 !< NetCDF ID
integer,intent(in) :: ncmp_id                  !< NetCDF ID

! Local variables
integer :: grpid,raw_id,raw_hor_id,raw_zs_id,valid_id,l0rl0_to_l0_id
integer :: fit_id,fit_hor_id,fit_zs_id,fit_detail_id,fit_detail_hor_id,fit_detail_zs_id
integer :: a_l0_id,rh_l0_id,D11_l0_id,D22_l0_id,D12_l0_id,rv_l0_id,hyb_coef_raw_id,hyb_coef_id
integer :: il0,jl0r,jl0,jl0rz,icmp

! Set name
@:set_name(diag_blk_write)

! Probe in
@:probe_in()

! Associate
associate(ic2a=>diag_blk%ic2a)

! Define group
grpid = define_grp(mpl,ncid,diag_blk%prefix)

! Define variables
if (mpl%msv%isanynot(diag_blk%raw)) then
   raw_id = define_var(mpl,grpid,'raw','real',(/nc3_id,nc4_id,nl0r_id,nl0_1_id/))
   raw_hor_id = define_var(mpl,grpid,'raw_hor','real',(/nc3_id,nc4_id,nl0_1_id/))
   raw_zs_id = define_var(mpl,grpid,'raw_zs','real',(/nl0_2_id,nl0_1_id/))
   valid_id = define_var(mpl,grpid,'valid','real',(/nc3_id,nc4_id,nl0r_id,nl0_1_id/))
   l0rl0_to_l0_id = define_var(mpl,grpid,'l0rl0_to_l0','int',(/nl0r_id,nl0_1_id/))
end if
if (mpl%msv%isanynot(diag_blk%fit)) then
   fit_id = define_var(mpl,grpid,'fit','real',(/nc3_id,nc4_id,nl0r_id,nl0_1_id/))
   fit_hor_id = define_var(mpl,grpid,'fit_hor','real',(/nc3_id,nc4_id,nl0_1_id/))
   fit_zs_id = define_var(mpl,grpid,'fit_zs','real',(/nl0_2_id,nl0_1_id/))
   if (nam%write_hdiag_detail) then
      fit_detail_id = define_var(mpl,grpid,'fit_detail','real',(/nc3_id,nc4_id,nl0r_id,nl0_1_id,ncmp_id/))
      fit_detail_hor_id = define_var(mpl,grpid,'fit_detail_hor','real',(/nc3_id,nc4_id,nl0_1_id,ncmp_id/))
      fit_detail_zs_id = define_var(mpl,grpid,'fit_detail_zs','real',(/nl0_2_id,nl0_1_id,ncmp_id/))
   end if
   if (diag_blk%ncmp==1) then
      rh_l0_id = define_var(mpl,grpid,'rh_l0','real',(/nl0_1_id/))
      if (nam%nc4>1) then
         D11_l0_id = define_var(mpl,grpid,'D11_l0','real',(/nl0_1_id/))
         D22_l0_id = define_var(mpl,grpid,'D22_l0','real',(/nl0_1_id/))
         D12_l0_id = define_var(mpl,grpid,'D12_l0','real',(/nl0_1_id/))
      end if
      rv_l0_id = define_var(mpl,grpid,'rv_l0','real',(/nl0_1_id/))
   else
      a_l0_id = define_var(mpl,grpid,'a_l0','real',(/nl0_1_id,ncmp_id/))
      rh_l0_id = define_var(mpl,grpid,'rh_l0','real',(/nl0_1_id,ncmp_id/))
      if (nam%nc4>1) then
         D11_l0_id = define_var(mpl,grpid,'D11_l0','real',(/nl0_1_id,ncmp_id/))
         D22_l0_id = define_var(mpl,grpid,'D22_l0','real',(/nl0_1_id,ncmp_id/))
         D12_l0_id = define_var(mpl,grpid,'D12_l0','real',(/nl0_1_id,ncmp_id/))
      end if
      rv_l0_id = define_var(mpl,grpid,'rv_l0','real',(/nl0_1_id,ncmp_id/))
   end if
end if
if (mpl%msv%isanynot(diag_blk%hyb_coef_raw)) hyb_coef_raw_id = define_var(mpl,grpid,'hyb_coef_raw','real',(/nl0_1_id/))
if (mpl%msv%isanynot(diag_blk%hyb_coef)) hyb_coef_id = define_var(mpl,grpid,'hyb_coef','real',(/nl0_1_id/))

! Write variables
if (mpl%msv%isanynot(diag_blk%raw)) then
   call put_var(mpl,grpid,raw_id,diag_blk%raw)
   do il0=1,geom%nl0
      jl0rz = geom%il0rz(il0)
      call put_var(mpl,grpid,raw_hor_id,diag_blk%raw(:,:,jl0rz,il0),(/1,1,il0/))
   end do
   do il0=1,geom%nl0
      do jl0r=1,nam%nl0r
         jl0 = geom%l0rl0_to_l0(jl0r,il0)
         call put_var(mpl,grpid,raw_zs_id,diag_blk%raw(1,1,jl0r,il0),(/jl0,il0/))
      end do
   end do
   call put_var(mpl,grpid,valid_id,diag_blk%valid)
   call put_var(mpl,grpid,l0rl0_to_l0_id,geom%l0rl0_to_l0)
end if
if (mpl%msv%isanynot(diag_blk%fit)) then
   call put_var(mpl,grpid,fit_id,diag_blk%fit)
   do il0=1,geom%nl0
      jl0rz = geom%il0rz(il0)
      call put_var(mpl,grpid,fit_hor_id,diag_blk%fit(:,:,jl0rz,il0),(/1,1,il0/))
   end do
   do il0=1,geom%nl0
      do jl0r=1,nam%nl0r
         jl0 = geom%l0rl0_to_l0(jl0r,il0)
         call put_var(mpl,grpid,fit_zs_id,diag_blk%fit(1,1,jl0r,il0),(/jl0,il0/))
      end do
   end do
   if (nam%write_hdiag_detail) then
      call put_var(mpl,grpid,fit_detail_id,diag_blk%fit_detail)
      do icmp=1,diag_blk%ncmp
         do il0=1,geom%nl0
            jl0rz = geom%il0rz(il0)
            call put_var(mpl,grpid,fit_detail_hor_id,diag_blk%fit_detail(:,:,jl0rz,il0,icmp),(/1,1,il0,icmp/))
         end do
         do il0=1,geom%nl0
            do jl0r=1,nam%nl0r
               jl0 = geom%l0rl0_to_l0(jl0r,il0)
               call put_var(mpl,grpid,fit_detail_zs_id,diag_blk%fit_detail(1,1,jl0r,il0,icmp),(/jl0,il0,icmp/))
            end do
         end do
      end do
   end if
   if (diag_blk%ncmp==1) then
      call put_var(mpl,grpid,rh_l0_id,diag_blk%rh_l0(:,1))
      if (nam%nc4>1) then
         call put_var(mpl,grpid,D11_l0_id,diag_blk%D11_l0(:,1))
         call put_var(mpl,grpid,D22_l0_id,diag_blk%D22_l0(:,1))
         call put_var(mpl,grpid,D12_l0_id,diag_blk%D12_l0(:,1))
      end if
      call put_var(mpl,grpid,rv_l0_id,diag_blk%rv_l0(:,1))
   else
      call put_var(mpl,grpid,a_l0_id,diag_blk%a_l0)
      call put_var(mpl,grpid,rh_l0_id,diag_blk%rh_l0)
      if (nam%nc4>1) then
         call put_var(mpl,grpid,D11_l0_id,diag_blk%D11_l0)
         call put_var(mpl,grpid,D22_l0_id,diag_blk%D22_l0)
         call put_var(mpl,grpid,D12_l0_id,diag_blk%D12_l0)
      end if
      call put_var(mpl,grpid,rv_l0_id,diag_blk%rv_l0)
   end if
end if
if (mpl%msv%isanynot(diag_blk%hyb_coef_raw)) call put_var(mpl,grpid,hyb_coef_raw_id,diag_blk%hyb_coef_raw)
if (mpl%msv%isanynot(diag_blk%hyb_coef)) call put_var(mpl,grpid,hyb_coef_id,diag_blk%hyb_coef)

! End associate
end associate

! Probe out
@:probe_out()

end subroutine diag_blk_write

!----------------------------------------------------------------------
! Subroutine: diag_blk_fitting
!> Compute a fit of a raw function
!----------------------------------------------------------------------
subroutine diag_blk_fitting(diag_blk,mpl,nam,geom)

implicit none

! Passed variables
class(diag_blk_type),intent(inout) :: diag_blk !< Diagnostic block
type(mpl_type),intent(inout) :: mpl            !< MPI data
type(nam_type),intent(in) :: nam               !< Namelist
type(geom_type),intent(in) :: geom             !< Geometry

! Local variables
integer :: il0,jl0rz,jl0r,jl0,nl0r,il1,nl1,ilev2d,jc4,icmp,jcmp
integer,allocatable :: il0_interp(:),il1inf(:),il1sup(:)
real(kind_real) :: a,m2(geom%nl0),scaling,rh_span
real(kind_real),allocatable :: raw_hor(:,:),raw_ver(:),distv(:),rinf(:),rsup(:),rh_c4l1(:,:),fit_hor(:,:),fit_ver(:)
real(kind_real),allocatable :: rh_l1(:,:),D11_l1(:,:),D22_l1(:,:),D12_l1(:,:),rv_l1(:,:),a_l1(:,:)
logical :: valid
type(minim_type) :: minim

! Set name
@:set_name(diag_blk_fitting)

! Probe in
@:probe_in()

! Check for 2D variable
do il0=1,geom%nl0
   ! Get zero separation level
   jl0rz = geom%il0rz(il0)

   ! Get value at zero separation
   m2(il0) = diag_blk%raw(1,1,jl0rz,il0)
end do
if ((count(m2>zero)==1).and.(trim(nam%lev2d)=='first').and.(m2(1)>zero)) then
   ilev2d = 1
elseif ((count(m2>zero)==1).and.(trim(nam%lev2d)=='last').and.(m2(geom%nl0)>zero)) then
   ilev2d = geom%nl0
else
   ilev2d = mpl%msv%vali
end if

! Number of effective levels
if (mpl%msv%isnot(ilev2d)) then
   nl0r = 1
else
   nl0r = nam%nl0r
end if

! Count interpolation levels
if (mpl%msv%isnot(ilev2d)) then
   nl1 = 1
else
   call vert_interp_size(geom%nl0,nam%fit_dl0,nl1)
end if

! Allocation
allocate(il0_interp(nl1))
allocate(il1inf(geom%nl0))
allocate(il1sup(geom%nl0))
allocate(rinf(geom%nl0))
allocate(rsup(geom%nl0))

! Get interpolation levels and weights
if (mpl%msv%isnot(ilev2d)) then
   il0_interp(1) = ilev2d
else
   call vert_interp_setup(geom%nl0,nam%fit_dl0,nl1,il0_interp,il1inf,il1sup,rinf,rsup)
end if

! Allocation
allocate(minim%disth(nam%nc3))
allocate(minim%as(nam%nc4))
allocate(minim%distv(nl0r))

! Minimization parameters initialization
minim%nc3 = nam%nc3
minim%nc4 = nam%nc4
minim%nl0r = nl0r
minim%disth = geom%disth(1:nam%nc3)
minim%as = geom%as(1:nam%nc4)
minim%hooke_rho = half
minim%hooke_tol = 1.0e-4_kind_real
minim%hooke_itermax = 10

! Maximum horizontal span
rh_span = half*pi

! Allocation
allocate(rh_c4l1(nam%nc4,nl1))
allocate(rv_l1(nl1,0:diag_blk%ncmp))
allocate(a_l1(nl1,diag_blk%ncmp))
allocate(raw_hor(nam%nc3,nam%nc4))
allocate(raw_ver(nl0r))
allocate(distv(nl0r))
allocate(fit_hor(nam%nc3,nam%nc4))
allocate(fit_ver(nl0r))
allocate(rh_l1(nl1,0:diag_blk%ncmp))
if (nam%nc4>1) then
   allocate(D11_l1(nl1,0:diag_blk%ncmp))
   allocate(D22_l1(nl1,0:diag_blk%ncmp))
   allocate(D12_l1(nl1,0:diag_blk%ncmp))
end if

do il1=1,nl1
   ! Index
   il0 = il0_interp(il1)

   ! Get zero separation level and min/max levels
   jl0rz = geom%il0rz(il0)

   ! Global shape fit
   icmp = 0

   ! Horizontal fit for each angular sector
   do jc4=1,nam%nc4
      ! Fast horizontal fit
      call fast_fit(mpl,nam%nc3,1,geom%disth,'hor',diag_blk%raw(:,jc4,jl0rz,il0),rh_c4l1(jc4,il1))

      if (mpl%msv%isnot(rh_c4l1(jc4,il1))) then
         ! Optimized horizontal fit

         ! Allocation
         minim%nx = 1
         minim%ny = nam%nc3
         call minim%alloc

         ! Guess and bounds
         minim%guess(1) = rh_c4l1(jc4,il1)
         minim%binf(1) = zero
         minim%bsup(1) = ten*rh_c4l1(jc4,il1)

         ! Observations
         minim%obs(1:nam%nc3) = diag_blk%raw(:,jc4,jl0rz,il0)

         ! Compute fit
         minim%cost_function = 'rh'
         call minim%compute(mpl)

         ! Get parameter, apply bounds
         rh_c4l1(jc4,il1) = max(minim%binf(1),min(minim%x(1),minim%bsup(1)))

         ! Release memory
         call minim%partial_dealloc
      end if
   end do

   if (nam%nc4==1) then
      ! One angular sector only
      rh_l1(il1,icmp) = rh_c4l1(1,il1)
   else
      ! Horizontal tensor fit
      if (mpl%msv%isallnot(rh_c4l1(:,il1)).and.all(rh_c4l1(:,il1)>zero)) then
         ! Average value
         rh_l1(il1,icmp) = sqrt(sum(rh_c4l1(:,il1)**2)/real(nam%nc4,kind_real))

         ! Allocation
         minim%nx = 3
         minim%ny = nam%nc3*nam%nc4
         call minim%alloc

         ! Guess and bounds
         minim%guess = (/rh_l1(il1,icmp)**2,rh_l1(il1,icmp)**2,zero/)
         minim%binf = (/rh_l1(il1,icmp)**2/sqrt(condmax),rh_l1(il1,icmp)**2/sqrt(condmax),-D12max/)
         minim%bsup = (/rh_l1(il1,icmp)**2*sqrt(condmax),rh_l1(il1,icmp)**2*sqrt(condmax),D12max/)

         ! Observations
         minim%obs = reshape(diag_blk%raw(:,:,jl0rz,il0),(/minim%ny/))

         ! Compute fit
         minim%cost_function = 'tensor'
         call minim%compute(mpl)

         ! Get parameters, apply bounds
         D11_l1(il1,icmp) = max(minim%binf(1),min(minim%x(1),minim%bsup(1)))
         D22_l1(il1,icmp) = max(minim%binf(2),min(minim%x(2),minim%bsup(2)))
         D12_l1(il1,icmp) = max(minim%binf(3),min(minim%x(3),minim%bsup(3)))

         ! Check tensor conditioning
         call tensor_check_cond(D11_l1(il1,icmp),D22_l1(il1,icmp),D12_l1(il1,icmp),valid)
         if (.not.valid) then
            D11_l1(il1,icmp) = mpl%msv%valr
            D22_l1(il1,icmp) = mpl%msv%valr
            D12_l1(il1,icmp) = mpl%msv%valr
         end if

         ! Get corresponding length-scale
         call tensor_d2r(mpl,D11_l1(il1,icmp),D22_l1(il1,icmp),D12_l1(il1,icmp),rh_l1(il1,icmp))

         ! Release memory
         call minim%partial_dealloc
      else
         ! Missing values
         rh_l1(il1,icmp) = mpl%msv%valr
         D11_l1(il1,icmp) = mpl%msv%valr
         D22_l1(il1,icmp) = mpl%msv%valr
         D12_l1(il1,icmp) = mpl%msv%valr
      end if
   end if

   ! Check that horizontal length-scale is not too large
   if (supeq(rh_l1(il1,0),rh_span)) then
      rh_l1(il1,:) = mpl%msv%valr
      if (nam%nc4>1) then
         D11_l1(il1,:) = mpl%msv%valr
         D22_l1(il1,:) = mpl%msv%valr
         D12_l1(il1,:) = mpl%msv%valr
      end if      
   end if

   if (nl0r==1) then
      ! No vertical fit
      distv(1) = zero
      rv_l1(il1,icmp) = zero
   else
      ! Raw vertical function, averaged over angular sectors
      raw_ver = sum(diag_blk%raw(1,:,:,il0),dim=1)/real(nam%nc4,kind_real)

      ! Vertical distance
      do jl0r=1,nl0r
         jl0 = geom%l0rl0_to_l0(jl0r,il0)
         distv(jl0r) = abs(diag_blk%vert_coord(il0)-diag_blk%vert_coord(jl0))
      end do

      ! Fast vertical fit
      call fast_fit(mpl,nl0r,jl0rz,distv,'ver',raw_ver,rv_l1(il1,icmp))

      if (mpl%msv%isnot(rv_l1(il1,icmp))) then
         ! Optimized vertical fit

         ! Vertical distance
         minim%distv = distv

         ! Allocation
         minim%nx = 1
         minim%ny = nl0r
         call minim%alloc

         ! Guess and bounds
         minim%guess(1) = rv_l1(il1,icmp)
         minim%binf(1) = zero
         minim%bsup(1) = ten*rv_l1(il1,icmp)

         ! Observations
         minim%obs(1:nl0r) = raw_ver

         ! Compute fit
         minim%cost_function = 'rv'
         call minim%compute(mpl)

         ! Get parameter, apply bounds
         rv_l1(il1,icmp) = max(minim%binf(1),min(minim%x(1),minim%bsup(1)))

         ! Release memory
         call minim%partial_dealloc
      end if
   end if

   if (mpl%msv%isnot(rh_l1(il1,0)).and.mpl%msv%isnot(rv_l1(il1,0))) then
      ! Both horizontal and vertical fits succeed
      if (diag_blk%ncmp==1) then
         ! One component only, simple copy
         a_l1(il1,1) = one
         rh_l1(il1,1) = rh_l1(il1,0)
         if (nam%nc4>1) then
            D11_l1(il1,1) =D11_l1(il1,0)
            D22_l1(il1,1) = D22_l1(il1,0)
            D12_l1(il1,1) = D12_l1(il1,0)
         end if      
         rv_l1(il1,1) = rv_l1(il1,0)
      else
         ! Multiple component optimization

         ! Initialization
         scaling = one
         if (nam%nc4==1) then
            minim%rh = rh_l1(il1,0)
         else
            minim%D11 = D11_l1(il1,0)
            minim%D22 = D22_l1(il1,0)
            minim%D12 = D12_l1(il1,0)
         end if
         minim%rv = rv_l1(il1,0)

         do icmp=1,diag_blk%ncmp
            ! Amplitude, horizontal and vertical raw functions
            a = one
            raw_hor = diag_blk%raw(:,:,jl0rz,il0)
            raw_ver = sum(diag_blk%raw(1,:,1:nl0r,il0),dim=1)/real(nam%nc4,kind_real)

            ! Remove previous components from raw functions
            do jcmp=1,icmp-1
               a = a-a_l1(il1,jcmp)
               if (nam%nc4==1) then
                  call diag_iso(mpl,nam%nc3,geom%disth,'hor',rh_l1(il1,jcmp),fit_hor(:,1))
               else
                  call diag_tensor(mpl,nam%nc3,nam%nc4,geom%disth,geom%as,D11_l1(il1,jcmp),D22_l1(il1,jcmp),D12_l1(il1,jcmp), &
 & fit_hor)
               end if
               raw_hor = raw_hor-a_l1(il1,jcmp)*fit_hor
               call diag_iso(mpl,nl0r,distv,'ver',rv_l1(il1,jcmp),fit_ver)
               raw_ver = raw_ver-a_l1(il1,jcmp)*fit_ver
            end do

            if (inf(a,tenth)) then
               ! Amplitude is too small: unstable optimization
               a_l1(il1,icmp) = zero
               rh_l1(il1,icmp) = rh_l1(il1,icmp-1)
               if (nam%nc4>1) then
                  D11_l1(il1,icmp) = D11_l1(il1,icmp-1)
                  D22_l1(il1,icmp) = D22_l1(il1,icmp-1)
                  D12_l1(il1,icmp) = D12_l1(il1,icmp-1)
               end if      
               rv_l1(il1,icmp) = rv_l1(il1,icmp-1)

               ! Adjust amplitude of the previous component
               a_l1(il1,icmp-1) = a_l1(il1,icmp-1)+a
            else
               ! Allocation
               if (icmp<diag_blk%ncmp) then
                  minim%nx = 2
               else
                  minim%nx = 1
               end if
               minim%ny = nam%nc3*nam%nc4+nl0r
               call minim%alloc

               ! Guess and bounds
               if (icmp==1) then
                  minim%guess(1) = one
                  minim%binf(1) = tenth

                  ! Ensure that scaling cannot lead to very large length-scales
                  minim%bsup(1) = ten
                  if (rh_l1(il1,0)>zero) minim%bsup(1) = min(minim%bsup(1),rh_span/rh_l1(il1,0))
               else
                  minim%guess(1) = half*scaling
                  minim%binf(1) = tenth*scaling
                  minim%bsup(1) = scaling
               end if
               if (icmp<diag_blk%ncmp) then
                  minim%guess(2) = half*a
                  minim%binf(2) = zero
                  minim%bsup(2) = a
               else
                  minim%a = a
               end if

               ! Observations
               minim%obs(1:nam%nc3*nam%nc4) = reshape(raw_hor,(/nam%nc3*nam%nc4/))
               minim%obs(nam%nc3*nam%nc4+1:nam%nc3*nam%nc4+nl0r) = raw_ver

               ! Compute fit
               minim%cost_function = 'component'
               call minim%compute(mpl)

               ! Get parameters, apply bounds
               scaling = max(minim%binf(1),min(minim%x(1),minim%bsup(1)))
               if (icmp<diag_blk%ncmp) then
                  a_l1(il1,icmp) = max(minim%binf(2),min(minim%x(2),minim%bsup(2)))
               else
                  a_l1(il1,icmp) = minim%a
               end if

               ! Scale length-scales/tensor
               rh_l1(il1,icmp) = rh_l1(il1,0)*scaling
               if (nam%nc4>1) then
                  D11_l1(il1,icmp) = D11_l1(il1,0)*sqrt(scaling)
                  D22_l1(il1,icmp) = D22_l1(il1,0)*sqrt(scaling)
                  D12_l1(il1,icmp) = D12_l1(il1,0)
               end if      
               rv_l1(il1,icmp) = rv_l1(il1,0)*scaling

               ! Release memory
               call minim%partial_dealloc
            end if
         end do
      end if

      ! Check that length-scale is not too large
      if (supeq(rh_l1(il1,1),rh_span)) then
         a_l1(il1,:) = mpl%msv%valr
         rh_l1(il1,:) = mpl%msv%valr
         if (nam%nc4>1) then
            D11_l1(il1,:) = mpl%msv%valr
            D22_l1(il1,:) = mpl%msv%valr
            D12_l1(il1,:) = mpl%msv%valr
         end if      
         rv_l1(il1,:) = mpl%msv%valr
      end if
   else
      ! Either horizontal fit or vertical fit failed
      a_l1(il1,:) = mpl%msv%valr
      rh_l1(il1,:) = mpl%msv%valr
      if (nam%nc4>1) then
         D11_l1(il1,:) = mpl%msv%valr
         D22_l1(il1,:) = mpl%msv%valr
         D12_l1(il1,:) = mpl%msv%valr
      end if      
      rv_l1(il1,:) = mpl%msv%valr
   end if
end do

! Allocation
allocate(diag_blk%a_l0(geom%nl0,diag_blk%ncmp))
allocate(diag_blk%rh_l0(geom%nl0,diag_blk%ncmp))
if (nam%nc4>1) then
   allocate(diag_blk%D11_l0(geom%nl0,diag_blk%ncmp))
   allocate(diag_blk%D22_l0(geom%nl0,diag_blk%ncmp))
   allocate(diag_blk%D12_l0(geom%nl0,diag_blk%ncmp))
end if
allocate(diag_blk%rv_l0(geom%nl0,diag_blk%ncmp))

! Initialization
diag_blk%a_l0 = mpl%msv%valr
diag_blk%rh_l0 = mpl%msv%valr
if (nam%nc4>1) then
   diag_blk%D11_l0 = mpl%msv%valr
   diag_blk%D22_l0 = mpl%msv%valr
   diag_blk%D12_l0 = mpl%msv%valr
end if
diag_blk%rv_l0 = mpl%msv%valr
if (mpl%msv%isnot(ilev2d)) diag_blk%rv_l0(ilev2d,:) = zero

! Interpolate parameters
do icmp=1,diag_blk%ncmp
   if (mpl%msv%isnot(ilev2d)) then
      ! No vertical interpolation for 2D variables
      diag_blk%a_l0(ilev2d,icmp) = a_l1(1,icmp)
      if (nam%nc4==1) then
         diag_blk%rh_l0(ilev2d,icmp) = rh_l1(1,icmp)
      else
         diag_blk%D11_l0(ilev2d,icmp) = D11_l1(1,icmp)
         diag_blk%D22_l0(ilev2d,icmp) = D22_l1(1,icmp)
         diag_blk%D12_l0(ilev2d,icmp) = D12_l1(1,icmp)
         call tensor_d2r(mpl,diag_blk%D11_l0(ilev2d,icmp),diag_blk%D22_l0(ilev2d,icmp),diag_blk%D12_l0(ilev2d,icmp), &
 & diag_blk%rh_l0(ilev2d,icmp))
      end if
      diag_blk%rv_l0(ilev2d,icmp) = rv_l1(1,icmp)
   else
      ! Vertical interpolation
      call vert_interp(mpl,nl1,a_l1(:,icmp),geom%nl0,il1inf,il1sup,rinf,rsup,diag_blk%a_l0(:,icmp))
      if (nam%nc4==1) then
         call vert_interp(mpl,nl1,rh_l1(:,icmp),geom%nl0,il1inf,il1sup,rinf,rsup,diag_blk%rh_l0(:,icmp))
      else
         call vert_interp(mpl,nl1,D11_l1(:,icmp),geom%nl0,il1inf,il1sup,rinf,rsup,diag_blk%D11_l0(:,icmp))
         call vert_interp(mpl,nl1,D22_l1(:,icmp),geom%nl0,il1inf,il1sup,rinf,rsup,diag_blk%D22_l0(:,icmp))
         call vert_interp(mpl,nl1,D12_l1(:,icmp),geom%nl0,il1inf,il1sup,rinf,rsup,diag_blk%D12_l0(:,icmp))
         do il0=1,geom%nl0
            call tensor_d2r(mpl,diag_blk%D11_l0(il0,icmp),diag_blk%D22_l0(il0,icmp),diag_blk%D12_l0(il0,icmp), &
 & diag_blk%rh_l0(il0,icmp))
         end do
      end if
      call vert_interp(mpl,nl1,rv_l1(:,icmp),geom%nl0,il1inf,il1sup,rinf,rsup,diag_blk%rv_l0(:,icmp))
   end if
end do

! Release memory
deallocate(il0_interp)
deallocate(il1inf)
deallocate(il1sup)
deallocate(rinf)
deallocate(rsup)
deallocate(a_l1)
deallocate(rh_c4l1)
deallocate(rv_l1)
deallocate(rh_l1)
if (nam%nc4>1) then
   deallocate(D11_l1)
   deallocate(D22_l1)
   deallocate(D12_l1)
end if
deallocate(raw_hor)
deallocate(raw_ver)
deallocate(distv)
call minim%dealloc

! Probe out
@:probe_out()

end subroutine diag_blk_fitting

!----------------------------------------------------------------------
! Subroutine: diag_blk_localization
!> Diag_blk localization
!----------------------------------------------------------------------
subroutine diag_blk_localization(diag_blk,mpl,nam,geom,avg_blk)

implicit none

! Passed variables
class(diag_blk_type),intent(inout) :: diag_blk !< Diagnostic block (localization)
type(mpl_type),intent(inout) :: mpl            !< MPI data
type(nam_type),intent(in) :: nam               !< Namelist
type(geom_type),intent(in) :: geom             !< Geometry
type(avg_blk_type),intent(in) :: avg_blk       !< Averaged statistics block

! Local variables
integer :: il0,jl0r,jc3,jc4

! Set name
@:set_name(diag_blk_localization)

! Probe in
@:probe_in()

!$omp parallel do schedule(static) private(il0,jl0r,jc3,jc4) shared(geom,diag_blk,avg_blk)
do il0=1,geom%nl0
   do jl0r=1,nam%nl0r
      do jc4=1,nam%nc4
         do jc3=1,nam%nc3
            if (mpl%msv%isnot(avg_blk%m11asysq(jc3,jc4,jl0r,il0)).and.mpl%msv%isnot(avg_blk%m11sq(jc3,jc4,jl0r,il0))) then
               ! Compute localization
               diag_blk%raw(jc3,jc4,jl0r,il0) = avg_blk%m11asysq(jc3,jc4,jl0r,il0)/avg_blk%m11sq(jc3,jc4,jl0r,il0)
               diag_blk%valid(jc3,jc4,jl0r,il0) = avg_blk%nc1a(jc3,jc4,jl0r,il0)
            else
               ! Missing value
               diag_blk%raw(jc3,jc4,jl0r,il0) = mpl%msv%valr
               diag_blk%valid(jc3,jc4,jl0r,il0) = mpl%msv%valr
            end if
         end do
      end do
   end do
end do
!$omp end parallel do

! Hybrid weight
diag_blk%hyb_coef = mpl%msv%valr

! Probe out
@:probe_out()

end subroutine diag_blk_localization

!----------------------------------------------------------------------
! Subroutine: diag_blk_hybridization
!> Diag_blk hybridization
!----------------------------------------------------------------------
subroutine diag_blk_hybridization(diag_blk,mpl,nam,geom,avg1_blk,avg2_blk,loc1_blk)

implicit none

! Passed variables
class(diag_blk_type),intent(inout) :: diag_blk !< Diagnostic block (hybridization)
type(mpl_type),intent(inout) :: mpl            !< MPI data
type(nam_type),intent(in) :: nam               !< Namelist
type(geom_type),intent(in) :: geom(2)          !< Geometry
type(avg_blk_type),intent(in) :: avg1_blk      !< Averaged statistics block for ensemble 1
type(avg_blk_type),intent(in) :: avg2_blk      !< Averaged statistics block for ensemble 2
type(diag_blk_type),intent(inout) :: loc1_blk  !< Localization block for ensemble 1

! Local variables
integer :: il0,jl0r,jl0,jc3,jc4
real(kind_real) :: wgt,a,bc,d,e,f,num,num_1,num_2,den

! Set name
@:set_name(diag_blk_hybridization)

! Probe in
@:probe_in()

do il0=1,geom(2)%nl0
   ! Compute hybrid weights terms
   a = zero
   bc = zero
   d = zero
   e = zero
   f = zero
   do jl0r=1,nam%nl0r
      jl0 = geom(2)%l0rl0_to_l0(jl0r,il0)
      do jc4=1,nam%nc4
         do jc3=1,nam%nc3
            if (mpl%msv%isnot(loc1_blk%fit(jc3,jc4,jl0r,il0)).and.mpl%msv%isnot(avg1_blk%m11sq(jc3,jc4,jl0r,il0)) &
 & .and.mpl%msv%isnot(avg1_blk%m11(jc3,jc4,jl0r,il0)).and.mpl%msv%isnot(avg2_blk%m11(jc3,jc4,jl0r,il0)) &
 & .and.mpl%msv%isnot(avg2_blk%m11sq(jc3,jc4,jl0r,il0)).and.mpl%msv%isnot(avg1_blk%m11asysq(jc3,jc4,jl0r,il0))) then
               wgt = one ! TODO: test different kinds of weights
               a = a+wgt*loc1_blk%fit(jc3,jc4,jl0r,il0)**2*avg1_blk%m11sq(jc3,jc4,jl0r,il0)
               bc = bc+wgt*loc1_blk%fit(jc3,jc4,jl0r,il0)*avg1_blk%m11(jc3,jc4,jl0r,il0)*avg2_blk%m11(jc3,jc4,jl0r,il0)
               select case (nam%hybrid_source)
               case ('randomized static')
                  d = d+wgt*avg2_blk%m11(jc3,jc4,jl0r,il0)**2
               case ('lowres ensemble')
                  d = d+wgt*avg2_blk%m11sq(jc3,jc4,jl0r,il0)
               end select
               e = e+wgt*loc1_blk%fit(jc3,jc4,jl0r,il0)*avg1_blk%m11asysq(jc3,jc4,jl0r,il0)
               f = f+wgt*avg1_blk%m11(jc3,jc4,jl0r,il0)*avg2_blk%m11(jc3,jc4,jl0r,il0)
            end if
         end do
      end do
   end do

   ! Compute hybrid weights
   num_1 = e*d-bc*f
   num_2 = a*f-e*bc
   den = a*d-bc**2

   if (den>zero) then
      ! Raw hybrid weights
      loc1_blk%hyb_coef_raw(il0) = num_1/den
      diag_blk%hyb_coef_raw(il0) = num_2/den

      ! Normalization (to keep a correct variance)
      num = avg1_blk%m11(1,1,geom(2)%il0rz(il0),il0)
      den = loc1_blk%hyb_coef_raw(il0)*avg1_blk%m11(1,1,geom(2)%il0rz(il0),il0) &
 & +diag_blk%hyb_coef_raw(il0)*avg2_blk%m11(1,1,geom(2)%il0rz(il0),il0)
      if (den>zero) then
         ! Hybrid weights
         loc1_blk%hyb_coef(il0) = loc1_blk%hyb_coef_raw(il0)*num/den
         diag_blk%hyb_coef(il0) = diag_blk%hyb_coef_raw(il0)*num/den
      else
         ! Missing values
         loc1_blk%hyb_coef(il0) = mpl%msv%valr
         diag_blk%hyb_coef(il0) = mpl%msv%valr
      end if
   else
      ! Missing values
      loc1_blk%hyb_coef_raw(il0) = mpl%msv%valr
      diag_blk%hyb_coef_raw(il0) = mpl%msv%valr
      loc1_blk%hyb_coef(il0) = mpl%msv%valr
      diag_blk%hyb_coef(il0) = mpl%msv%valr
   end if
end do

! Probe out
@:probe_out()

end subroutine diag_blk_hybridization

end module type_diag_blk
