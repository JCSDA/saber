#:include '../instrumentation.fypp'
!----------------------------------------------------------------------
! Module: type_lct
!> LCT data derived type
! Author: Benjamin Menetrier
! Licensing: this code is distributed under the CeCILL-C license
! Copyright 2015-... UCAR, CERFACS, METEO-FRANCE and IRIT
!----------------------------------------------------------------------
module type_lct

use tools_const, only: rad2deg
use tools_kinds, only: kind_real
use tools_netcdf, only: create_file,define_grp,define_dim,define_var,close_file
use type_bpar, only: bpar_type
use type_geom, only: geom_type
use type_lct_blk, only: lct_blk_type
use type_mom, only: mom_type
use type_mpl, only: mpl_type
use type_nam, only: nam_type
@:use_probe()
use type_samp, only: samp_type

implicit none

! LCT data derived type
type lct_type
   type(lct_blk_type),allocatable :: blk(:) !< LCT blocks
   logical :: allocated                     !< Allocation flag
contains
   procedure :: alloc => lct_alloc
   procedure :: partial_dealloc => lct_partial_dealloc
   procedure :: dealloc => lct_dealloc
   procedure :: run_lct => lct_run_lct
   procedure :: compute => lct_compute
   procedure :: filter => lct_filter
   procedure :: interp => lct_interp
   procedure :: write => lct_write
   procedure :: write_cor => lct_write_cor
end type lct_type

private
public :: lct_type

contains

!----------------------------------------------------------------------
! Subroutine: lct_alloc
!> Allocation
!----------------------------------------------------------------------
subroutine lct_alloc(lct,nam,geom,bpar,samp)

implicit none

! Passed variables
class(lct_type),intent(inout) :: lct !< LCT
type(nam_type),intent(in) :: nam     !< Namelist
type(geom_type),intent(in) :: geom   !< Geometry
type(bpar_type),intent(in) :: bpar   !< Block parameters
type(samp_type),intent(in) :: samp   !< Sampling

! Local variables
integer :: ib

! Set name
@:set_name(lct_alloc)

! Probe in
@:probe_in()

! Allocation
allocate(lct%blk(bpar%nb))
do ib=1,bpar%nb
   if (bpar%diag_block(ib)) call lct%blk(ib)%alloc(nam,geom,bpar,samp,ib)
end do

! Update allocation flag
lct%allocated = .true.

! Probe out
@:probe_out()

end subroutine lct_alloc

!----------------------------------------------------------------------
! Subroutine: lct_partial_dealloc
!> Release memory (partial)
!----------------------------------------------------------------------
subroutine lct_partial_dealloc(lct)

implicit none

! Passed variables
class(lct_type),intent(inout) :: lct !< LCT

! Local variables
integer :: ib

! Set name
@:set_name(lct_partial_dealloc)

! Probe in
@:probe_in()

! Release memory
if (allocated(lct%blk)) then
   do ib=1,size(lct%blk)
      call lct%blk(ib)%partial_dealloc
   end do
end if

! Probe out
@:probe_out()

end subroutine lct_partial_dealloc

!----------------------------------------------------------------------
! Subroutine: lct_dealloc
!> Release memory
!----------------------------------------------------------------------
subroutine lct_dealloc(lct)

implicit none

! Passed variables
class(lct_type),intent(inout) :: lct !< LCT

! Local variables
integer :: ib

! Set name
@:set_name(lct_dealloc)

! Probe in
@:probe_in()

! Release memory
if (allocated(lct%blk)) then
   do ib=1,size(lct%blk)
      call lct%blk(ib)%dealloc
   end do
   deallocate(lct%blk)
end if

! Update allocation flag
lct%allocated = .false.

! Probe out
@:probe_out()

end subroutine lct_dealloc

!----------------------------------------------------------------------
! Subroutine: lct_run_lct
!> LCT driver
!----------------------------------------------------------------------
subroutine lct_run_lct(lct,mpl,nam,geom,bpar,samp,mom)

implicit none

! Passed variables
class(lct_type),intent(inout) :: lct !< LCT
type(mpl_type),intent(inout) :: mpl  !< MPI data
type(nam_type),intent(inout) :: nam  !< Namelist
type(geom_type),intent(in) :: geom   !< Geometry
type(bpar_type),intent(in) :: bpar   !< Block parameters
type(samp_type),intent(in) :: samp   !< Sampling
type(mom_type),intent(in) :: mom     !< Moments

! Set name
@:set_name(lct_run_lct)

! Probe in
@:probe_in()

! Compute LCT
write(mpl%info,'(a)') '-------------------------------------------------------------------'
call mpl%flush
write(mpl%info,'(a)') '--- Compute LCT'
call mpl%flush
call lct%compute(mpl,nam,geom,bpar,samp,mom)

! Filter LCT
write(mpl%info,'(a)') '-------------------------------------------------------------------'
call mpl%flush
write(mpl%info,'(a)') '--- Filter LCT'
call mpl%flush
call lct%filter(mpl,nam,geom,bpar,samp)

! Interpolate LCT
write(mpl%info,'(a)') '-------------------------------------------------------------------'
call mpl%flush
write(mpl%info,'(a)') '--- Interpolate LCT'
call mpl%flush
call lct%interp(mpl,nam,geom,bpar,samp)

if (nam%write_lct) then
   ! Write LCT
   write(mpl%info,'(a)') '-------------------------------------------------------------------'
   call mpl%flush
   write(mpl%info,'(a)') '--- Write LCT'
   call mpl%flush
   call lct%write(mpl,nam,geom,bpar)
end if

if (nam%lct_write_cor) then
   ! Write full correlations
   write(mpl%info,'(a)') '-------------------------------------------------------------------'
   call mpl%flush
   write(mpl%info,'(a)') '--- Write full correlations'
   call mpl%flush
   call lct%write_cor(mpl,nam,geom,bpar,samp)
end if

! Probe out
@:probe_out()

end subroutine lct_run_lct

!----------------------------------------------------------------------
! Subroutine: lct_compute
!> Compute LCT
!----------------------------------------------------------------------
subroutine lct_compute(lct,mpl,nam,geom,bpar,samp,mom)

implicit none

! Passed variables
class(lct_type),intent(inout) :: lct !< LCT
type(mpl_type),intent(inout) :: mpl  !< MPI data
type(nam_type),intent(in) :: nam     !< Namelist
type(geom_type),intent(in) :: geom   !< Geometry
type(bpar_type),intent(in) :: bpar   !< Block parameters
type(samp_type),intent(in) :: samp   !< Sampling
type(mom_type),intent(in) :: mom     !< Moments

! Local variables
integer :: ib

! Set name
@:set_name(lct_compute)

! Probe in
@:probe_in()

! Allocation
call lct%alloc(nam,geom,bpar,samp)

do ib=1,bpar%nb
   if (bpar%diag_block(ib)) then
      write(mpl%info,'(a7,a,a)') '','Block: ',trim(bpar%blockname(ib))
      call mpl%flush

      ! Compute
      write(mpl%info,'(a10,a)') '','Compute'
      call mpl%flush
      call lct%blk(ib)%compute(mpl,nam,geom,bpar,samp,mom%blk(ib))
   end if
end do

! Probe out
@:probe_out()

end subroutine lct_compute

!----------------------------------------------------------------------
! Subroutine: lct_filter
!> Filter LCT
!----------------------------------------------------------------------
subroutine lct_filter(lct,mpl,nam,geom,bpar,samp)

implicit none

! Passed variables
class(lct_type),intent(inout) :: lct !< LCT
type(mpl_type),intent(inout) :: mpl  !< MPI data
type(nam_type),intent(in) :: nam     !< Namelist
type(geom_type),intent(in) :: geom   !< Geometry
type(bpar_type),intent(in) :: bpar   !< Block parameters
type(samp_type),intent(in) :: samp   !< Sampling

! Local variables
integer :: ib

! Set name
@:set_name(lct_filter)

! Probe in
@:probe_in()

do ib=1,bpar%nb
   if (bpar%diag_block(ib)) then
      write(mpl%info,'(a7,a,a)') '','Block: ',trim(bpar%blockname(ib))
      call mpl%flush

      ! Filter
      call lct%blk(ib)%filter(mpl,nam,geom,bpar,samp)
   end if
end do

! Probe out
@:probe_out()

end subroutine lct_filter

!----------------------------------------------------------------------
! Subroutine: lct_interp
!> Interpolate LCT
!----------------------------------------------------------------------
subroutine lct_interp(lct,mpl,nam,geom,bpar,samp)

implicit none

! Passed variables
class(lct_type),intent(inout) :: lct !< LCT
type(mpl_type),intent(inout) :: mpl  !< MPI data
type(nam_type),intent(in) :: nam     !< Namelist
type(geom_type),intent(in) :: geom   !< Geometry
type(bpar_type),intent(in) :: bpar   !< Block parameters
type(samp_type),intent(in) :: samp   !< Sampling

! Local variables
integer :: ib

! Set name
@:set_name(lct_interp)

! Probe in
@:probe_in()

do ib=1,bpar%nb
   if (bpar%diag_block(ib)) then
      write(mpl%info,'(a7,a,a)') '','Block: ',trim(bpar%blockname(ib))
      call mpl%flush

      ! Interpolation
      call lct%blk(ib)%interp(mpl,nam,geom,bpar,samp)
   end if
end do

! Probe out
@:probe_out()

end subroutine lct_interp

!----------------------------------------------------------------------
! Subroutine: lct_write
!> Write LCT
!----------------------------------------------------------------------
subroutine lct_write(lct,mpl,nam,geom,bpar)

implicit none

! Passed variables
class(lct_type),intent(inout) :: lct !< LCT
type(mpl_type),intent(inout) :: mpl  !< MPI data
type(nam_type),intent(in) :: nam     !< Namelist
type(geom_type),intent(in) :: geom   !< Geometry
type(bpar_type),intent(in) :: bpar   !< Block parameters

! Local variables
integer :: ncid,nc0_id,nl0_id,lon_id,lat_id,vunit_id
integer :: ib

! Set name
@:set_name(lct_write)

! Probe in
@:probe_in()

! Create file
ncid = create_file(mpl,trim(nam%prefix)//'_lct')

! Define dimensions
nc0_id = define_dim(mpl,ncid,'nc0',geom%nc0)
nl0_id = define_dim(mpl,ncid,'nl0',geom%nl0)

! Define variables
lon_id = define_var(mpl,ncid,'lon','real',(/nc0_id/),unitname='degrees_east')
lat_id = define_var(mpl,ncid,'lat','real',(/nc0_id/),unitname='degrees_north')
vunit_id = define_var(mpl,ncid,'vunit','real',(/nc0_id,nl0_id/))
do ib=1,bpar%nb
   if (bpar%diag_block(ib)) then
      ! Copy global IDs
      lct%blk(ib)%ncid = ncid
      lct%blk(ib)%nc0_id = nc0_id
      lct%blk(ib)%nl0_id = nl0_id

      ! Write LCT (definition mode)
      call lct%blk(ib)%write_def(mpl,nam,bpar)
   end if
end do

! Write variables
call geom%io%fld_write(mpl,ncid,lon_id,geom%lon_c0a*rad2deg)
call geom%io%fld_write(mpl,ncid,lat_id,geom%lat_c0a*rad2deg)
call geom%io%fld_write(mpl,ncid,vunit_id,geom%vunit_c0a,geom%gmask_c0a)
do ib=1,bpar%nb
   ! Write LCT (data mode)
   if (bpar%diag_block(ib)) call lct%blk(ib)%write_data(mpl,geom)
end do

! Close file
call close_file(mpl,ncid)

! Probe out
@:probe_out()

end subroutine lct_write

!----------------------------------------------------------------------
! Subroutine: lct_write_cor
!> Write full correlation
!----------------------------------------------------------------------
subroutine lct_write_cor(lct,mpl,nam,geom,bpar,samp)

implicit none

! Passed variables
class(lct_type),intent(inout) :: lct !< LCT
type(mpl_type),intent(inout) :: mpl  !< MPI data
type(nam_type),intent(in) :: nam     !< Namelist
type(geom_type),intent(in) :: geom   !< Geometry
type(bpar_type),intent(in) :: bpar   !< Block parameters
type(samp_type),intent(in) :: samp   !< Sampling

! Local variables
integer :: ncid
integer :: ib

! Set name
@:set_name(lct_write_cor)

! Probe in
@:probe_in()

! Create file
ncid = create_file(mpl,trim(nam%prefix)//'_lct_cor',mpl%myproc)

do ib=1,bpar%nb
   if (bpar%diag_block(ib)) then
      ! Copy global ID
      lct%blk(ib)%ncid = ncid

      ! Write correlations (definition mode)
      call lct%blk(ib)%write_cor_def(mpl,nam,geom,bpar,samp)
   end if
end do

do ib=1,bpar%nb
   ! Write correlations (data mode)
   if (bpar%diag_block(ib)) call lct%blk(ib)%write_cor_data(mpl,nam,bpar,samp)
end do

! Close file
call close_file(mpl,ncid)

! Probe out
@:probe_out()

end subroutine lct_write_cor

end module type_lct
