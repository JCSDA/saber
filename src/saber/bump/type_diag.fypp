#:include '../instrumentation.fypp'
!----------------------------------------------------------------------
! Module: type_diag
!> Diagnostic derived type
! Author: Benjamin Menetrier
! Licensing: this code is distributed under the CeCILL-C license
! Copyright 2015-... UCAR, CERFACS, METEO-FRANCE and IRIT
!----------------------------------------------------------------------
module type_diag

use fckit_mpi_module, only: fckit_mpi_sum
use tools_const, only: zero,one,five,reqkm,rad2deg,pi
use tools_fit, only: ver_smooth
use tools_func, only: fit_diag_full
use tools_kinds, only: kind_real
use type_avg, only: avg_type
use type_bpar, only: bpar_type
use type_diag_blk, only: diag_blk_type
use type_geom, only: geom_type
use type_mpl, only: mpl_type
use type_nam, only: nam_type
@:use_probe()
use type_samp, only: samp_type

implicit none

real(kind_real),parameter :: bound = five !< Restriction bound applied on local diagnostics with respect to the global diagnostic

! Diagnostic derived type
type diag_type
   character(len=1024) :: prefix               !< Prefix
   integer :: nc2a                             !< Number of local points
   type(diag_blk_type),allocatable :: blk(:,:) !< Diagnostic blocks
contains
   procedure :: alloc => diag_alloc
   procedure :: dealloc => diag_dealloc
   procedure :: filter_fit => diag_filter_fit
   procedure :: build_fit => diag_build_fit
   procedure :: covariance => diag_covariance
   procedure :: correlation => diag_correlation
   procedure :: localization => diag_localization
   procedure :: hybridization => diag_hybridization
   procedure :: dualens => diag_dualens
end type diag_type

private
public :: diag_type

contains

!----------------------------------------------------------------------
! Subroutine: diag_alloc
!> Allocation
!----------------------------------------------------------------------
subroutine diag_alloc(diag,mpl,nam,geom,bpar,samp,prefix)

implicit none

! Passed variables
class(diag_type),intent(inout) :: diag !< Diagnostic
type(mpl_type),intent(inout) :: mpl    !< MPI data
type(nam_type),intent(in) :: nam       !< Namelist
type(geom_type),intent(in) :: geom     !< Geometry
type(bpar_type),intent(in) :: bpar     !< Block parameters
type(samp_type),intent(in) :: samp     !< Sampling
character(len=*),intent(in) :: prefix  !< Block prefix

! Local variables
integer :: ib,ic2a

! Set name
@:set_name(diag_alloc)

! Probe in
@:probe_in()

! Number of local points
if (nam%local_diag) then
   diag%nc2a = samp%nc2a
else
   diag%nc2a = 0
end if

! Prefix
diag%prefix = prefix

! Allocation
allocate(diag%blk(0:diag%nc2a,bpar%nbe))
do ib=1,bpar%nbe
   if (bpar%diag_block(ib)) then
      do ic2a=0,diag%nc2a
         call diag%blk(ic2a,ib)%alloc(mpl,nam,geom,bpar,samp,ic2a,ib,prefix)
      end do
   end if
end do

! Probe out
@:probe_out()

end subroutine diag_alloc

!----------------------------------------------------------------------
! Subroutine: diag_dealloc
!> Release memory
!----------------------------------------------------------------------
subroutine diag_dealloc(diag)

implicit none

! Passed variables
class(diag_type),intent(inout) :: diag !< Diagnostic

! Local variables
integer :: ib,ic2a

! Set name
@:set_name(diag_dealloc)

! Probe in
@:probe_in()

! Release memory
if (allocated(diag%blk)) then
   do ib=1,size(diag%blk,2)
     do ic2a=0,size(diag%blk,1)-1
       call diag%blk(ic2a,ib)%dealloc
     end do
   end do
   deallocate(diag%blk)
end if

! Probe out
@:probe_out()

end subroutine diag_dealloc

!----------------------------------------------------------------------
! Subroutine: diag_filter_fit
!> Filter fit diagnostics
!----------------------------------------------------------------------
subroutine diag_filter_fit(diag,mpl,nam,geom,bpar,samp)

implicit none

! Passed variables
class(diag_type),intent(inout) :: diag !< Diagnostic
type(mpl_type),intent(inout) :: mpl    !< MPI data
type(nam_type),intent(in) :: nam       !< Namelist
type(geom_type),intent(in) :: geom     !< Geometry
type(bpar_type),intent(in) :: bpar     !< Block parameters
type(samp_type),intent(in) :: samp     !< Sampling

! Local variables
integer :: ib,il0,ic2a,tmp(1)
real(kind_real) :: coef_ens_c2a(samp%nc2a,geom%nl0)
real(kind_real),allocatable :: rh_c2a(:,:),pkh_c2a(:,:),rv_c2a(:,:),pkv_c2a(:,:),zerodist_c2a(:,:),mindist_c2a(:,:),minval_c2a(:,:)

! Set name
@:set_name(diag_filter_fit)

! Probe in
@:probe_in()

if (nam%local_diag) then
   ! Horizontal filtering
   write(mpl%info,'(a7,a)') '','Horizontal filtering'
   call mpl%flush

   do ib=1,bpar%nbe
      if (bpar%diag_block(ib)) then
         ! Allocation
         if (bpar%fit_block(ib)) then
            allocate(rh_c2a(samp%nc2a,geom%nl0))
            allocate(pkh_c2a(samp%nc2a,geom%nl0))
            allocate(rv_c2a(samp%nc2a,geom%nl0))
            if (.false.) then
               allocate(pkv_c2a(samp%nc2a,geom%nl0))
            else
            end if
         end if

         do il0=1,geom%nl0
            do ic2a=1,samp%nc2a
               ! Copy data
               coef_ens_c2a(ic2a,il0) = diag%blk(ic2a,ib)%coef_ens(il0)
               if (bpar%fit_block(ib)) then
                  rh_c2a(ic2a,il0) = diag%blk(ic2a,ib)%fit_rh(il0)
                  pkh_c2a(ic2a,il0) = diag%blk(ic2a,ib)%fit_pkh(il0)
                  rv_c2a(ic2a,il0) = diag%blk(ic2a,ib)%fit_rv(il0)
                  if (.false.) then
                  else
                  end if
               end if

               ! Apply bounds relatively to the global value
               if (mpl%msv%isnot(coef_ens_c2a(ic2a,il0)).and.mpl%msv%isnot(diag%blk(0,ib)%coef_ens(il0))) then
                  if ((coef_ens_c2a(ic2a,il0)<diag%blk(0,ib)%coef_ens(il0)/bound) &
 & .or.(coef_ens_c2a(ic2a,il0)>diag%blk(0,ib)%coef_ens(il0)*bound)) coef_ens_c2a(ic2a,il0) = mpl%msv%valr
               end if
               if (bpar%fit_block(ib)) then
                  if (mpl%msv%isnot(rh_c2a(ic2a,il0)).and.mpl%msv%isnot(diag%blk(0,ib)%fit_rh(il0))) then
                     if ((rh_c2a(ic2a,il0)<diag%blk(0,ib)%fit_rh(il0)/bound) &
 & .or.(rh_c2a(ic2a,il0)>diag%blk(0,ib)%fit_rh(il0)*bound)) rh_c2a(ic2a,il0) = mpl%msv%valr
                  end if
                  if (mpl%msv%isnot(pkh_c2a(ic2a,il0)).and.mpl%msv%isnot(diag%blk(0,ib)%fit_pkh(il0))) then
                     if ((pkh_c2a(ic2a,il0)<diag%blk(0,ib)%fit_pkh(il0)/bound) &
 & .or.(pkh_c2a(ic2a,il0)>diag%blk(0,ib)%fit_pkh(il0)*bound)) pkh_c2a(ic2a,il0) = mpl%msv%valr
                  end if
                  if (mpl%msv%isnot(rv_c2a(ic2a,il0)).and.mpl%msv%isnot(diag%blk(0,ib)%fit_rv(il0))) then
                     if ((rv_c2a(ic2a,il0)<diag%blk(0,ib)%fit_rv(il0)/bound) &
 & .or.(rv_c2a(ic2a,il0)>diag%blk(0,ib)%fit_rv(il0)*bound)) rv_c2a(ic2a,il0) = mpl%msv%valr
                  end if
                  if (.false.) then
                  else
                  end if
               end if
            end do

            if (nam%diag_rhflt>zero) then
               ! Median filter to remove extreme values
               call samp%diag_filter(mpl,'median',nam%diag_rhflt,coef_ens_c2a(:,il0))
               if (bpar%fit_block(ib)) then
                  call samp%diag_filter(mpl,'median',nam%diag_rhflt,rh_c2a(:,il0))
                  call samp%diag_filter(mpl,'median',nam%diag_rhflt,pkh_c2a(:,il0))
                  call samp%diag_filter(mpl,'median',nam%diag_rhflt,rv_c2a(:,il0))
                  if (.false.) then
                  else
                  end if
               end if

               ! Average filter to smooth data
               call samp%diag_filter(mpl,'average',nam%diag_rhflt,coef_ens_c2a(:,il0))
               if (bpar%fit_block(ib)) then
                  call samp%diag_filter(mpl,'average',nam%diag_rhflt,rh_c2a(:,il0))
                  call samp%diag_filter(mpl,'average',nam%diag_rhflt,pkh_c2a(:,il0))
                  call samp%diag_filter(mpl,'average',nam%diag_rhflt,rv_c2a(:,il0))
                  if (.false.) then
                  else
                  end if
               end if
            end if

            ! Fill missing values
            call samp%diag_fill(mpl,coef_ens_c2a(:,il0))
            if (bpar%fit_block(ib)) then
               call samp%diag_fill(mpl,rh_c2a(:,il0))
               call samp%diag_fill(mpl,pkh_c2a(:,il0))
               call samp%diag_fill(mpl,rv_c2a(:,il0))
               if (.false.) then
               else
               end if
            end if

            ! Copy data
            do ic2a=1,samp%nc2a
               diag%blk(ic2a,ib)%coef_ens(il0) = coef_ens_c2a(ic2a,il0)
               if (bpar%fit_block(ib)) then
                  diag%blk(ic2a,ib)%fit_rh(il0) = rh_c2a(ic2a,il0)
                  diag%blk(ic2a,ib)%fit_pkh(il0) = pkh_c2a(ic2a,il0)
                  diag%blk(ic2a,ib)%fit_rv(il0) = rv_c2a(ic2a,il0)
                  if (.false.) then
                  else
                  end if
               end if
            end do
         end do

         ! Release memory
         if (bpar%fit_block(ib)) then
            deallocate(rh_c2a)
            deallocate(pkh_c2a)
            deallocate(rv_c2a)
            if (.false.) then
            else
            end if
         end if
      end if
   end do
end if

if (nam%diag_rvflt>zero) then
   ! Vertical filtering
   write(mpl%info,'(a7,a)') '','Vertical filtering'
   call mpl%flush

   do ib=1,bpar%nbe
      if (bpar%diag_block(ib)) then
         ! Vertical filtering
         do ic2a=0,diag%nc2a
            call ver_smooth(mpl,geom%nl0,geom%vunitavg,nam%diag_rvflt,diag%blk(ic2a,ib)%coef_ens)
            if (bpar%fit_block(ib)) then
               call ver_smooth(mpl,geom%nl0,geom%vunitavg,nam%diag_rvflt,diag%blk(ic2a,ib)%fit_rh)
               call ver_smooth(mpl,geom%nl0,geom%vunitavg,nam%diag_rvflt,diag%blk(ic2a,ib)%fit_pkh)
               call ver_smooth(mpl,geom%nl0,geom%vunitavg,nam%diag_rvflt,diag%blk(ic2a,ib)%fit_rv)
               if (.false.) then
               else
               end if
            end if
         end do
      end if
   end do
end if

! Probe out
@:probe_out()

end subroutine diag_filter_fit

!----------------------------------------------------------------------
! Subroutine: diag_build_fit
!> Build fit function
!----------------------------------------------------------------------
subroutine diag_build_fit(diag,mpl,nam,geom,bpar)

implicit none

! Passed variables
class(diag_type),intent(inout) :: diag !< Diagnostic
type(mpl_type),intent(inout) :: mpl    !< MPI data
type(nam_type),intent(in) :: nam       !< Namelist
type(geom_type),intent(in) :: geom     !< Geometry
type(bpar_type),intent(in) :: bpar     !< Block parameters

! Local variables
integer :: ib,ic2a,il0,jl0r,jc3
real(kind_real) :: rmse,norm,rmse_tot,norm_tot

! Set name
@:set_name(diag_build_fit)

! Probe in
@:probe_in()

do ib=1,bpar%nbe
   if (bpar%diag_block(ib).and.bpar%fit_block(ib)) then
      ! Build fit
      do ic2a=0,diag%nc2a
         ! Compute full fit
         call fit_diag_full(mpl,nam%nc3,bpar%nl0r(ib),geom%nl0,bpar%l0rl0b_to_l0(:,:,ib),geom%disth,diag%blk(ic2a,ib)%distv, &
 & diag%blk(ic2a,ib)%coef_ens,diag%blk(ic2a,ib)%fit_rh,diag%blk(ic2a,ib)%fit_pkh,diag%blk(ic2a,ib)%fit_rv, &
 & diag%blk(ic2a,ib)%fit_pkv,diag%blk(ic2a,ib)%fit)
      end do

      ! Compute RMSE
      rmse = sum(abs(diag%blk(0,ib)%fit-diag%blk(0,ib)%raw),mask=mpl%msv%isnot(diag%blk(0,ib)%raw))/real(mpl%nproc,kind_real)
      norm = real(count(mpl%msv%isnot(diag%blk(0,ib)%raw)),kind_real)/real(mpl%nproc,kind_real)
      do ic2a=1,diag%nc2a
         rmse = rmse+sum(abs(diag%blk(ic2a,ib)%fit-diag%blk(ic2a,ib)%raw),mask=mpl%msv%isnot(diag%blk(ic2a,ib)%raw))
         norm = norm+real(count(mpl%msv%isnot(diag%blk(ic2a,ib)%raw)),kind_real)
      end do
      call mpl%f_comm%allreduce(rmse,rmse_tot,fckit_mpi_sum())
      call mpl%f_comm%allreduce(norm,norm_tot,fckit_mpi_sum())
      if (norm_tot>zero) rmse_tot = sqrt(rmse_tot/norm_tot)
      write(mpl%info,'(a10,a,a,a,e15.8,a,i8,a)') '','Fit RMSE for block ',trim(bpar%blockname(ib)),': ',rmse_tot, &
 & ' for ',int(norm_tot),' diagnostic points'
      call mpl%flush
   end if
end do

! Probe out
@:probe_out()

end subroutine diag_build_fit

!----------------------------------------------------------------------
! Subroutine: diag_covariance
!> Compute covariance
!----------------------------------------------------------------------
subroutine diag_covariance(diag,mpl,nam,geom,bpar,samp,avg,prefix)

implicit none

! Passed variables
class(diag_type),intent(inout) :: diag !< Diagnostic
type(mpl_type),intent(inout) :: mpl    !< MPI data
type(nam_type),intent(in) :: nam       !< Namelist
type(geom_type),intent(in) :: geom     !< Geometry
type(bpar_type),intent(in) :: bpar     !< Block parameters
type(samp_type),intent(in) :: samp     !< Sampling
type(avg_type),intent(in) :: avg       !< Averaged statistics
character(len=*),intent(in) :: prefix  !< Diagnostic prefix

! Local variables
integer :: ib,ic2a,il0

! Set name
@:set_name(diag_covariance)

! Probe in
@:probe_in()

! Allocation
call diag%alloc(mpl,nam,geom,bpar,samp,prefix)

do ib=1,bpar%nb
   if (bpar%diag_block(ib)) then
      write(mpl%info,'(a10,a,a,a)') '','Block ',trim(bpar%blockname(ib))
      call mpl%flush

      ! Copy covariance
      do ic2a=0,diag%nc2a
         diag%blk(ic2a,ib)%coef_ens = mpl%msv%valr
         diag%blk(ic2a,ib)%raw = avg%blk(ic2a,ib)%m11
         diag%blk(ic2a,ib)%valid = avg%blk(ic2a,ib)%nc1a
      end do

      ! Print results
      do il0=1,geom%nl0
         if (mpl%msv%isnot(diag%blk(0,ib)%raw(1,bpar%il0rz(il0,ib),il0))) then
            write(mpl%info,'(a13,a,i3,a,a,e9.2,a)') '','Level: ',nam%levs(il0),' ~> cov. at class zero: ',trim(mpl%peach), &
 & diag%blk(0,ib)%raw(1,bpar%il0rz(il0,ib),il0),trim(mpl%black)
            call mpl%flush
         end if
      end do
   end if
end do

! Probe out
@:probe_out()

end subroutine diag_covariance

!----------------------------------------------------------------------
! Subroutine: diag_correlation
!> Compute correlation
!----------------------------------------------------------------------
subroutine diag_correlation(diag,mpl,nam,geom,bpar,samp,avg,prefix)

implicit none

! Passed variables
class(diag_type),intent(inout) :: diag !< Diagnostic
type(mpl_type),intent(inout) :: mpl    !< MPI data
type(nam_type),intent(in) :: nam       !< Namelist
type(geom_type),intent(in) :: geom     !< Geometry
type(bpar_type),intent(in) :: bpar     !< Block parameters
type(samp_type),intent(in) :: samp     !< Sampling
type(avg_type),intent(in) :: avg       !< Averaged statistics
character(len=*),intent(in) :: prefix  !< Diagnostic prefix

! Local variables
integer :: ib,ic2a,il0

! Set name
@:set_name(diag_correlation)

! Probe in
@:probe_in()

! Allocation
call diag%alloc(mpl,nam,geom,bpar,samp,prefix)

do ib=1,bpar%nbe
   if (bpar%diag_block(ib)) then
      ! Initialization
      write(mpl%info,'(a10,a,a,a)') '','Block ',trim(bpar%blockname(ib)),':'
      call mpl%flush(.false.)
      call mpl%prog_init(diag%nc2a+1)

      do ic2a=0,diag%nc2a
         ! Copy correlation
         diag%blk(ic2a,ib)%raw = avg%blk(ic2a,ib)%cor
         diag%blk(ic2a,ib)%valid = avg%blk(ic2a,ib)%nc1a_cor

         ! Set diagonal coefficient
         do il0=1,geom%nl0
            diag%blk(ic2a,ib)%coef_ens(il0) = diag%blk(ic2a,ib)%raw(1,bpar%il0rz(il0,ib),il0)
         end do

         ! Fitting
         if (bpar%fit_block(ib)) call diag%blk(ic2a,ib)%fitting(mpl,nam,geom,bpar)

         ! Update
         call mpl%prog_print(ic2a+1)
      end do
      call mpl%prog_final

      ! Print results
      do il0=1,geom%nl0
         if (bpar%fit_block(ib)) then
            if (mpl%msv%isnot(diag%blk(0,ib)%coef_ens(il0))) then
               write(mpl%info,'(a13,a,i3,a,a,f10.2,a)') '','Level: ',nam%levs(il0),' ~> cor. at class zero: ', &
 & trim(mpl%peach),diag%blk(0,ib)%coef_ens(il0),trim(mpl%black)
               call mpl%flush
               if (mpl%msv%isnot(diag%blk(0,ib)%fit_rh(il0))) then
                  write(mpl%info,'(a27,a,a,f10.2,a)') '','cor. hor. support:  ',trim(mpl%aqua), &
 & diag%blk(0,ib)%fit_rh(il0)*reqkm,trim(mpl%black)//' km'
                  call mpl%flush
                  write(mpl%info,'(a27,a,a,f10.2,a)') '','cor. peakness:      ',trim(mpl%aqua), &
 & diag%blk(0,ib)%fit_pkh(il0),trim(mpl%black)
                  call mpl%flush
                  write(mpl%info,'(a27,a,a,f10.2,a)') '','cor. ver. support:  ',trim(mpl%aqua), &
 & diag%blk(0,ib)%fit_rv(il0),trim(mpl%black)//' vertical units'
                  call mpl%flush
               end if
            end if
         end if
      end do
   end if
end do

! Filter fit
call diag%filter_fit(mpl,nam,geom,bpar,samp)

! Build fit
call diag%build_fit(mpl,nam,geom,bpar)

! Probe out
@:probe_out()

end subroutine diag_correlation

!----------------------------------------------------------------------
! Subroutine: diag_localization
!> Compute diagnostic localization
!----------------------------------------------------------------------
subroutine diag_localization(diag,mpl,nam,geom,bpar,samp,avg,prefix)

implicit none

! Passed variables
class(diag_type),intent(inout) :: diag !< Diagnostic
type(mpl_type),intent(inout) :: mpl    !< MPI data
type(nam_type),intent(in) :: nam       !< Namelist
type(geom_type),intent(in) :: geom     !< Geometry
type(bpar_type),intent(in) :: bpar     !< Block parameters
type(samp_type),intent(in) :: samp     !< Sampling
type(avg_type),intent(in) :: avg       !< Averaged statistics
character(len=*),intent(in) :: prefix  !< Block prefix

! Local variables
integer :: ib,ic2a,il0

! Set name
@:set_name(diag_localization)

! Probe in
@:probe_in()

! Allocation
call diag%alloc(mpl,nam,geom,bpar,samp,prefix)

do ib=1,bpar%nbe
   if (bpar%diag_block(ib)) then
      ! Initialization
      write(mpl%info,'(a10,a,a,a)') '','Block ',trim(bpar%blockname(ib)),':'
      call mpl%flush(.false.)
      call mpl%prog_init(diag%nc2a+1)

      do ic2a=0,diag%nc2a
         ! Compute localization
         call diag%blk(ic2a,ib)%localization(mpl,geom,bpar,avg%blk(ic2a,ib))

         ! Normalization
         call diag%blk(ic2a,ib)%normalization(geom,bpar)

         ! Fitting
         if (bpar%fit_block(ib)) call diag%blk(ic2a,ib)%fitting(mpl,nam,geom,bpar)

         ! Update
         call mpl%prog_print(ic2a+1)
      end do
      call mpl%prog_final

      ! Print results
      do il0=1,geom%nl0
         select case (trim(nam%method))
         case ('loc','hyb-avg','hyb-rnd','dual-ens')
            if (mpl%msv%isnot(diag%blk(0,ib)%coef_ens(il0))) then
               write(mpl%info,'(a13,a,i3,a,a,f10.2,a)') '','Level: ',nam%levs(il0),' ~> loc. at class zero: ', &
 & trim(mpl%peach),diag%blk(0,ib)%coef_ens(il0),trim(mpl%black)
               call mpl%flush
            end if
         end select
         if (bpar%fit_block(ib)) then
            if (mpl%msv%isnot(diag%blk(0,ib)%fit_rh(il0))) then
               write(mpl%info,'(a27,a,a,f10.2,a)') '','loc. horizontal: ',trim(mpl%aqua), &
 & diag%blk(0,ib)%fit_rh(il0)*reqkm,trim(mpl%black)//' km'
               call mpl%flush
               write(mpl%info,'(a27,a,a,f10.2,a)') '','loc. vertical:   ',trim(mpl%aqua), &
 & diag%blk(0,ib)%fit_rv(il0),trim(mpl%black)//' vertical units'
               call mpl%flush
            end if
         end if
      end do
   end if
end do

! Filter fit
call diag%filter_fit(mpl,nam,geom,bpar,samp)

! Build fit
call diag%build_fit(mpl,nam,geom,bpar)

! Probe out
@:probe_out()

end subroutine diag_localization

!----------------------------------------------------------------------
! Subroutine: diag_hybridization
!> Compute diagnostic hybridization
!----------------------------------------------------------------------
subroutine diag_hybridization(diag,mpl,nam,geom,bpar,samp,avg,prefix)

implicit none

! Passed variables
class(diag_type),intent(inout) :: diag !< Diagnostic (localization)
type(mpl_type),intent(inout) :: mpl    !< MPI data
type(nam_type),intent(in) :: nam       !< Namelist
type(geom_type),intent(in) :: geom     !< Geometry
type(bpar_type),intent(in) :: bpar     !< Block parameters
type(samp_type),intent(in) :: samp     !< Sampling
type(avg_type),intent(in) :: avg       !< Averaged statistics
character(len=*),intent(in) :: prefix  !< Diagnostic prefix

! Local variables
integer :: ib,ic2a,il0,iv

! Set name
@:set_name(diag_hybridization)

! Probe in
@:probe_in()

! Allocation
call diag%alloc(mpl,nam,geom,bpar,samp,prefix)

do ib=1,bpar%nbe
   if (bpar%diag_block(ib)) then
      ! Initialization
      write(mpl%info,'(a10,a,a,a)') '','Block ',trim(bpar%blockname(ib)),':'
      call mpl%flush(.false.)
      call mpl%prog_init(diag%nc2a+1)

      do ic2a=0,diag%nc2a
         ! Compute hybridization
         call diag%blk(ic2a,ib)%hybridization(mpl,nam,geom,bpar,avg%blk(ic2a,ib))

         if (nam%forced_radii) then
            ! No normalization/fitting, use forced radii
            iv = bpar%b_to_v1(ib)
            diag%blk(ic2a,ib)%fit_rh = nam%rh(1:geom%nl0,iv)
            diag%blk(ic2a,ib)%fit_rv = nam%rv(1:geom%nl0,iv)
         else
            ! Normalization
            call diag%blk(ic2a,ib)%normalization(geom,bpar)

            ! Fitting
            if (bpar%fit_block(ib)) call diag%blk(ic2a,ib)%fitting(mpl,nam,geom,bpar)
         end if

         ! Update
         call mpl%prog_print(ic2a+1)
      end do
      call mpl%prog_final

      ! Print results
      do il0=1,geom%nl0
         if (mpl%msv%isnot(diag%blk(0,ib)%coef_ens(il0))) then
            write(mpl%info,'(a13,a,i3,a4,a20,a,f10.2,a)') '','Level: ',nam%levs(il0),' ~> ','loc. at class zero: ', &
 & trim(mpl%peach),diag%blk(0,ib)%coef_ens(il0),trim(mpl%black)
            call mpl%flush
         end if
         if (bpar%fit_block(ib)) then
            if (mpl%msv%isnot(diag%blk(0,ib)%fit_rh(il0))) then
               write(mpl%info,'(a27,a,a,f10.2,a)') '','loc. horizontal: ',trim(mpl%aqua), &
 & diag%blk(0,ib)%fit_rh(il0)*reqkm,trim(mpl%black)//' km'
               call mpl%flush
               write(mpl%info,'(a27,a,a,f10.2,a)') '','loc. vertical:   ',trim(mpl%aqua), &
 & diag%blk(0,ib)%fit_rv(il0),trim(mpl%black)//' vertical units'
               call mpl%flush
            end if
         end if
      end do
      if (mpl%msv%isnot(diag%blk(0,ib)%coef_sta)) write(mpl%info,'(a13,a,a,f4.2,a)') '', &
 & 'Static coeff.:                          ',trim(mpl%purple),diag%blk(0,ib)%coef_sta,trim(mpl%black)
      call mpl%flush
   end if
end do

! Filter fit
call diag%filter_fit(mpl,nam,geom,bpar,samp)

! Build fit
call diag%build_fit(mpl,nam,geom,bpar)

! Probe out
@:probe_out()

end subroutine diag_hybridization

!----------------------------------------------------------------------
! Subroutine: diag_dualens
!> Compute diagnostic dualens
!----------------------------------------------------------------------
subroutine diag_dualens(diag,mpl,nam,geom,bpar,samp,avg,avg_lr,diag_lr,prefix,prefix_lr)

implicit none

! Passed variables
class(diag_type),intent(inout) :: diag   !< Diagnostic (localization)
type(mpl_type),intent(inout) :: mpl      !< MPI data
type(nam_type),intent(in) :: nam         !< Namelist
type(geom_type),intent(in) :: geom       !< Geometry
type(bpar_type),intent(in) :: bpar       !< Block parameters
type(samp_type),intent(in) :: samp       !< Sampling
type(avg_type),intent(in) :: avg         !< Averaged statistics
type(avg_type),intent(in) :: avg_lr      !< LR averaged statistics
type(diag_type),intent(inout) :: diag_lr !< Diagnostic (LR localization)
character(len=*),intent(in) :: prefix    !< Diagnostic prefix
character(len=*),intent(in) :: prefix_lr !< LR diagnostic prefix

! Local variables
integer :: ib,ic2a,il0

! Set name
@:set_name(diag_dualens)

! Probe in
@:probe_in()

! Allocation
call diag%alloc(mpl,nam,geom,bpar,samp,prefix)
call diag_lr%alloc(mpl,nam,geom,bpar,samp,prefix_lr)

do ib=1,bpar%nbe
   if (bpar%diag_block(ib)) then
      ! Initialization
      write(mpl%info,'(a10,a,a,a)') '','Block ',trim(bpar%blockname(ib)),':'
      call mpl%flush(.false.)
      call mpl%prog_init(diag%nc2a+1)

      do ic2a=0,diag%nc2a
         ! Compute dualens
         call diag%blk(ic2a,ib)%dualens(mpl,geom,bpar,avg%blk(ic2a,ib),avg_lr%blk(ic2a,ib),diag_lr%blk(ic2a,ib))

         ! Normalization
         call diag%blk(ic2a,ib)%normalization(geom,bpar)
         call diag_lr%blk(ic2a,ib)%normalization(geom,bpar)

         ! Fitting
         if (bpar%fit_block(ib)) then
            call diag%blk(ic2a,ib)%fitting(mpl,nam,geom,bpar)
            call diag_lr%blk(ic2a,ib)%fitting(mpl,nam,geom,bpar)
         end if

         ! Update
         call mpl%prog_print(ic2a+1)
      end do
      call mpl%prog_final

      ! Print results
      do il0=1,geom%nl0
         if (mpl%msv%isnot(diag%blk(0,ib)%coef_ens(il0))) then
            write(mpl%info,'(a13,a,i3,a4,a21,a,f10.2,a)') '','Level: ',nam%levs(il0),' ~> ','loc. at class zero (HR): ', &
 & trim(mpl%peach),diag%blk(0,ib)%coef_ens(il0),trim(mpl%black)
            call mpl%flush
         end if
         if (bpar%fit_block(ib)) then
            if (mpl%msv%isnot(diag%blk(0,ib)%fit_rh(il0))) then
               write(mpl%info,'(a27,a,a,f10.2,a)') '','loc. horizontal (HR): ',trim(mpl%aqua), &
 & diag%blk(0,ib)%fit_rh(il0)*reqkm,trim(mpl%black)//' km'
               call mpl%flush
               write(mpl%info,'(a27,a,a,f10.2,a)') '','loc. vertical (HR):   ',trim(mpl%aqua), &
 & diag%blk(0,ib)%fit_rv(il0),trim(mpl%black)//' vertical units'
               call mpl%flush
            end if
         end if
         if (mpl%msv%isnot(diag%blk(0,ib)%coef_ens(il0))) then
            write(mpl%info,'(a27,a,a,f10.2,a)') '','loc. at class zero (LR): ',trim(mpl%peach), &
 & diag_lr%blk(0,ib)%coef_ens(il0),trim(mpl%black)
            call mpl%flush
         end if
         if (bpar%fit_block(ib)) then
            if (mpl%msv%isnot(diag_lr%blk(0,ib)%fit_rh(il0))) then
               write(mpl%info,'(a27,a,a,f10.2,a)') '','loc. horizontal (LR): ',trim(mpl%aqua), &
 & diag_lr%blk(0,ib)%fit_rh(il0)*reqkm,trim(mpl%black)//' km'
               call mpl%flush
               write(mpl%info,'(a27,a,a,f10.2,a)') '','loc. vertical (LR):   ',trim(mpl%aqua), &
 & diag_lr%blk(0,ib)%fit_rv(il0),trim(mpl%black)//' vertical units'
               call mpl%flush
            end if
         end if
      end do
   end if
end do

! Filter fit
call diag%filter_fit(mpl,nam,geom,bpar,samp)
call diag_lr%filter_fit(mpl,nam,geom,bpar,samp)

! Build fit
call diag%build_fit(mpl,nam,geom,bpar)
call diag_lr%build_fit(mpl,nam,geom,bpar)

! Probe out
@:probe_out()

end subroutine diag_dualens

end module type_diag
