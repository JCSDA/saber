#:include 'instrumentation.fypp'
!----------------------------------------------------------------------
! Module: type_ens
!> Ensemble derived type
! Author: Benjamin Menetrier
! Licensing: this code is distributed under the CeCILL-C license
! Copyright 2015-... UCAR, CERFACS, METEO-FRANCE and IRIT
!----------------------------------------------------------------------
module type_ens

use atlas_module, only: atlas_fieldset
use fckit_mpi_module, only: fckit_mpi_sum,fckit_mpi_max
use tools_const, only: zero,one,deg2rad,rad2deg,req
use tools_func, only: sphere_dist,lonlat2xyz,xyz2lonlat,zss_count
use tools_kinds, only: kind_real
use tools_netcdf, only: create_file,define_grp,define_dim,define_var,put_var,close_file
use tools_qsort, only: qsort
use type_fieldset, only: fieldset_type
use type_geom, only: geom_type
use type_mpl, only: mpl_type
use type_nam, only: nam_type
@:use_probe()

implicit none

! Ensemble derived type
type ens_type
   ! Attributes
   integer :: ne                                   !< Ensemble size
   integer :: nsub                                 !< Number of sub-ensembles
   logical :: loaded                               !< True if members are loaded

   ! Data
   type(fieldset_type),allocatable :: mem(:)       !< Members
   type(fieldset_type),allocatable :: mean(:)      !< Ensemble mean
   type(fieldset_type) :: m2                       !< Variance
   type(fieldset_type) :: m4                       !< Fourth-order centered moment

   ! Normality test
   real(kind_real),allocatable :: norm_m2(:,:,:)   !< Variance (normality test)
   real(kind_real),allocatable :: norm_m4(:,:,:)   !< Fourth-order centered moment (normality test)
   real(kind_real),allocatable :: norm_kurt(:,:,:) !< Kurtosis (normality test)
contains
   procedure :: set_att => ens_set_att
   procedure :: alloc => ens_alloc
   procedure :: partial_dealloc => ens_partial_dealloc
   procedure :: dealloc => ens_dealloc
   procedure :: copy => ens_copy
   procedure :: compute_mean => ens_compute_mean
   procedure :: compute_moments => ens_compute_moments
   procedure :: normalize => ens_normalize
   procedure :: ens_get_c0_single
   procedure :: ens_get_c0_all
   generic :: get_c0 => ens_get_c0_single,ens_get_c0_all
   procedure :: ens_set_c0_single
   procedure :: ens_set_c0_all
   generic :: set_c0 => ens_set_c0_single,ens_set_c0_all
   procedure :: apply_bens => ens_apply_bens
   procedure :: normality => ens_normality
end type ens_type

private
public :: ens_type

contains

!----------------------------------------------------------------------
! Subroutine: ens_set_att
!> Set attributes
!----------------------------------------------------------------------
subroutine ens_set_att(ens,ne,nsub)

implicit none

! Passed variables
class(ens_type),intent(inout) :: ens !< Ensemble
integer,intent(in) :: ne             !< Ensemble size
integer,intent(in) :: nsub           !< Number of sub-ensembles

! Set name
@:set_name(ens_set_att)

! Probe in
@:probe_in()

! Copy attributes
ens%ne = ne
ens%nsub = nsub
ens%loaded = .false.

! Probe out
@:probe_out()

end subroutine ens_set_att

!----------------------------------------------------------------------
! Subroutine: ens_alloc
!> Allocation
!----------------------------------------------------------------------
subroutine ens_alloc(ens,ne,nsub)

implicit none

! Passed variables
class(ens_type),intent(inout) :: ens !< Ensemble
integer,intent(in) :: ne             !< Ensemble size
integer,intent(in) :: nsub           !< Number of sub-ensembles

! Set name
@:set_name(ens_alloc)

! Probe in
@:probe_in()

! Copy attributes
call ens%set_att(ne,nsub)

! Allocation
if (ne>0) then
   allocate(ens%mem(ne))
   allocate(ens%mean(nsub))
end if

! Probe out
@:probe_out()

end subroutine ens_alloc

!----------------------------------------------------------------------
! Subroutine: ens_partial_dealloc
!> Release memory (partial)
!----------------------------------------------------------------------
subroutine ens_partial_dealloc(ens)

implicit none

! Passed variables
class(ens_type),intent(inout) :: ens !< Ensemble

! Local variables
integer :: ie,isub

! Set name
@:set_name(ens_partial_dealloc)

! Probe in
@:probe_in()

! Release memory
if (allocated(ens%mem)) then
   do ie=1,ens%ne
      call ens%mem(ie)%final()
   end do
   deallocate(ens%mem)
end if
if (allocated(ens%mean)) then
   do isub=1,ens%nsub
      call ens%mean(isub)%final()
   end do
   deallocate(ens%mean)
end if
call ens%m2%final()
call ens%m4%final()
ens%loaded = .false.

! Probe out
@:probe_out()

end subroutine ens_partial_dealloc

!----------------------------------------------------------------------
! Subroutine: ens_dealloc
!> Release memory
!----------------------------------------------------------------------
subroutine ens_dealloc(ens)

implicit none

! Passed variables
class(ens_type),intent(inout) :: ens !< Ensemble

! Set name
@:set_name(ens_dealloc)

! Probe in
@:probe_in()

! Release memory
call ens%partial_dealloc
if (allocated(ens%norm_m2)) deallocate(ens%norm_m2)
if (allocated(ens%norm_m4)) deallocate(ens%norm_m4)
if (allocated(ens%norm_kurt)) deallocate(ens%norm_kurt)

! Probe out
@:probe_out()

end subroutine ens_dealloc

!----------------------------------------------------------------------
! Subroutine: ens_copy
!> Copy
!----------------------------------------------------------------------
subroutine ens_copy(ens_out,mpl,nam,geom,ens_in)

implicit none

! Passed variables
class(ens_type),intent(inout) :: ens_out !< Output ensemble
type(mpl_type),intent(inout) :: mpl      !< MPI data
type(nam_type),intent(in) :: nam         !< Namelist
type(geom_type),intent(in) :: geom       !< Geometry
type(ens_type),intent(in) :: ens_in      !< Input ensemble

! Local variables
integer :: ie,isub

! Set name
@:set_name(ens_copy)

! Probe in
@:probe_in()

! Copy data
if (allocated(ens_in%mem)) then
   do ie=1,ens_in%ne
      if (.not.ens_in%mem(ie)%is_null()) call ens_out%mem(ie)%init(mpl,ens_in%mem(ie),geom%gmask_mga, &
 & nam%variables(1:nam%nv),nam%lev2d,copy=.true.)
   end do
end if
if (allocated(ens_in%mean)) then
   do isub=1,ens_in%nsub
      if (.not.ens_in%mean(isub)%is_null()) call ens_out%mean(isub)%init(mpl,ens_in%mean(isub),geom%gmask_mga, &
 & nam%variables(1:nam%nv),nam%lev2d,copy=.true.)
   end do
end if
if (.not.ens_in%m2%is_null()) call ens_out%m2%init(mpl,ens_in%m2,geom%gmask_mga, &
 & nam%variables(1:nam%nv),nam%lev2d,copy=.true.)
if (.not.ens_in%m4%is_null()) call ens_out%m4%init(mpl,ens_in%m4,geom%gmask_mga, &
 & nam%variables(1:nam%nv),nam%lev2d,copy=.true.)

! Probe out
@:probe_out()

end subroutine ens_copy

!----------------------------------------------------------------------
! Subroutine: ens_compute_mean
!> Compute ensemble mean(s)
!----------------------------------------------------------------------
subroutine ens_compute_mean(ens,mpl,nam,geom)

implicit none

! Passed variables
class(ens_type),intent(inout) :: ens !< Ensemble
type(mpl_type),intent(inout) :: mpl  !< MPI data
type(nam_type),intent(in) :: nam     !< Namelist
type(geom_type),intent(in) :: geom   !< Geometry

! Local variables
integer :: isub,ie_sub,ie

! Set name
@:set_name(ens_compute_mean)

! Probe in
@:probe_in()

do isub=1,ens%nsub
   ! Initialization
   call ens%mean(isub)%init(mpl,ens%mem(1),geom%gmask_mga,nam%variables(1:nam%nv),nam%lev2d)

   ! Set fields at zero
   call ens%mean(isub)%zero_fields(mpl)

   ! Compute mean
   do ie_sub=1,ens%ne/ens%nsub
      ie = ie_sub+(isub-1)*ens%ne/ens%nsub
      call ens%mean(isub)%add_fields(mpl,ens%mem(ie))
   end do
   call ens%mean(isub)%mult_fields(mpl,one/real(ens%ne/ens%nsub,kind_real))
end do

! Probe out
@:probe_out()

end subroutine ens_compute_mean

!----------------------------------------------------------------------
! Subroutine: ens_compute_moments
!> Compute 2nd- and 4th-order centered moments
!----------------------------------------------------------------------
subroutine ens_compute_moments(ens,mpl,nam,geom)

implicit none

! Passed variables
class(ens_type),intent(inout) :: ens !< Ensemble
type(mpl_type),intent(inout) :: mpl  !< MPI data
type(nam_type),intent(in) :: nam     !< Namelist
type(geom_type),intent(in) :: geom   !< Geometry

! Local variables
integer :: isub,ie_sub,ie
type(fieldset_type) :: pert

! Set name
@:set_name(ens_compute_moments)

! Probe in
@:probe_in()

! Initialization
call ens%m2%init(mpl,ens%mem(1),geom%gmask_mga,nam%variables(1:nam%nv),nam%lev2d)
call ens%m4%init(mpl,ens%mem(1),geom%gmask_mga,nam%variables(1:nam%nv),nam%lev2d)

! Set fields at zero
call ens%m2%zero_fields(mpl)
call ens%m4%zero_fields(mpl)

do isub=1,ens%nsub
   do ie_sub=1,ens%ne/ens%nsub
      ! Compute perturbation
      ie = ie_sub+(isub-1)*ens%ne/ens%nsub
      call pert%init(mpl,ens%mem(ie),geom%gmask_mga,nam%variables(1:nam%nv),nam%lev2d,copy=.true.)
      call pert%sub_fields(mpl,ens%mean(isub))

      ! Square
      call pert%square_fields(mpl)
      call ens%m2%add_fields(mpl,pert)

      ! Square again
      call pert%square_fields(mpl)
      call ens%m4%add_fields(mpl,pert)
   end do
end do

! Normalize
call ens%m2%mult_fields(mpl,one/real(ens%ne-ens%nsub,kind_real))
call ens%m4%mult_fields(mpl,one/real(ens%ne,kind_real))

! Probe out
@:probe_out()

end subroutine ens_compute_moments

!----------------------------------------------------------------------
! Subroutine: ens_normalize
!> Normalize ensemble members as perturbations (zero mean) with unit variance
!----------------------------------------------------------------------
subroutine ens_normalize(ens,mpl,nam,geom)

implicit none

! Passed variables
class(ens_type),intent(inout) :: ens !< Ensemble
type(mpl_type),intent(inout) :: mpl  !< MPI data
type(nam_type),intent(in) :: nam     !< Namelist
type(geom_type),intent(in) :: geom   !< Geometry

! Local variables
integer :: isub,ie_sub,ie
type(fieldset_type) :: std

! Set name
@:set_name(ens_normalize)

! Probe in
@:probe_in()

! Compute ensemble mean
call ens%compute_mean(mpl,nam,geom)

! Remove mean
do isub=1,ens%nsub
   do ie_sub=1,ens%ne/ens%nsub
      ie = ie_sub+(isub-1)*ens%ne/ens%nsub
      call ens%mem(ie)%sub_fields(mpl,ens%mean(isub))
   end do
   call ens%mean(isub)%zero_fields(mpl)
end do

! Compute moments
call ens%compute_moments(mpl,nam,geom)

! Compute standard deviation
call std%init(mpl,ens%m2,copy=.true.)
call std%sqrt_fields(mpl)

! Normalize members
do isub=1,ens%nsub
   do ie_sub=1,ens%ne/ens%nsub
      ie = ie_sub+(isub-1)*ens%ne/ens%nsub
      call ens%mem(ie)%div_fields(mpl,std)
   end do
end do

! Recompute moments
call ens%compute_moments(mpl,nam,geom)

! Probe out
@:probe_out()

end subroutine ens_normalize

!----------------------------------------------------------------------
! Subroutine: ens_get_c0_single
!> Get ensemble field on subset Sc0, single variable
!----------------------------------------------------------------------
subroutine ens_get_c0_single(ens,mpl,iv,geom,fieldtype,i,fld_c0a)

implicit none

! Passed variables
class(ens_type),intent(in) :: ens                          !< Ensemble
type(mpl_type),intent(inout) :: mpl                        !< MPI data
integer,intent(in) :: iv                                   !< Variable index
type(geom_type),intent(in) :: geom                         !< Geometry
character(len=*),intent(in) :: fieldtype                   !< Field type ('member', 'pert', 'm2' or 'm4')
integer,intent(in) :: i                                    !< Index (member or subset)
real(kind_real),intent(out) :: fld_c0a(geom%nc0a,geom%nl0) !< Field on Sc0 subset, halo A

! Local variables
integer :: isub
real(kind_real) :: fld_mga(geom%nmga,geom%nl0)
real(kind_real),allocatable :: mean(:,:)

! Set name
@:set_name(ens_get_c0_single)

! Probe in
@:probe_in()

select case (trim(fieldtype))
case ('member')
   ! Ensemble member
   call ens%mem(i)%to_array(mpl,iv,fld_mga)
case ('pert')
   ! Ensemble perturbation

   ! Allocation
   allocate(mean(geom%nmga,geom%nl0))

   ! Get sub-ensemble
   isub = (i-1)/(ens%ne/ens%nsub)+1

   ! Fieldset to Fortran array
   call ens%mem(i)%to_array(mpl,iv,fld_mga)
   call ens%mean(isub)%to_array(mpl,iv,mean)

   ! Member to perturbation
   fld_mga = fld_mga-mean

   ! Release memory
   deallocate(mean)
case ('m2')
   ! Second-order centered moment
   call ens%m2%to_array(mpl,iv,fld_mga)
case ('m4')
   ! Fourth-order centered moment
   call ens%m4%to_array(mpl,iv,fld_mga)
case default
   call mpl%abort('${subr}$','wrong field type')
end select

! Model grid to subset Sc0
call geom%copy_mga_to_c0a(mpl,fld_mga,fld_c0a)

! Probe out
@:probe_out()

end subroutine ens_get_c0_single

!----------------------------------------------------------------------
! Subroutine: ens_get_c0_all
!> Get ensemble field on subset Sc0, all variables
!----------------------------------------------------------------------
subroutine ens_get_c0_all(ens,mpl,nam,geom,fieldtype,i,fld_c0a)

implicit none

! Passed variables
class(ens_type),intent(in) :: ens                                 !< Ensemble
type(mpl_type),intent(inout) :: mpl                               !< MPI data
type(nam_type),intent(in) :: nam                                  !< Namelist
type(geom_type),intent(in) :: geom                                !< Geometry
character(len=*),intent(in) :: fieldtype                          !< Field type ('member', 'pert', 'm2' or 'm4')
integer,intent(in) :: i                                           !< Index (member or subset)
real(kind_real),intent(out) :: fld_c0a(geom%nc0a,geom%nl0,nam%nv) !< Field on Sc0 subset, halo A

! Local variables
integer :: iv

! Set name
@:set_name(ens_get_c0_all)

! Probe in
@:probe_in()

! Loop over fields
do iv=1,nam%nv
   call ens%get_c0(mpl,iv,geom,fieldtype,i,fld_c0a(:,:,iv))
end do

! Probe out
@:probe_out()

end subroutine ens_get_c0_all

!----------------------------------------------------------------------
! Subroutine: ens_set_c0_single
!> Set ensemble field on subset Sc0, single variable
!----------------------------------------------------------------------
subroutine ens_set_c0_single(ens,mpl,iv,geom,fieldtype,i,fld_c0a)

implicit none

! Passed variables
class(ens_type),intent(inout) :: ens                      !< Ensemble
type(mpl_type),intent(inout) :: mpl                       !< MPI data
integer,intent(in) :: iv                                  !< Variable index
type(geom_type),intent(in) :: geom                        !< Geometry
character(len=*),intent(in) :: fieldtype                  !< Field type ('member')
integer,intent(in) :: i                                   !< Index (member or subset)
real(kind_real),intent(in) :: fld_c0a(geom%nc0a,geom%nl0) !< Field on Sc0 subset, halo A

! Local variables
real(kind_real) :: fld_mga(geom%nmga,geom%nl0)

! Set name
@:set_name(ens_set_c0_single)

! Probe in
@:probe_in()

! Subset Sc0 to model grid
call geom%copy_c0a_to_mga(mpl,fld_c0a,fld_mga)

select case (trim(fieldtype))
case ('member')
   ! Ensemble member
   call ens%mem(i)%from_array(mpl,iv,fld_mga)
case default
   call mpl%abort('${subr}$','wrong field type')
end select

! Probe out
@:probe_out()

end subroutine ens_set_c0_single

!----------------------------------------------------------------------
! Subroutine: ens_set_c0_all
!> Set ensemble field on subset Sc0, all variables
!----------------------------------------------------------------------
subroutine ens_set_c0_all(ens,mpl,nam,geom,fieldtype,i,fld_c0a)

implicit none

! Passed variables
class(ens_type),intent(inout) :: ens                             !< Ensemble
type(mpl_type),intent(inout) :: mpl                              !< MPI data
type(nam_type),intent(in) :: nam                                 !< Namelist
type(geom_type),intent(in) :: geom                               !< Geometry
character(len=*),intent(in) :: fieldtype                         !< Field type ('member')
integer,intent(in) :: i                                          !< Index (member or subset)
real(kind_real),intent(in) :: fld_c0a(geom%nc0a,geom%nl0,nam%nv) !< Field on Sc0 subset, halo A

! Local variables
integer :: iv

! Set name
@:set_name(ens_set_c0_all)

! Probe in
@:probe_in()

! Loop over fields
do iv=1,nam%nv
   call ens%set_c0(mpl,iv,geom,fieldtype,i,fld_c0a(:,:,iv))
end do

! Probe out
@:probe_out()

end subroutine ens_set_c0_all

!----------------------------------------------------------------------
! Subroutine: ens_apply_bens
!> Apply raw ensemble covariance
!----------------------------------------------------------------------
subroutine ens_apply_bens(ens,mpl,nam,geom,fld)

implicit none

! Passed variables
class(ens_type),intent(in) :: ens                               !< Ensemble
type(mpl_type),intent(inout) :: mpl                             !< MPI data
type(nam_type),intent(in) :: nam                                !< Namelist
type(geom_type),intent(in) :: geom                              !< Geometry
real(kind_real),intent(inout) :: fld(geom%nc0a,geom%nl0,nam%nv) !< Field

! Local variable
integer :: ie,ic0a,il0,iv
real(kind_real) :: alpha,norm
real(kind_real) :: fld_copy(geom%nc0a,geom%nl0,nam%nv)
real(kind_real) :: pert(geom%nc0a,geom%nl0,nam%nv)

! Set name
@:set_name(ens_apply_bens)

! Probe in
@:probe_in()

! Initialization
fld_copy = fld

! Apply ensemble covariance formula
fld = zero
norm = one/real(ens%ne-1,kind_real)
do ie=1,ens%ne
   ! Get perturbation on subset Sc0
   call ens%get_c0(mpl,nam,geom,'pert',ie,pert)

   ! Copy value or set at missing value
   do il0=1,geom%nl0
      do ic0a=1,geom%nc0a
         if (.not.geom%gmask_c0a(ic0a,il0)) pert(ic0a,il0,:) = mpl%msv%valr
      end do
   end do

   ! Dot product
   call mpl%dot_prod(pert,fld_copy,alpha)

   ! Schur product
   !$omp parallel do schedule(static) private(iv,il0,ic0a)
   do iv=1,nam%nv
      do il0=1,geom%nl0
         do ic0a=1,geom%nc0a
            if (geom%gmask_c0a(ic0a,il0)) fld(ic0a,il0,iv) = fld(ic0a,il0,iv)+alpha*pert(ic0a,il0,iv)*norm
         end do
      end do
   end do
   !$omp end parallel do
end do

! Probe out
@:probe_out()

end subroutine ens_apply_bens

!----------------------------------------------------------------------
! Subroutine: ens_normality
!> Perform some normality diagnostics
!----------------------------------------------------------------------
subroutine ens_normality(ens,mpl,nam,geom)

implicit none

! Passed variables
class(ens_type),intent(inout) :: ens !< Ensemble
type(mpl_type),intent(inout) :: mpl  !< MPI data
type(nam_type),intent(in) :: nam     !< Namelist
type(geom_type),intent(in) :: geom   !< Geometry

! Local variables
integer :: ncid,nloc_id,ne_id,nem1_id,ic0a_id,il0_id,iv_id,order_id,ens_norm_id,ens_step_id
integer :: iv,il0,ic0a,ie,nloc,iloc,nglb
integer,allocatable :: ic0a_loc(:),il0_loc(:),iv_loc(:),order(:,:)
real(kind_real) :: norm
real(kind_real) :: fld_c0a(geom%nc0a,geom%nl0,ens%ne)
real(kind_real),allocatable :: ens_loc(:),ens_norm(:,:),ens_step(:,:)

! Set name
@:set_name(ens_normality)

! Probe in
@:probe_in()

! Allocation
allocate(ens%norm_m2(geom%nc0a,geom%nl0,nam%nv))
allocate(ens%norm_m4(geom%nc0a,geom%nl0,nam%nv))
allocate(ens%norm_kurt(geom%nc0a,geom%nl0,nam%nv))

! Compute variance and kurtosis
write(mpl%info,'(a7,a)') '','Compute variance and kurtosis'
call mpl%flush
call ens%compute_moments(mpl,nam,geom)
call ens%get_c0(mpl,nam,geom,'m2',0,ens%norm_m2)
call ens%get_c0(mpl,nam,geom,'m4',0,ens%norm_m4)
ens%norm_kurt = mpl%msv%valr
do iv=1,nam%nv
   do il0=1,geom%nl0
      do ic0a=1,geom%nc0a
         if (ens%norm_m2(ic0a,il0,iv)>zero) ens%norm_kurt(ic0a,il0,iv) = ens%norm_m4(ic0a,il0,iv)/ens%norm_m2(ic0a,il0,iv)**2
      end do
   end do
end do

! Allocation
nloc = zss_count(mpl%msv%isnot(ens%norm_kurt).and.(ens%norm_kurt>nam%gen_kurt_th))
allocate(ic0a_loc(nloc))
allocate(il0_loc(nloc))
allocate(iv_loc(nloc))
allocate(order(ens%ne,nloc))
allocate(ens_loc(ens%ne))
allocate(ens_norm(ens%ne,nloc))
allocate(ens_step(ens%ne-1,nloc))
call mpl%f_comm%allreduce(nloc,nglb,fckit_mpi_sum())

! Save ensemble
write(mpl%info,'(a7,a,i6,a)') '','Save ensemble for ',nloc,' local points'
call mpl%flush
write(mpl%test,'(a7,a,i6,a)') '','Save ensemble for ',nglb,' points total'
call mpl%flush
iloc = 0
do iv=1,nam%nv
   do ie=1,ens%ne
      ! Get perturbation on subset Sc0
      call ens%get_c0(mpl,iv,geom,'pert',ie,fld_c0a(:,:,ie))
   end do

   do il0=1,geom%nl0
      do ic0a=1,geom%nc0a
         if (mpl%msv%isnot(ens%norm_kurt(ic0a,il0,iv)).and.(ens%norm_kurt(ic0a,il0,iv)>nam%gen_kurt_th)) then
            ! Update index
            iloc = iloc+1

            ! Copy data
            ic0a_loc(iloc) = ic0a
            il0_loc(iloc) = il0
            iv_loc(iloc) = iv
            do ie=1,ens%ne
               ens_loc(ie) = fld_c0a(ic0a,il0,ie)
            end do

            ! Sort ensemble
            call qsort(ens%ne,ens_loc,order(:,iloc))

            ! Normalize ensemble
            norm = one/(maxval(ens_loc)-minval(ens_loc))
            ens_norm(:,iloc) = (ens_loc-minval(ens_loc))*norm

            ! Compute ensemble steps
            do ie=1,ens%ne-1
               ens_step(ie,iloc) = ens_norm(ie+1,iloc)-ens_norm(ie,iloc)
            end do
         end if
      end do
   end do
end do

! Write normality diagnostics
write(mpl%info,'(a7,a)') '','Write normality diagnostics'
call mpl%flush

! Create file
ncid = create_file(mpl,trim(nam%prefix)//'normality',mpl%myproc,io_override=.true.)

! Define dimensions
nloc_id = define_dim(mpl,ncid,'nloc',nloc,io_override=.true.)
ne_id = define_dim(mpl,ncid,'ne',ens%ne,io_override=.true.)
nem1_id = define_dim(mpl,ncid,'nem1',ens%ne-1,io_override=.true.)

if (nloc>0) then
   ! Define variables
   ic0a_id = define_var(mpl,ncid,'ic0a','int',(/nloc_id/),io_override=.true.)
   il0_id = define_var(mpl,ncid,'il0','int',(/nloc_id/),io_override=.true.)
   iv_id = define_var(mpl,ncid,'iv','int',(/nloc_id/),io_override=.true.)
   order_id = define_var(mpl,ncid,'order','int',(/ne_id,nloc_id/),io_override=.true.)
   ens_norm_id = define_var(mpl,ncid,'ens_norm','real',(/ne_id,nloc_id/),io_override=.true.)
   ens_step_id = define_var(mpl,ncid,'ens_step','real',(/nem1_id,nloc_id/),io_override=.true.)
end if

if (nloc>0) then
   ! Write variables
   call put_var(mpl,ncid,ic0a_id,ic0a_loc,io_override=.true.)
   call put_var(mpl,ncid,il0_id,il0_loc,io_override=.true.)
   call put_var(mpl,ncid,iv_id,iv_loc,io_override=.true.)
   call put_var(mpl,ncid,order_id,order,io_override=.true.)
   call put_var(mpl,ncid,ens_norm_id,ens_norm,io_override=.true.)
   call put_var(mpl,ncid,ens_step_id,ens_step,io_override=.true.)
end if

! Close file
call close_file(mpl,ncid,io_override=.true.)

! Release memory
deallocate(ic0a_loc)
deallocate(il0_loc)
deallocate(iv_loc)
deallocate(order)
deallocate(ens_loc)
deallocate(ens_norm)
deallocate(ens_step)

! Probe out
@:probe_out()

end subroutine ens_normality

end module type_ens
