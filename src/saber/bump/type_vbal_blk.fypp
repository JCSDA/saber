#:include 'instrumentation.fypp'
!----------------------------------------------------------------------
! Module: type_vbal_blk
!> Vertical balance block derived type
! Author: Benjamin Menetrier
! Licensing: this code is distributed under the CeCILL-C license
! Copyright 2015-... UCAR, CERFACS, METEO-FRANCE and IRIT
!----------------------------------------------------------------------
module type_vbal_blk

use tools_const, only: zero,one
use tools_func, only: syminv,zss_count
use tools_kinds, only: kind_real
use tools_wrfda, only: pseudoinv
use type_ens, only: ens_type
use type_geom, only: geom_type
use type_mpl, only: mpl_type
use type_nam, only: nam_type
@:use_probe()
use type_samp, only: samp_type

implicit none

! Vertical balance block derived type
type vbal_blk_type
   ! Parameters
   integer :: iv                                         !< First variable index
   integer :: jv                                         !< Second variable index
   integer :: nsub                                       !< Number of sub-ensemble
   character(len=1024) :: name                           !< Name

   ! Vertical covariance, subset Sc1
   real(kind_real),allocatable :: full_cov_c1a(:,:,:)    !< Full covariance on subset Sc1, halo A
   real(kind_real),allocatable :: seq_avg_c1a_1(:,:)     !< Sequentially updated mean for first variable on subset Sc1, halo A
   real(kind_real),allocatable :: seq_avg_c1a_2(:,:)     !< Sequentially updated mean for second variable on subset Sc1, halo A
   real(kind_real),allocatable :: seq_cov_c1a(:,:,:)     !< Sequentially updated covariance on subset Sc1, halo A

   ! Vertical balance, subset Sc1
   real(kind_real),allocatable :: cov_c1a(:,:,:)         !< Covariance on subset Sc1, halo A
   real(kind_real),allocatable :: reg_c1a(:,:,:)         !< Regression on subset Sc1, halo A
   real(kind_real),allocatable :: a_c1a(:,:,:)           !< A matrix on subset Sc1, halo A

   ! Vertical balance, subset Sc2
   real(kind_real),allocatable :: cov_c2a(:,:,:)         !< Covariance on subset Sc2, halo A
   real(kind_real),allocatable :: cov_c2b(:,:,:)         !< Covariance on subset Sc2, halo B
   real(kind_real),allocatable :: reg_c2a(:,:,:)         !< Regression on subset Sc2, halo A
   real(kind_real),allocatable :: reg_c2b(:,:,:)         !< Regression on subset Sc2, halo B
   real(kind_real),allocatable :: explained_var_c2a(:,:) !< Explained variance on subset Sc2, halo A
   real(kind_real),allocatable :: explained_var_c2b(:,:) !< Explained variance on subset Sc2, halo B
contains
   procedure :: alloc => vbal_blk_alloc
   procedure :: partial_dealloc => vbal_blk_partial_dealloc
   procedure :: dealloc => vbal_blk_dealloc
   procedure :: cov_update => vbal_blk_cov_update
   procedure :: compute_covariance => vbal_blk_compute_covariance
   procedure :: compute_spatial_average => vbal_blk_compute_spatial_average
   procedure :: compute_regression => vbal_blk_compute_regression
   procedure :: apply => vbal_blk_apply
   procedure :: apply_ad => vbal_blk_apply_ad
end type vbal_blk_type

private
public :: vbal_blk_type

contains

!----------------------------------------------------------------------
! Subroutine: vbal_blk_alloc
!> Allocation
!----------------------------------------------------------------------
subroutine vbal_blk_alloc(vbal_blk,nam,geom,samp,iv,jv)

implicit none

! Passed variables
class(vbal_blk_type),intent(inout) :: vbal_blk !< Vertical balance block
type(nam_type),intent(in) :: nam               !< Namelist
type(geom_type),intent(in) :: geom             !< Geometry
type(samp_type), intent(in) :: samp            !< Sampling
integer,intent(in) :: iv                       !< First variable index
integer,intent(in) :: jv                       !< Second variable index

! Set name
@:set_name(vbal_blk_alloc)

! Probe in
@:probe_in()

! Allocation
if (nam%vbal_block(iv,jv)) allocate(vbal_blk%reg_c2b(geom%nl0,geom%nl0,samp%nc2b))
if (nam%new_vbal) then
   if (nam%vbal_block(iv,jv).or.(iv==jv)) then
      allocate(vbal_blk%cov_c1a(samp%nc1a,geom%nl0,geom%nl0))
      allocate(vbal_blk%cov_c2b(geom%nl0,geom%nl0,samp%nc2b))
   end if
   if (nam%vbal_block(iv,jv)) allocate(vbal_blk%explained_var_c2b(geom%nl0,samp%nc2b))
   if (nam%new_vbal_cov.or.nam%load_vbal_cov) then
      allocate(vbal_blk%a_c1a(geom%nl0,geom%nl0,samp%nc1a))
      allocate(vbal_blk%reg_c1a(geom%nl0,geom%nl0,samp%nc1a))
   end if
end if
if (nam%new_vbal_cov) allocate(vbal_blk%full_cov_c1a(samp%nc1a,geom%nl0,geom%nl0))
if (nam%iterative_algo) then
   allocate(vbal_blk%seq_avg_c1a_1(samp%nc1a,geom%nl0))
   allocate(vbal_blk%seq_avg_c1a_2(samp%nc1a,geom%nl0))
   allocate(vbal_blk%seq_cov_c1a(samp%nc1a,geom%nl0,geom%nl0))
end if

! Probe out
@:probe_out()

end subroutine vbal_blk_alloc

!----------------------------------------------------------------------
! Subroutine: vbal_blk_partial_dealloc
!> Release memory (partial)
!----------------------------------------------------------------------
subroutine vbal_blk_partial_dealloc(vbal_blk)

implicit none

! Passed variables
class(vbal_blk_type),intent(inout) :: vbal_blk !< Vertical balance block

! Set name
@:set_name(vbal_blk_partial_dealloc)

! Probe in
@:probe_in()

! Release memory
if (allocated(vbal_blk%cov_c1a)) deallocate(vbal_blk%cov_c1a)
if (allocated(vbal_blk%full_cov_c1a)) deallocate(vbal_blk%full_cov_c1a)
if (allocated(vbal_blk%reg_c1a)) deallocate(vbal_blk%reg_c1a)
if (allocated(vbal_blk%a_c1a)) deallocate(vbal_blk%a_c1a)
if (allocated(vbal_blk%seq_avg_c1a_1)) deallocate(vbal_blk%seq_avg_c1a_1)
if (allocated(vbal_blk%seq_avg_c1a_2)) deallocate(vbal_blk%seq_avg_c1a_2)
if (allocated(vbal_blk%seq_cov_c1a)) deallocate(vbal_blk%seq_cov_c1a)
if (allocated(vbal_blk%cov_c2a)) deallocate(vbal_blk%cov_c2a)
if (allocated(vbal_blk%cov_c2b)) deallocate(vbal_blk%cov_c2b)
if (allocated(vbal_blk%reg_c2a)) deallocate(vbal_blk%reg_c2a)
if (allocated(vbal_blk%explained_var_c2a)) deallocate(vbal_blk%explained_var_c2a)
if (allocated(vbal_blk%explained_var_c2b)) deallocate(vbal_blk%explained_var_c2b)

! Probe out
@:probe_out()

end subroutine vbal_blk_partial_dealloc

!----------------------------------------------------------------------
! Subroutine: vbal_blk_dealloc
!> Release memory (full)
!----------------------------------------------------------------------
subroutine vbal_blk_dealloc(vbal_blk)

implicit none

! Passed variables
class(vbal_blk_type),intent(inout) :: vbal_blk !< Vertical balance block

! Set name
@:set_name(vbal_blk_dealloc)

! Probe in
@:probe_in()

! Release memory
call vbal_blk%partial_dealloc
if (allocated(vbal_blk%reg_c2b)) deallocate(vbal_blk%reg_c2b)

! Probe out
@:probe_out()

end subroutine vbal_blk_dealloc

!----------------------------------------------------------------------
! Subroutine: vbal_blk_cov_update
!> Update covariance
!----------------------------------------------------------------------
subroutine vbal_blk_cov_update(vbal_blk,mpl,nam,geom,samp,fld_c0a,ie)

implicit none

! Passed variables
class(vbal_blk_type),intent(inout) :: vbal_blk                   !< Vertical balance block
type(mpl_type),intent(inout) :: mpl                              !< MPI data
type(nam_type),intent(in) :: nam                                 !< Namelist
type(geom_type),intent(in) :: geom                               !< Geometry
type(samp_type), intent(in) :: samp                              !< Sampling
real(kind_real),intent(in) :: fld_c0a(geom%nc0a,geom%nl0,nam%nv) !< Field
integer,intent(in) :: ie                                         !< Member index

! Local variables
integer :: isub,ie_sub,ic1a,il0,jl0,il0ic1
real(kind_real) :: fac1,fac2,fac_norm
real(kind_real) :: fld_c0b_1(samp%nc0b,geom%nl0),fld_c0b_2(samp%nc0b,geom%nl0)
real(kind_real) :: fld_c1a_1(samp%nc1a,geom%nl0),fld_c1a_2(samp%nc1a,geom%nl0)

! Set name
@:set_name(vbal_blk_cov_update)

! Probe in
@:probe_in()

! Indices
isub = (ie-1)/(nam%ens1_ne/nam%ens1_nsub)+1
ie_sub = ie-(isub-1)*nam%ens1_ne/nam%ens1_nsub

! Computation factors
fac1 = real(ie_sub-1,kind_real)/real(ie_sub,kind_real)
fac2 = one/real(ie_sub,kind_real)

! Initialization
if (ie==1) vbal_blk%full_cov_c1a = zero
if (ie_sub==1) then
   vbal_blk%seq_avg_c1a_1 = zero
   vbal_blk%seq_avg_c1a_2 = zero
   vbal_blk%seq_cov_c1a = zero
end if

! Halo extension
call samp%com_c0_AB%ext(mpl,fld_c0a(:,:,vbal_blk%iv),fld_c0b_1)
call samp%com_c0_AB%ext(mpl,fld_c0a(:,:,vbal_blk%jv),fld_c0b_2)

! Interpolate fields
fld_c1a_1 = mpl%msv%valr
fld_c1a_2 = mpl%msv%valr
!$omp parallel do schedule(static) private(il0,il0ic1)
do il0=1,geom%nl0
   il0ic1 = samp%l0_to_l0ic1(il0)
   call samp%interp_c0b_to_c1a(il0ic1)%apply(mpl,fld_c0b_1(:,il0),fld_c1a_1(:,il0))
   call samp%interp_c0b_to_c1a(il0ic1)%apply(mpl,fld_c0b_2(:,il0),fld_c1a_2(:,il0))
end do
!$omp end parallel do

! Remove mean
fld_c1a_1 = fld_c1a_1-vbal_blk%seq_avg_c1a_1
fld_c1a_2 = fld_c1a_2-vbal_blk%seq_avg_c1a_2

! Update covariance
!$omp parallel do schedule(static) private(il0,jl0)
do il0=1,geom%nl0
   do jl0=1,geom%nl0
      vbal_blk%seq_cov_c1a(:,jl0,il0) = vbal_blk%seq_cov_c1a(:,jl0,il0)+fac1*fld_c1a_1(:,jl0)*fld_c1a_2(:,il0)
   end do
end do
!$omp end parallel do

! Update mean
vbal_blk%seq_avg_c1a_1 = vbal_blk%seq_avg_c1a_1+fac2*fld_c1a_1
vbal_blk%seq_avg_c1a_2 = vbal_blk%seq_avg_c1a_2+fac2*fld_c1a_2

! Average covariances
if (ie_sub==nam%ens1_ne/nam%ens1_nsub) vbal_blk%full_cov_c1a = vbal_blk%full_cov_c1a+vbal_blk%seq_cov_c1a

if (ie==nam%ens1_ne) then
   ! Normalization
   fac_norm = one/real(nam%ens1_ne-nam%ens1_nsub,kind_real)
   !$omp parallel do schedule(static) private(il0,jl0,ic1a)
   do il0=1,geom%nl0
      do jl0=1,geom%nl0
         do ic1a=1,samp%nc1a
            if (samp%smask_c1a(ic1a,il0).and.samp%smask_c1a(ic1a,jl0)) then
               vbal_blk%full_cov_c1a(ic1a,jl0,il0) = vbal_blk%full_cov_c1a(ic1a,jl0,il0)*fac_norm
            else
               vbal_blk%full_cov_c1a(ic1a,jl0,il0) = mpl%msv%valr
            end if
         end do
      end do
   end do
   !$omp end parallel do
end if

! Probe out
@:probe_out()

end subroutine vbal_blk_cov_update

!----------------------------------------------------------------------
! Subroutine: vbal_blk_compute_covariance
!> Compute covariance
!----------------------------------------------------------------------
subroutine vbal_blk_compute_covariance(vbal_blk,mpl,nam,geom,samp,ens1,ens2)

implicit none

! Passed variables
class(vbal_blk_type),intent(inout) :: vbal_blk !< Vertical balance block
type(mpl_type),intent(inout) :: mpl            !< MPI data
type(nam_type), intent(in) :: nam              !< Namelist
type(geom_type),intent(in) :: geom             !< Geometry
type(samp_type), intent(in) :: samp            !< Sampling
type(ens_type), intent(in) :: ens1             !< Ensemble 1
type(ens_type), intent(in),optional :: ens2    !< Ensemble 2 (if present, fill cov_c1a; if not, fill full_cov_c1a)

! Local variables
integer :: isub,ie_sub,ie,il0,il0ic1,jl0,ic1a
real(kind_real) :: fac_norm
real(kind_real) :: fld_c0a_1(geom%nc0a,geom%nl0),fld_c0a_2(geom%nc0a,geom%nl0)
real(kind_real) :: fld_c0b_1(samp%nc0b,geom%nl0),fld_c0b_2(samp%nc0b,geom%nl0)
real(kind_real) :: fld_c1a_1(samp%nc1a,geom%nl0),fld_c1a_2(samp%nc1a,geom%nl0)
real(kind_real) :: cov(samp%nc1a,geom%nl0,geom%nl0,vbal_blk%nsub)

! Set name
@:set_name(vbal_blk_compute_covariance)

! Probe in
@:probe_in()

! Initialization
cov = zero

! Loop on sub-ensembles
do isub=1,vbal_blk%nsub
   if (vbal_blk%nsub==1) then
      write(mpl%info,'(a10,a)') '','Full ensemble, member:'
      call mpl%flush(newl=.false.)
   else
      write(mpl%info,'(a10,a,i6,a)') '','Sub-ensemble ',isub,', member:'
      call mpl%flush(newl=.false.)
   end if

   ! Compute centered moments
   do ie_sub=1,ens1%ne/vbal_blk%nsub
      write(mpl%info,'(i6)') ie_sub
      call mpl%flush(newl=.false.)

      ! Full ensemble index
      ie = ie_sub+(isub-1)*ens1%ne/vbal_blk%nsub

      ! Get perturbation on subset Sc0
      call ens1%get_c0(mpl,vbal_blk%iv,geom,'pert',ie,fld_c0a_1)
      if (present(ens2)) then
         call ens2%get_c0(mpl,vbal_blk%jv,geom,'pert',ie,fld_c0a_2)
      else
         call ens1%get_c0(mpl,vbal_blk%jv,geom,'pert',ie,fld_c0a_2)
      end if

      ! Halo extension
      call samp%com_c0_AB%ext(mpl,fld_c0a_1,fld_c0b_1)
      call samp%com_c0_AB%ext(mpl,fld_c0a_2,fld_c0b_2)

      ! Interpolate fields
      fld_c1a_1 = mpl%msv%valr
      fld_c1a_2 = mpl%msv%valr
      !$omp parallel do schedule(static) private(il0,il0ic1)
      do il0=1,geom%nl0
         il0ic1 = samp%l0_to_l0ic1(il0)
         call samp%interp_c0b_to_c1a(il0ic1)%apply(mpl,fld_c0b_1(:,il0),fld_c1a_1(:,il0))
         call samp%interp_c0b_to_c1a(il0ic1)%apply(mpl,fld_c0b_2(:,il0),fld_c1a_2(:,il0))
      end do
      !$omp end parallel do

      ! Compute covariance
      !$omp parallel do schedule(static) private(il0,jl0,ic1a)
      do il0=1,geom%nl0
         do jl0=1,geom%nl0
            do ic1a=1,samp%nc1a
               if (samp%smask_c1a(ic1a,il0).and.samp%smask_c1a(ic1a,jl0)) cov(ic1a,jl0,il0,isub) = cov(ic1a,jl0,il0,isub) &
 & +fld_c1a_1(ic1a,jl0)*fld_c1a_2(ic1a,il0)
            end do
         end do
      end do
      !$omp end parallel do
   end do
   write(mpl%info,'(a)') ''
   call mpl%flush
end do

! Normalization
fac_norm = real(ens1%nsub,kind_real)/real(ens1%ne-ens1%nsub,kind_real)
!$omp parallel do schedule(static) private(il0,jl0,ic1a)
do il0=1,geom%nl0
   do jl0=1,geom%nl0
      do ic1a=1,samp%nc1a
         if (samp%smask_c1a(ic1a,il0).and.samp%smask_c1a(ic1a,jl0)) then
            cov(ic1a,jl0,il0,:) = cov(ic1a,jl0,il0,:)*fac_norm
         else
            cov(ic1a,jl0,il0,:) = mpl%msv%valr
         end if
      end do
   end do
end do
!$omp end parallel do

! Average covariances
do il0=1,geom%nl0
   do jl0=1,geom%nl0
      do ic1a=1,samp%nc1a
         if (nam%new_vbal_cov.or.nam%load_vbal_cov) then
            vbal_blk%full_cov_c1a(ic1a,jl0,il0) = sum(cov(ic1a,jl0,il0,:))/real(vbal_blk%nsub,kind_real)
         else
            vbal_blk%cov_c1a(ic1a,jl0,il0) = sum(cov(ic1a,jl0,il0,:))/real(vbal_blk%nsub,kind_real)
         end if
      end do
   end do
end do

! Probe out
@:probe_out()

end subroutine vbal_blk_compute_covariance

!----------------------------------------------------------------------
! Subroutine: vbal_blk_compute_spatial_average
!> Compute spatial average
!----------------------------------------------------------------------
subroutine vbal_blk_compute_spatial_average(vbal_blk,mpl,nam,geom,samp)

implicit none

! Passed variables
class(vbal_blk_type),intent(inout) :: vbal_blk !< Vertical balance block
type(mpl_type),intent(inout) :: mpl            !< MPI data
type(nam_type), intent(in) :: nam              !< Namelist
type(geom_type),intent(in) :: geom             !< Geometry
type(samp_type),intent(in) :: samp             !< Sampling

! Local variables
integer :: i,jl0,il0,ic1e,ic1u,nc1e,nc1max,ic1a,ic2a,ic2b
real(kind_real) :: cov_c1a_pack(samp%nc1a,geom%nl0**2)
real(kind_real) :: cov_c1e(samp%nc1e,geom%nl0,geom%nl0)
real(kind_real) :: cov_c1e_pack(samp%nc1e,geom%nl0**2)
real(kind_real),allocatable :: list_cov(:),cov_c2a(:),cov_c2b(:)

! Set name
@:set_name(vbal_blk_compute_spatial_average)

! Probe in
@:probe_in()

! Pack data in halo A
do ic1a=1,samp%nc1a
   cov_c1a_pack(ic1a,:) = reshape(vbal_blk%cov_c1a(ic1a,:,:),(/geom%nl0**2/))
end do

! Halo extension
call samp%com_c1_AE%ext(mpl,cov_c1a_pack,cov_c1e_pack)

! Unpack data in halo E
do ic1e=1,samp%nc1e
   cov_c1e(ic1e,:,:) = reshape(cov_c1e_pack(ic1e,:),(/geom%nl0,geom%nl0/))
end do

! Initialization
vbal_blk%cov_c2b = zero
call mpl%prog_init(samp%nc2b)

do ic2b=1,samp%nc2b
   ! Allocation
   nc1max = zss_count(samp%vbal_mask(:,ic2b))
   allocate(list_cov(nc1max))

   do il0=1,geom%nl0
      do jl0=1,geom%nl0
         ! Initialization
         list_cov = mpl%msv%valr

         ! Fill lists
         i = 0
         do ic1e=1,samp%nc1e
            ! Index
            ic1u = samp%c1e_to_c1u(ic1e)
            if (samp%smask_c1u(ic1u,il0).and.samp%smask_c1u(ic1u,jl0).and.samp%vbal_mask(ic1u,ic2b)) then
               ! Update
               i = i+1

               ! Averages over sub-ensembles
               list_cov(i) = cov_c1e(ic1e,jl0,il0)
            end if
         end do

         ! Average
         nc1e = count(mpl%msv%isnot(list_cov))
         if (nc1e>0) then
            vbal_blk%cov_c2b(jl0,il0,ic2b) = sum(list_cov,mask=mpl%msv%isnot(list_cov))/real(nc1e,kind_real)
         else
            vbal_blk%cov_c2b(jl0,il0,ic2b) = mpl%msv%valr
         end if
      end do
   end do

   ! Release memory
   deallocate(list_cov)

   ! Update
   call mpl%prog_print(ic2b)
end do
call mpl%prog_final

! Filter covariance
if (nam%diag_rhflt>zero) then
   ! Allocation
   allocate(cov_c2a(samp%nc2a))
   allocate(cov_c2b(samp%nc2b))

   do il0=1,geom%nl0
      do jl0=1,geom%nl0
         ! Copy halo A
         do ic2a=1,samp%nc2a
            ic2b = samp%c2a_to_c2b(ic2a)
            cov_c2a(ic2a) = vbal_blk%cov_c2b(jl0,il0,ic2b)
         end do

         ! Filter
         call samp%diag_filter(mpl,'median',nam%diag_rhflt,cov_c2a)
         call samp%diag_filter(mpl,'average',nam%diag_rhflt,cov_c2a)

         ! Extend to halo B
         call samp%com_c2_AB%ext(mpl,cov_c2a,cov_c2b)

         ! Copy halo B
         vbal_blk%cov_c2b(jl0,il0,:) = cov_c2b
      end do
   end do

   ! Release memory
   deallocate(cov_c2a)
   deallocate(cov_c2b)
end if

! Probe out
@:probe_out()

end subroutine vbal_blk_compute_spatial_average

!----------------------------------------------------------------------
! Subroutine: vbal_blk_compute_regression
!> Compute regression
!----------------------------------------------------------------------
subroutine vbal_blk_compute_regression(vbal_blk,mpl,nam,geom,samp,auto_c2b,cross_c2b)

implicit none

! Passed variables
class(vbal_blk_type),intent(inout) :: vbal_blk                       !< Vertical balance block
type(mpl_type),intent(inout) :: mpl                                  !< MPI data
type(nam_type), intent(in) :: nam                                    !< Namelist
type(geom_type),intent(in) :: geom                                   !< Geometry
type(samp_type), intent(in) :: samp                                  !< Sampling
real(kind_real),intent(in) :: auto_c2b(geom%nl0,geom%nl0,samp%nc2b)  !< Auto-covariance on subset Sc2, halo B
real(kind_real),intent(in) :: cross_c2b(geom%nl0,geom%nl0,samp%nc2b) !< Cross-covariance on subset Sc2, halo B

! Local variables
integer :: ic2b,il0,jl0
real(kind_real) :: cross_eff(geom%nl0,geom%nl0),auto_inv(geom%nl0,geom%nl0),explained_cov(geom%nl0,geom%nl0)
real(kind_real),allocatable :: fld_c1a(:),fld_c2b(:)
logical :: valid

! Set name
@:set_name(vbal_blk_compute_regression)

! Probe in
@:probe_in()

! Initialization
call mpl%prog_init(samp%nc2b)

do ic2b=1,samp%nc2b
   ! Check if this column is valid (no missing values, positive diagonal for auto-covariance)
   valid = mpl%msv%isallnot(auto_c2b(:,:,ic2b)).and.mpl%msv%isallnot(cross_c2b(:,:,ic2b))
   do il0=1,geom%nl0
      if (.not.(auto_c2b(il0,il0,ic2b)>zero)) valid = .false.
   end do

   if (valid) then
      ! Compute effective cross-covariance
      if (nam%vbal_diag_reg(vbal_blk%iv,vbal_blk%jv)) then
         ! Keep diagonal coefficients only
         cross_eff = zero
         do il0=1,geom%nl0
            cross_eff(il0,il0) = cross_c2b(il0,il0,ic2b)
         end do
      else
         ! Copy all coefficients
         cross_eff = cross_c2b(:,:,ic2b)
      end if

      ! Compute effective auto-coariance inverse
      if (nam%vbal_diag_auto(vbal_blk%iv,vbal_blk%jv).or.nam%vbal_diag_reg(vbal_blk%iv,vbal_blk%jv)) then
         ! Diagonal auto-covariance inversion
         auto_inv = zero
         do il0=1,geom%nl0
            auto_inv(il0,il0) = one/auto_c2b(il0,il0,ic2b)
         end do
      else
         ! Full auto-covariance inversion
         if (nam%vbal_pseudo_inv) then
            if (nam%vbal_pseudo_inv_mmax>0) then
               call pseudoinv(mpl,geom%nl0,auto_c2b(:,:,ic2b),auto_inv,mmax=nam%vbal_pseudo_inv_mmax)
            elseif (nam%vbal_pseudo_inv_var_th>zero) then
               call pseudoinv(mpl,geom%nl0,auto_c2b(:,:,ic2b),auto_inv,var_th=nam%vbal_pseudo_inv_var_th)
            end if
         else
            call syminv(mpl,geom%nl0,auto_c2b(:,:,ic2b),auto_inv)
         end if
      end if

      ! Compute the regression
      vbal_blk%reg_c2b(:,:,ic2b) = matmul(cross_eff,auto_inv)
   else
      ! No regression
      vbal_blk%reg_c2b(:,:,ic2b) = zero
   end if

   ! Compute explained variance
   explained_cov = matmul(vbal_blk%reg_c2b(:,:,ic2b),matmul(auto_c2b(:,:,ic2b),transpose(vbal_blk%reg_c2b(:,:,ic2b))))
   do il0=1,geom%nl0
      vbal_blk%explained_var_c2b(il0,ic2b) = explained_cov(il0,il0)
   end do

   ! Update
   call mpl%prog_print(ic2b)
end do
call mpl%prog_final

if (nam%new_vbal_cov.or.nam%load_vbal_cov) then
   ! Allocation
   allocate(fld_c1a(samp%nc1a))
   allocate(fld_c2b(samp%nc2b))

   ! Interpolate regression
   do il0=1,geom%nl0
      do jl0=1,geom%nl0
         fld_c2b = vbal_blk%reg_c2b(jl0,il0,:)
         call samp%interp_c2b_to_c1a%apply(mpl,fld_c2b,fld_c1a)
         vbal_blk%reg_c1a(jl0,il0,:) = fld_c1a
      end do
   end do

   ! Release memory
   deallocate(fld_c1a)
   deallocate(fld_c2b)
end if

! Probe out
@:probe_out()

end subroutine vbal_blk_compute_regression

!----------------------------------------------------------------------
! Subroutine: vbal_blk_apply
!> Apply vertical balance block
!----------------------------------------------------------------------
subroutine vbal_blk_apply(vbal_blk,geom,h_n_s_max,h_n_s,h_c2b,h_S,fld)

implicit none

! Passed variables
class(vbal_blk_type),intent(in) :: vbal_blk                      !< Vertical balance block
type(geom_type),intent(in) :: geom                               !< Geometry
integer,intent(in) :: h_n_s_max                                  !< Maximum number of neigbors
integer,intent(in) :: h_n_s(geom%nc0a,geom%nl0i)                 !< Number of neighbors for the horizontal interpolation
integer,intent(in) :: h_c2b(h_n_s_max,geom%nc0a,geom%nl0i)       !< Index of neighbors for the horizontal interpolation
real(kind_real),intent(in) :: h_S(h_n_s_max,geom%nc0a,geom%nl0i) !< Weight of neighbors for the horizontal interpolation
real(kind_real),intent(inout) :: fld(geom%nc0a,geom%nl0)         !< Source/destination vector

! Local variables
integer :: ic0a,il0,il0i,jl0,i_s,ic2b
real(kind_real) :: S,fld_tmp(geom%nc0a,geom%nl0)

! Set name
@:set_name(vbal_blk_apply)

! Probe in
@:probe_in()

! Initialization
fld_tmp = zero

do ic0a=1,geom%nc0a
   do il0=1,geom%nl0
      ! Independent level
      il0i = geom%l0_to_l0i(il0)

      ! Loop over neighbors
      do i_s=1,h_n_s(ic0a,il0i)
         ! Find neighbor index and weight
         ic2b = h_c2b(i_s,ic0a,il0i)
         S = h_S(i_s,ic0a,il0i)

         ! Apply regression coefficient weighted by the neighbor weight
         do jl0=1,geom%nl0
            fld_tmp(ic0a,il0) = fld_tmp(ic0a,il0)+S*vbal_blk%reg_c2b(il0,jl0,ic2b)*fld(ic0a,jl0)
         end do
      end do
   end do
end do

! Final copy
fld = fld_tmp

! Probe out
@:probe_out()

end subroutine vbal_blk_apply

!----------------------------------------------------------------------
! Subroutine: vbal_blk_apply_ad
!> Apply adjoint vertical balance block
!----------------------------------------------------------------------
subroutine vbal_blk_apply_ad(vbal_blk,geom,h_n_s_max,h_n_s,h_c2b,h_S,fld)

implicit none

! Passed variables
class(vbal_blk_type),intent(in) :: vbal_blk                      !< Vertical balance block
type(geom_type),intent(in) :: geom                               !< Geometry
integer,intent(in) :: h_n_s_max                                  !< Maximum number of neigbors
integer,intent(in) :: h_n_s(geom%nc0a,geom%nl0i)                 !< Number of neighbors for the horizontal interpolation
integer,intent(in) :: h_c2b(h_n_s_max,geom%nc0a,geom%nl0i)       !< Index of neighbors for the horizontal interpolation
real(kind_real),intent(in) :: h_S(h_n_s_max,geom%nc0a,geom%nl0i) !< Weight of neighbors for the horizontal interpolation
real(kind_real),intent(inout) :: fld(geom%nc0a,geom%nl0)         !< Source/destination vector

! Local variables
integer :: ic0a,il0,il0i,jl0,i_s,ic2b
real(kind_real) :: S,fld_tmp(geom%nc0a,geom%nl0)

! Set name
@:set_name(vbal_blk_apply_ad)

! Probe in
@:probe_in()

! Initialization
fld_tmp = zero

do ic0a=1,geom%nc0a
   do il0=1,geom%nl0
      ! Independent level
      il0i = geom%l0_to_l0i(il0)

      ! Loop over neighbors
      do i_s=1,h_n_s(ic0a,il0i)
         ! Find neighbor index and weight
         ic2b = h_c2b(i_s,ic0a,il0i)
         S = h_S(i_s,ic0a,il0i)

         ! Apply regression coefficient weighted by the neighbor weight
         do jl0=1,geom%nl0
            fld_tmp(ic0a,jl0) = fld_tmp(ic0a,jl0)+S*vbal_blk%reg_c2b(il0,jl0,ic2b)*fld(ic0a,il0)
         end do
      end do
   end do
end do

! Final copy
fld = fld_tmp

! Probe out
@:probe_out()

end subroutine vbal_blk_apply_ad

end module type_vbal_blk
