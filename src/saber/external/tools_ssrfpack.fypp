#:include '../instrumentation.fypp'
!----------------------------------------------------------------------
! Module: tools_ssrfpack
!> SSRFPACK routines
! Source: https://dl.acm.org/doi/abs/10.1145/27532three275330
! Author: Robert Renka
! Original licensing: none
! Modified by Benjamin Menetrier for BUMP
! Licensing: this code is distributed under the CeCILL-C license
! Copyright 2015-... UCAR, CERFACS, METEO-FRANCE and IRIT
!----------------------------------------------------------------------
module tools_ssrfpack

use tools_const, only: zero,one,two,three,four,six,pi
use tools_kinds, only: kind_real
use tools_repro, only: supeq
use type_mpl, only: mpl_type
@:use_probe()

implicit none

interface aplyr
   module procedure ssrfpack_aplyr
end interface
interface arcint
   module procedure ssrfpack_arcint
end interface
interface arclen
   module procedure ssrfpack_arclen
end interface
interface constr
   module procedure ssrfpack_constr
end interface
interface fval
   module procedure ssrfpack_fval
end interface

private
public :: aplyr,constr,fval

contains

!----------------------------------------------------------------------
! Subroutine: ssrfpack_aplyr
!> Apply the rotation R defined by CONSTR to a unit vector
!----------------------------------------------------------------------
subroutine ssrfpack_aplyr(mpl,x,y,z,cx,sx,cy,sy,xp,yp,zp)

implicit none

! Passed variables
type(mpl_type),intent(inout) :: mpl !< MPI data
real(kind_real),intent(in) :: x     !< X-coordinate of the vector
real(kind_real),intent(in) :: y     !< Y-coordinate of the vector
real(kind_real),intent(in) :: z     !< Z-coordinate of the vector
real(kind_real),intent(in) :: cx    !< Element of the rotation matrix
real(kind_real),intent(in) :: sx    !< Element of the rotation matrix
real(kind_real),intent(in) :: cy    !< Element of the rotation matrix
real(kind_real),intent(in) :: sy    !< Element of the rotation matrix
real(kind_real),intent(out) :: xp   !< X-coordinate of the rotated vector
real(kind_real),intent(out) :: yp   !< Y-coordinate of the rotated vector
real(kind_real),intent(out) :: zp   !< Z-coordinate of the rotated vector

! Local variables
real(kind_real) :: t

! Set name
@:set_name(ssrfpack_aplyr)

! Probe in
@:probe_in()

! Apply rotation
t = sx*y+cx*z
xp = cy*x-sy*t
yp = cx*y-sx*z
zp = sy*x+cy*t

! Check zp
if (zp<zero) call mpl%abort('${subr}$','rotated point under the equator')

! Probe out
@:probe_out()

end subroutine ssrfpack_aplyr

!----------------------------------------------------------------------
! Subroutine: stripack_arcint
!> Compute weights to interpolate value f and gradient vector g at p, between p1 and p2
!----------------------------------------------------------------------
subroutine ssrfpack_arcint(mpl,p,p1,p2,a,al,bb1,bb2,un,unorm)

implicit none

! Passed variables
type(mpl_type),intent(inout) :: mpl  !< MPI data
real(kind_real),intent(in) :: p(3)   !< Interpolation point
real(kind_real),intent(in) :: p1(3)  !< First vertex
real(kind_real),intent(in) :: p2(3)  !< Second vertex
real(kind_real),intent(out) :: a     !< Interpolation coefficient
real(kind_real),intent(out) :: al    !< Interpolation coefficient
real(kind_real),intent(out) :: bb1   !< Interpolation coefficient
real(kind_real),intent(out) :: bb2   !< Interpolation coefficient
real(kind_real),intent(out) :: un(3) !< Interpolation coefficient
real(kind_real),intent(out) :: unorm !< Interpolation coefficient

! Set name
@:set_name(ssrfpack_arcint)

! Probe in
@:probe_in()

! Compute un
un(1) = p1(2)*p2(3)-p1(3)*p2(2)
un(2) = p1(3)*p2(1)-p1(1)*p2(3)
un(3) = p1(1)*p2(2)-p1(2)*p2(1)

! Compute unorm
unorm = sqrt(un(1)**2+un(2)**2+un(3)**2)
if (.not.(unorm>zero)) call mpl%abort('${subr}$','unorm is not positive')

! Normalize un
un = un/unorm

! Compute first arc-length
a = arclen(p1,p2)
if (.not.(a>zero)) call mpl%abort('${subr}$','arc length is not positive')

! Compute second arc-length
al = arclen(p1,p)

! Factors
bb2 = al/a
bb1 = one-bb2

! Probe out
@:probe_out()

end subroutine ssrfpack_arcint

!----------------------------------------------------------------------
! Subroutine: ssrfpack_arclen
!> Compute the arc-length between a pair of points on the unit sphere
!----------------------------------------------------------------------
function ssrfpack_arclen(p,q) result(al)

implicit none

! Passed variables
real(kind_real),intent(in) :: p(3) !< First point
real(kind_real),intent(in) :: q(3) !< Second point

! Returned variable
real(kind_real) :: al

! Local variables
integer :: i
real(kind_real) :: d

! Initialization
d = zero
do i=1,3
  d = d+(p(i)+q(i))**2
end do
if (.not.(d>zero)) then
   ! p and q are separated by 180 degrees
   al = pi
elseif (supeq(d,four)) then
   ! p and q coincide
   al = zero
else
   al = two*atan(sqrt((four-d)/d))
end if

! Probe out
@:probe_out()

end function ssrfpack_arclen

!----------------------------------------------------------------------
! Subroutine: ssrfpack_constr
!> Compute the elements of a 3 by 3 orthogonal matrix R
!----------------------------------------------------------------------
subroutine ssrfpack_constr(xk,yk,zk,cx,sx,cy,sy)

implicit none

! Passed variables
real(kind_real),intent(in) :: xk  !< X-component of the unit vector
real(kind_real),intent(in) :: yk  !< Y-component of the unit vector
real(kind_real),intent(in) :: zk  !< Z-component of the unit vector
real(kind_real),intent(out) :: cx !< Element of the rotation matrix
real(kind_real),intent(out) :: sx !< Element of the rotation matrix
real(kind_real),intent(out) :: cy !< Element of the rotation matrix
real(kind_real),intent(out) :: sy !< Element of the rotation matrix

! Set name
@:set_name(ssrfpack_aplyr)

! Probe in
@:probe_in()

! Compute elements
cy = sqrt(yk**2+zk**2)
sy = xk
if (cy>zero) then
   ! (xk,yk,zk) does not lie on the X-axis
   cx = zk/cy
   sx = yk/cy
else
   ! (xk,yk,zk) lies on the X-axis
   cx = one
   sx = zero
end if

! Probe out
@:probe_out()

end subroutine ssrfpack_constr

!----------------------------------------------------------------------
! Subroutine: ssrfpack_fval
!> Compute the C1 interpolation weights
!----------------------------------------------------------------------
subroutine ssrfpack_fval(mpl,b1,b2,b3,v1,v2,v3,af,ag)

implicit none

! Passed variables
type(mpl_type),intent(inout) :: mpl    !< MPI data
real(kind_real),intent(in) :: b1       !< First vertex barycentric weight
real(kind_real),intent(in) :: b2       !< Second vertex barycentric weight
real(kind_real),intent(in) :: b3       !< Third vertex barycentric weight
real(kind_real),intent(in) :: v1(3)    !< First vertex barycentric coordinates
real(kind_real),intent(in) :: v2(3)    !< Second vertex barycentric coordinates
real(kind_real),intent(in) :: v3(3)    !< Third vertex barycentric coordinates
real(kind_real),intent(out) :: af(3)   !< Function weights
real(kind_real),intent(out) :: ag(3,3) !< Gradient weights

! Local variables
integer :: i
real(kind_real) :: c1,c2,c3,csum,s1,s2,s3,u1n,u2n,u3n
real(kind_real) :: a(3),al(3),bb1(3),bb2(3),q1(3),q2(3),q3(3),u1(3),u2(3),u3(3),un(3,3),unorm(3)

! Set name
@:set_name(ssrfpack_aplyr)

! Probe in
@:probe_in()

! Compute c1, c2 and c3
c1 = b2*b3
c2 = b3*b1
c3 = b1*b2
csum = c1+c2+c3

if (.not.(csum>zero)) then
   ! p coincides with a vertex
   af = (/b1,b2,b3/)
   ag = zero
else
   ! Normalize c1, c2, and c3
   c1 = c1/csum
   c2 = c2/csum
   c3 = c3/csum

   ! Compute (s1,s2,s3), (u1,u2,u3) and (u1n,u2n,u3n)
   s1 = b2 + b3
   s2 = b3 + b1
   s3 = b1 + b2
   u1n = zero
   u2n = zero
   u3n = zero
   do i=1,3
      u1(i) = (b2*v2(i)+b3*v3(i))/s1
      u2(i) = (b3*v3(i)+b1*v1(i))/s2
      u3(i) = (b1*v1(i)+b2*v2(i))/s3
      u1n = u1n+u1(i)*u1(i)
      u2n = u2n+u2(i)*u2(i)
      u3n = u3n+u3(i)*u3(i)
   end do

   ! Compute q1, q2, and q3
   u1n = sqrt(u1n)
   u2n = sqrt(u2n)
   u3n = sqrt(u3n)
   do i=1,3
      q1(i) = u1(i)/u1n
      q2(i) = u2(i)/u2n
      q3(i) = u3(i)/u3n
   end do

   ! Compute arc interpolation weights
   call arcint(mpl,q1,v2,v3,a(1),al(1),bb1(1),bb2(1),un(:,1),unorm(1))
   call arcint(mpl,q2,v3,v1,a(2),al(2),bb1(2),bb2(2),un(:,2),unorm(2))
   call arcint(mpl,q3,v1,v2,a(3),al(3),bb1(3),bb2(3),un(:,3),unorm(3))

   ! Compute function weights
   af(1) = &
 & +c1*b1**2*(three-two*b1) &
 & +c2*(one-b2)**2*(one+two*b2)*al(2)/a(2)*bb2(2)*(one+two*bb1(2)) &
 & +c2*(one-b2)**2*b2/u2n*v2(1)*(un(2,2)*q2(3)-un(3,2)*q2(2))*six*bb1(2)*bb2(2)/a(2) &
 & +c2*(one-b2)**2*b2/u2n*v2(2)*(un(3,2)*q2(1)-un(1,2)*q2(3))*six*bb1(2)*bb2(2)/a(2) &
 & +c2*(one-b2)**2*b2/u2n*v2(3)*(un(1,2)*q2(2)-un(2,2)*q2(1))*six*bb1(2)*bb2(2)/a(2) &
 & +c3*(one-b3)**2*(one+two*b3)*(one-al(3)/a(3)*bb2(3)*(one+two*bb1(3))) &
 & -c3*(one-b3)**2*b3/u3n*v3(1)*(un(2,3)*q3(3)-un(3,3)*q3(2))*six*bb1(3)*bb2(3)/a(3) &
 & -c3*(one-b3)**2*b3/u3n*v3(2)*(un(3,3)*q3(1)-un(1,3)*q3(3))*six*bb1(3)*bb2(3)/a(3) &
 & -c3*(one-b3)**2*b3/u3n*v3(3)*(un(1,3)*q3(2)-un(2,3)*q3(1))*six*bb1(3)*bb2(3)/a(3)
   af(2) = &
 & +c1*(one-b1)**2*(one+two*b1)*(one-al(1)/a(1)*bb2(1)*(one+two*bb1(1))) &
 & -c1*(one-b1)**2*b1/u1n*v1(1)*(un(2,1)*q1(3)-un(3,1)*q1(2))*six*bb1(1)*bb2(1)/a(1) &
 & -c1*(one-b1)**2*b1/u1n*v1(2)*(un(3,1)*q1(1)-un(1,1)*q1(3))*six*bb1(1)*bb2(1)/a(1) &
 & -c1*(one-b1)**2*b1/u1n*v1(3)*(un(1,1)*q1(2)-un(2,1)*q1(1))*six*bb1(1)*bb2(1)/a(1) &
 & +c2*b2**2*(three-two*b2) &
 & +c3*(one-b3)**2*(one+two*b3)*al(3)/a(3)*bb2(3)*(one+two*bb1(3)) &
 & +c3*(one-b3)**2*b3/u3n*v3(1)*(un(2,3)*q3(3)-un(3,3)*q3(2))*six*bb1(3)*bb2(3)/a(3) &
 & +c3*(one-b3)**2*b3/u3n*v3(2)*(un(3,3)*q3(1)-un(1,3)*q3(3))*six*bb1(3)*bb2(3)/a(3) &
 & +c3*(one-b3)**2*b3/u3n*v3(3)*(un(1,3)*q3(2)-un(2,3)*q3(1))*six*bb1(3)*bb2(3)/a(3)
   af(3) = &
 & +c1*(one-b1)**2*(one+two*b1)*al(1)/a(1)*bb2(1)*(one+two*bb1(1)) &
 & +c1*(one-b1)**2*b1/u1n*v1(1)*(un(2,1)*q1(3)-un(3,1)*q1(2))*six*bb1(1)*bb2(1)/a(1) &
 & +c1*(one-b1)**2*b1/u1n*v1(2)*(un(3,1)*q1(1)-un(1,1)*q1(3))*six*bb1(1)*bb2(1)/a(1) &
 & +c1*(one-b1)**2*b1/u1n*v1(3)*(un(1,1)*q1(2)-un(2,1)*q1(1))*six*bb1(1)*bb2(1)/a(1) &
 & +c2*(one-b2)**2*(one+two*b2)*(one-al(2)/a(2)*bb2(2)*(one+two*bb1(2))) &
 & -c2*(one-b2)**2*b2/u2n*v2(1)*(un(2,2)*q2(3)-un(3,2)*q2(2))*six*bb1(2)*bb2(2)/a(2) &
 & -c2*(one-b2)**2*b2/u2n*v2(2)*(un(3,2)*q2(1)-un(1,2)*q2(3))*six*bb1(2)*bb2(2)/a(2) &
 & -c2*(one-b2)**2*b2/u2n*v2(3)*(un(1,2)*q2(2)-un(2,2)*q2(1))*six*bb1(2)*bb2(2)/a(2) &
 & +c3*b3**2*(three-two*b3)

   ! Compute gradient weights
   ag(1,1) = &
 & +c1*(one-b1)*b1**2*u1(1) &
 & +c2*(one-b2)**2*(one+two*b2)*al(2)*bb2(2)*bb1(2)*v3(1)/unorm(2) &
 & +c2*(one-b2)**2*b2/u2n*v2(1)*(un(1,2)*bb2(2)*un(1,2)+(un(2,2)*q2(3) &
 & -un(3,2)*q2(2))*(three*bb2(2)*bb1(2)-bb2(2))*v3(1)/unorm(2)) &
 & +c2*(one-b2)**2*b2/u2n*v2(2)*(un(2,2)*bb2(2)*un(1,2)+(un(3,2)*q2(1) &
 & -un(1,2)*q2(3))*(three*bb2(2)*bb1(2)-bb2(2))*v3(1)/unorm(2)) &
 & +c2*(one-b2)**2*b2/u2n*v2(3)*(un(3,2)*bb2(2)*un(1,2)+(un(1,2)*q2(2) &
 & -un(2,2)*q2(1))*(three*bb2(2)*bb1(2)-bb2(2))*v3(1)/unorm(2)) &
 & +c3*(one-b3)**2*(one+two*b3)*al(3)*(one-bb2(3)*(one+bb1(3)))*v2(1)/unorm(3) &
 & +c3*(one-b3)**2*b3/u3n*v3(1)*(un(1,3)*bb1(3)*un(1,3)+(un(2,3)*q3(3) &
 & -un(3,3)*q3(2))*(one-bb2(3)-three*bb1(3)*bb2(3))*v2(1)/unorm(3)) &
 & +c3*(one-b3)**2*b3/u3n*v3(2)*(un(2,3)*bb1(3)*un(1,3)+(un(3,3)*q3(1) &
 & -un(1,3)*q3(3))*(one-bb2(3)-three*bb1(3)*bb2(3))*v2(1)/unorm(3)) &
 & +c3*(one-b3)**2*b3/u3n*v3(3)*(un(3,3)*bb1(3)*un(1,3)+(un(1,3)*q3(2) &
 & -un(2,3)*q3(1))*(one-bb2(3)-three*bb1(3)*bb2(3))*v2(1)/unorm(3))
   ag(2,1) = &
 & +c1*(one-b1)*b1**2*u1(2) &
 & +c2*(one-b2)**2*(one+two*b2)*al(2)*bb2(2)*bb1(2)*v3(2)/unorm(2) &
 & +c2*(one-b2)**2*b2/u2n*v2(1)*(un(1,2)*bb2(2)*un(2,2)+(un(2,2)*q2(3) &
 & -un(3,2)*q2(2))*(three*bb2(2)*bb1(2)-bb2(2))*v3(2)/unorm(2)) &
 & +c2*(one-b2)**2*b2/u2n*v2(2)*(un(2,2)*bb2(2)*un(2,2)+(un(3,2)*q2(1) &
 & -un(1,2)*q2(3))*(three*bb2(2)*bb1(2)-bb2(2))*v3(2)/unorm(2)) &
 & +c2*(one-b2)**2*b2/u2n*v2(3)*(un(3,2)*bb2(2)*un(2,2)+(un(1,2)*q2(2) &
 & -un(2,2)*q2(1))*(three*bb2(2)*bb1(2)-bb2(2))*v3(2)/unorm(2)) &
 & +c3*(one-b3)**2*(one+two*b3)*al(3)*(one-bb2(3)*(one+bb1(3)))*v2(2)/unorm(3) &
 & +c3*(one-b3)**2*b3/u3n*v3(1)*(un(1,3)*bb1(3)*un(2,3)+(un(2,3)*q3(3) &
 & -un(3,3)*q3(2))*(one-bb2(3)-three*bb1(3)*bb2(3))*v2(2)/unorm(3)) &
 & +c3*(one-b3)**2*b3/u3n*v3(2)*(un(2,3)*bb1(3)*un(2,3)+(un(3,3)*q3(1) &
 & -un(1,3)*q3(3))*(one-bb2(3)-three*bb1(3)*bb2(3))*v2(2)/unorm(3)) &
 & +c3*(one-b3)**2*b3/u3n*v3(3)*(un(3,3)*bb1(3)*un(2,3)+(un(1,3)*q3(2) &
 & -un(2,3)*q3(1))*(one-bb2(3)-three*bb1(3)*bb2(3))*v2(2)/unorm(3))
   ag(3,1) = &
 & +c1*(one-b1)*b1**2*u1(3) &
 & +c2*(one-b2)**2*(one+two*b2)*al(2)*bb2(2)*bb1(2)*v3(3)/unorm(2) &
 & +c2*(one-b2)**2*b2/u2n*v2(1)*(un(1,2)*bb2(2)*un(3,2)+(un(2,2)*q2(3) &
 & -un(3,2)*q2(2))*(three*bb2(2)*bb1(2)-bb2(2))*v3(3)/unorm(2)) &
 & +c2*(one-b2)**2*b2/u2n*v2(2)*(un(2,2)*bb2(2)*un(3,2)+(un(3,2)*q2(1) &
 & -un(1,2)*q2(3))*(three*bb2(2)*bb1(2)-bb2(2))*v3(3)/unorm(2)) &
 & +c2*(one-b2)**2*b2/u2n*v2(3)*(un(3,2)*bb2(2)*un(3,2)+(un(1,2)*q2(2) &
 & -un(2,2)*q2(1))*(three*bb2(2)*bb1(2)-bb2(2))*v3(3)/unorm(2)) &
 & +c3*(one-b3)**2*(one+two*b3)*al(3)*(one-bb2(3)*(one+bb1(3)))*v2(3)/unorm(3) &
 & +c3*(one-b3)**2*b3/u3n*v3(1)*(un(1,3)*bb1(3)*un(3,3)+(un(2,3)*q3(3) &
 & -un(3,3)*q3(2))*(one-bb2(3)-three*bb1(3)*bb2(3))*v2(3)/unorm(3)) &
 & +c3*(one-b3)**2*b3/u3n*v3(2)*(un(2,3)*bb1(3)*un(3,3)+(un(3,3)*q3(1) &
 & -un(1,3)*q3(3))*(one-bb2(3)-three*bb1(3)*bb2(3))*v2(3)/unorm(3)) &
 & +c3*(one-b3)**2*b3/u3n*v3(3)*(un(3,3)*bb1(3)*un(3,3)+(un(1,3)*q3(2) &
 & -un(2,3)*q3(1))*(one-bb2(3)-three*bb1(3)*bb2(3))*v2(3)/unorm(3))
   ag(1,2) = &
 & +c1*(one-b1)**2*(one+two*b1)*al(1)*(one-bb2(1)*(one+bb1(1)))*v3(1)/unorm(1) &
 & +c1*(one-b1)**2*b1/u1n*v1(1)*(un(1,1)*bb1(1)*un(1,1)+(un(2,1)*q1(3) &
 & -un(3,1)*q1(2))*(one-bb2(1)-three*bb1(1)*bb2(1))*v3(1)/unorm(1)) &
 & +c1*(one-b1)**2*b1/u1n*v1(2)*(un(2,1)*bb1(1)*un(1,1)+(un(3,1)*q1(1) &
 & -un(1,1)*q1(3))*(one-bb2(1)-three*bb1(1)*bb2(1))*v3(1)/unorm(1)) &
 & +c1*(one-b1)**2*b1/u1n*v1(3)*(un(3,1)*bb1(1)*un(1,1)+(un(1,1)*q1(2) &
 & -un(2,1)*q1(1))*(one-bb2(1)-three*bb1(1)*bb2(1))*v3(1)/unorm(1)) &
 & +c2*(one-b2)*b2**2*u2(1) &
 & +c3*(one-b3)**2*(one+two*b3)*al(3)*bb2(3)*bb1(3)*v1(1)/unorm(3) &
 & +c3*(one-b3)**2*b3/u3n*v3(1)*(un(1,3)*bb2(3)*un(1,3)+(un(2,3)*q3(3) &
 & -un(3,3)*q3(2))*(three*bb2(3)*bb1(3)-bb2(3))*v1(1)/unorm(3)) &
 & +c3*(one-b3)**2*b3/u3n*v3(2)*(un(2,3)*bb2(3)*un(1,3)+(un(3,3)*q3(1) &
 & -un(1,3)*q3(3))*(three*bb2(3)*bb1(3)-bb2(3))*v1(1)/unorm(3)) &
 & +c3*(one-b3)**2*b3/u3n*v3(3)*(un(3,3)*bb2(3)*un(1,3)+(un(1,3)*q3(2) &
 & -un(2,3)*q3(1))*(three*bb2(3)*bb1(3)-bb2(3))*v1(1)/unorm(3))
   ag(2,2) = &
 & +c1*(one-b1)**2*(one+two*b1)*al(1)*(one-bb2(1)*(one+bb1(1)))*v3(2)/unorm(1) &
 & +c1*(one-b1)**2*b1/u1n*v1(1)*(un(1,1)*bb1(1)*un(2,1)+(un(2,1)*q1(3) &
 & -un(3,1)*q1(2))*(one-bb2(1)-three*bb1(1)*bb2(1))*v3(2)/unorm(1)) &
 & +c1*(one-b1)**2*b1/u1n*v1(2)*(un(2,1)*bb1(1)*un(2,1)+(un(3,1)*q1(1) &
 & -un(1,1)*q1(3))*(one-bb2(1)-three*bb1(1)*bb2(1))*v3(2)/unorm(1)) &
 & +c1*(one-b1)**2*b1/u1n*v1(3)*(un(3,1)*bb1(1)*un(2,1)+(un(1,1)*q1(2) &
 & -un(2,1)*q1(1))*(one-bb2(1)-three*bb1(1)*bb2(1))*v3(2)/unorm(1)) &
 & +c2*(one-b2)*b2**2*u2(2) &
 & +c3*(one-b3)**2*(one+two*b3)*al(3)*bb2(3)*bb1(3)*v1(2)/unorm(3) &
 & +c3*(one-b3)**2*b3/u3n*v3(1)*(un(1,3)*bb2(3)*un(2,3)+(un(2,3)*q3(3) &
 & -un(3,3)*q3(2))*(three*bb2(3)*bb1(3)-bb2(3))*v1(2)/unorm(3)) &
 & +c3*(one-b3)**2*b3/u3n*v3(2)*(un(2,3)*bb2(3)*un(2,3)+(un(3,3)*q3(1) &
 & -un(1,3)*q3(3))*(three*bb2(3)*bb1(3)-bb2(3))*v1(2)/unorm(3)) &
 & +c3*(one-b3)**2*b3/u3n*v3(3)*(un(3,3)*bb2(3)*un(2,3)+(un(1,3)*q3(2) &
 & -un(2,3)*q3(1))*(three*bb2(3)*bb1(3)-bb2(3))*v1(2)/unorm(3))
   ag(3,2) = &
 & +c1*(one-b1)**2*(one+two*b1)*al(1)*(one-bb2(1)*(one+bb1(1)))*v3(3)/unorm(1) &
 & +c1*(one-b1)**2*b1/u1n*v1(1)*(un(1,1)*bb1(1)*un(3,1)+(un(2,1)*q1(3) &
 & -un(3,1)*q1(2))*(one-bb2(1)-three*bb1(1)*bb2(1))*v3(3)/unorm(1)) &
 & +c1*(one-b1)**2*b1/u1n*v1(2)*(un(2,1)*bb1(1)*un(3,1)+(un(3,1)*q1(1) &
 & -un(1,1)*q1(3))*(one-bb2(1)-three*bb1(1)*bb2(1))*v3(3)/unorm(1)) &
 & +c1*(one-b1)**2*b1/u1n*v1(3)*(un(3,1)*bb1(1)*un(3,1)+(un(1,1)*q1(2) &
 & -un(2,1)*q1(1))*(one-bb2(1)-three*bb1(1)*bb2(1))*v3(3)/unorm(1)) &
 & +c2*(one-b2)*b2**2*u2(3) &
 & +c3*(one-b3)**2*(one+two*b3)*al(3)*bb2(3)*bb1(3)*v1(3)/unorm(3) &
 & +c3*(one-b3)**2*b3/u3n*v3(1)*(un(1,3)*bb2(3)*un(3,3)+(un(2,3)*q3(3) &
 & -un(3,3)*q3(2))*(three*bb2(3)*bb1(3)-bb2(3))*v1(3)/unorm(3)) &
 & +c3*(one-b3)**2*b3/u3n*v3(2)*(un(2,3)*bb2(3)*un(3,3)+(un(3,3)*q3(1) &
 & -un(1,3)*q3(3))*(three*bb2(3)*bb1(3)-bb2(3))*v1(3)/unorm(3)) &
 & +c3*(one-b3)**2*b3/u3n*v3(3)*(un(3,3)*bb2(3)*un(3,3)+(un(1,3)*q3(2) &
 & -un(2,3)*q3(1))*(three*bb2(3)*bb1(3)-bb2(3))*v1(3)/unorm(3))
   ag(1,3) = &
 & +c1*(one-b1)**2*(one+two*b1)*al(1)*bb2(1)*bb1(1)*v2(1)/unorm(1) &
 & +c1*(one-b1)**2*b1/u1n*v1(1)*(un(1,1)*bb2(1)*un(1,1)+(un(2,1)*q1(3) &
 & -un(3,1)*q1(2))*(three*bb2(1)*bb1(1)-bb2(1))*v2(1)/unorm(1)) &
 & +c1*(one-b1)**2*b1/u1n*v1(2)*(un(2,1)*bb2(1)*un(1,1)+(un(3,1)*q1(1) &
 & -un(1,1)*q1(3))*(three*bb2(1)*bb1(1)-bb2(1))*v2(1)/unorm(1)) &
 & +c1*(one-b1)**2*b1/u1n*v1(3)*(un(3,1)*bb2(1)*un(1,1)+(un(1,1)*q1(2) &
 & -un(2,1)*q1(1))*(three*bb2(1)*bb1(1)-bb2(1))*v2(1)/unorm(1)) &
 & +c2*(one-b2)**2*(one+two*b2)*al(2)*(one-bb2(2)*(one+bb1(2)))*v1(1)/unorm(2) &
 & +c2*(one-b2)**2*b2/u2n*v2(1)*(un(1,2)*bb1(2)*un(1,2)+(un(2,2)*q2(3) &
 & -un(3,2)*q2(2))*(one-bb2(2)-three*bb1(2)*bb2(2))*v1(1)/unorm(2)) &
 & +c2*(one-b2)**2*b2/u2n*v2(2)*(un(2,2)*bb1(2)*un(1,2)+(un(3,2)*q2(1) &
 & -un(1,2)*q2(3))*(one-bb2(2)-three*bb1(2)*bb2(2))*v1(1)/unorm(2)) &
 & +c2*(one-b2)**2*b2/u2n*v2(3)*(un(3,2)*bb1(2)*un(1,2)+(un(1,2)*q2(2) &
 & -un(2,2)*q2(1))*(one-bb2(2)-three*bb1(2)*bb2(2))*v1(1)/unorm(2)) &
 & +c3*(one-b3)*b3**2*u3(1)
   ag(2,3) = &
 & +c1*(one-b1)**2*(one+two*b1)*al(1)*bb2(1)*bb1(1)*v2(2)/unorm(1) &
 & +c1*(one-b1)**2*b1/u1n*v1(1)*(un(1,1)*bb2(1)*un(2,1)+(un(2,1)*q1(3) &
 & -un(3,1)*q1(2))*(three*bb2(1)*bb1(1)-bb2(1))*v2(2)/unorm(1)) &
 & +c1*(one-b1)**2*b1/u1n*v1(2)*(un(2,1)*bb2(1)*un(2,1)+(un(3,1)*q1(1) &
 & -un(1,1)*q1(3))*(three*bb2(1)*bb1(1)-bb2(1))*v2(2)/unorm(1)) &
 & +c1*(one-b1)**2*b1/u1n*v1(3)*(un(3,1)*bb2(1)*un(2,1)+(un(1,1)*q1(2) &
 & -un(2,1)*q1(1))*(three*bb2(1)*bb1(1)-bb2(1))*v2(2)/unorm(1)) &
 & +c2*(one-b2)**2*(one+two*b2)*al(2)*(one-bb2(2)*(one+bb1(2)))*v1(2)/unorm(2) &
 & +c2*(one-b2)**2*b2/u2n*v2(1)*(un(1,2)*bb1(2)*un(2,2)+(un(2,2)*q2(3) &
 & -un(3,2)*q2(2))*(one-bb2(2)-three*bb1(2)*bb2(2))*v1(2)/unorm(2)) &
 & +c2*(one-b2)**2*b2/u2n*v2(2)*(un(2,2)*bb1(2)*un(2,2)+(un(3,2)*q2(1) &
 & -un(1,2)*q2(3))*(one-bb2(2)-three*bb1(2)*bb2(2))*v1(2)/unorm(2)) &
 & +c2*(one-b2)**2*b2/u2n*v2(3)*(un(3,2)*bb1(2)*un(2,2)+(un(1,2)*q2(2) &
 & -un(2,2)*q2(1))*(one-bb2(2)-three*bb1(2)*bb2(2))*v1(2)/unorm(2)) &
 & +c3*(one-b3)*b3**2*u3(2)
   ag(3,3) = &
 & +c1*(one-b1)**2*(one+two*b1)*al(1)*bb2(1)*bb1(1)*v2(3)/unorm(1) &
 & +c1*(one-b1)**2*b1/u1n*v1(1)*(un(1,1)*bb2(1)*un(3,1)+(un(2,1)*q1(3) &
 & -un(3,1)*q1(2))*(three*bb2(1)*bb1(1)-bb2(1))*v2(3)/unorm(1)) &
 & +c1*(one-b1)**2*b1/u1n*v1(2)*(un(2,1)*bb2(1)*un(3,1)+(un(3,1)*q1(1) &
 & -un(1,1)*q1(3))*(three*bb2(1)*bb1(1)-bb2(1))*v2(3)/unorm(1)) &
 & +c1*(one-b1)**2*b1/u1n*v1(3)*(un(3,1)*bb2(1)*un(3,1)+(un(1,1)*q1(2) &
 & -un(2,1)*q1(1))*(three*bb2(1)*bb1(1)-bb2(1))*v2(3)/unorm(1)) &
 & +c2*(one-b2)**2*(one+two*b2)*al(2)*(one-bb2(2)*(one+bb1(2)))*v1(3)/unorm(2) &
 & +c2*(one-b2)**2*b2/u2n*v2(1)*(un(1,2)*bb1(2)*un(3,2)+(un(2,2)*q2(3) &
 & -un(3,2)*q2(2))*(one-bb2(2)-three*bb1(2)*bb2(2))*v1(3)/unorm(2)) &
 & +c2*(one-b2)**2*b2/u2n*v2(2)*(un(2,2)*bb1(2)*un(3,2)+(un(3,2)*q2(1) &
 & -un(1,2)*q2(3))*(one-bb2(2)-three*bb1(2)*bb2(2))*v1(3)/unorm(2)) &
 & +c2*(one-b2)**2*b2/u2n*v2(3)*(un(3,2)*bb1(2)*un(3,2)+(un(1,2)*q2(2) &
 & -un(2,2)*q2(1))*(one-bb2(2)-three*bb1(2)*bb2(2))*v1(3)/unorm(2)) &
 & +c3*(one-b3)*b3**2*u3(3)
end if

! Probe out
@:probe_out()

END subroutine ssrfpack_fval

end module tools_ssrfpack
