#:def include_cartg()
#:include '../instrumentation.fypp'
!----------------------------------------------------------------------
! Subroutine: model_cartg_coord
!> Get LatLonGrid coordinates
!----------------------------------------------------------------------
subroutine model_cartg_coord(model,mpl,nam)

implicit none

! Passed variables
class(model_type),intent(inout) :: model !< Model
type(mpl_type),intent(inout) :: mpl      !< MPI data
type(nam_type),intent(in) :: nam         !< Namelist

! Local variables
integer :: icomp,offset_lev,img,ilon,ilat,il0
integer :: ncid,lon_id,lat_id
integer,allocatable :: lev_id(:)
real(kind_real),allocatable :: lon(:),lat(:),lev(:)

! Set name
@:set_name(model_cartg_coord)

! Probe in
@:probe_in()

! Define components
model%ncomp = 0
do icomp=1,ncompmax
   select case(trim(nam%model_comp(icomp)))
   case ('atm','ocn')
      model%ncomp = model%ncomp+1
   case ('')
   case default
     call mpl%abort('${subr}$','wrong component for the cartg model')
   end select
end do

! Allocation
allocate(model%nlev_comp(model%ncomp))
allocate(model%nl0_comp(model%ncomp))
allocate(lev_id(model%ncomp))

! Open file and get dimensions
model%ntile = 1
ncid = open_file(mpl,'grid',0)
model%nlon = inquire_dim_size(mpl,ncid,'lon')
model%nlat = inquire_dim_size(mpl,ncid,'lat')
model%nmg = model%nlon*model%nlat
do icomp=1,model%ncomp
   select case(trim(nam%model_comp(icomp)))
   case ('atm')
      model%nlev_comp(icomp) = inquire_dim_size(mpl,ncid,'atm_lev')
   case ('ocn')
      model%nlev_comp(icomp) = inquire_dim_size(mpl,ncid,'ocn_lev')
   end select
end do
model%nlev = sum(model%nlev_comp)

! Allocation
call model%alloc
allocate(lon(model%nlon))
allocate(lat(model%nlat))
allocate(lev(model%nlev))

! Read data and close file
lon_id = inquire_var(mpl,ncid,'lon')
lat_id = inquire_var(mpl,ncid,'lat')
if (.false.) then ! TODO: this should be activated when a continuous vertical coordinate is available
   do icomp=1,model%ncomp
      select case(trim(nam%model_comp(icomp)))
      case ('atm')
         lev_id(icomp) = inquire_var(mpl,ncid,'atm_lev')
      case ('ocn')
         lev_id(icomp) = inquire_var(mpl,ncid,'ocn_lev')
      end select
   end do
end if
call get_var(mpl,ncid,lon_id,lon)
call get_var(mpl,ncid,lat_id,lat)
if (.false.) then ! TODO: this should be activated when a continuous vertical coordinate is available
   offset_lev = 0
   do icomp=1,model%ncomp
      call get_var(mpl,ncid,lev_id(icomp),lev(offset_lev+1:offset_lev+model%nlev_comp(icomp)))
      offset_lev = offset_lev+model%nlev_comp(icomp)
   end do
else
   ! Temporary fix: use model level index
   do il0=1,model%nl0
      lev(il0) = il0
   end do
end if
call close_file(mpl,ncid)

! Convert to radian
lon = lon*deg2rad
lat = lat*deg2rad

! Model grid
img = 0
do ilon=1,model%nlon
   do ilat=1,model%nlat
      img = img+1
      model%mg_to_tile(img) = 1
      model%mg_to_lon(img) = ilon
      model%mg_to_lat(img) = ilat
      model%lon(img) = lon(ilon)
      model%lat(img) = lat(ilat)
   end do
end do
model%area = four*pi/real(model%nmg,kind_real)
model%mask = .true.

! Vertical unit
do img=1,model%nmg
   if (nam%logpres) then
      call mpl%abort('${subr}$','cartg does not use logpres')
   else
      model%vunit(img,:) = lev(nam%levs(1:nam%nl))
   end if
end do

! Used levels
offset_lev = 0
do icomp=1,model%ncomp
   model%nl0_comp(icomp) = count((nam%levs(1:nam%nl)>=offset_lev+1).and.(nam%levs(1:nam%nl)<=offset_lev+model%nlev_comp(icomp)))
   offset_lev = offset_lev+model%nlev_comp(icomp)
end do

! Release memory
deallocate(lev_id)
deallocate(lon)
deallocate(lat)
deallocate(lev)

! Probe out
@:probe_out()

end subroutine model_cartg_coord

!----------------------------------------------------------------------
! Subroutine: model_cartg_read
!> Read LatLonGrid field
!----------------------------------------------------------------------
subroutine model_cartg_read(model,mpl,nam,filename,fld)

use netcdf, only: nf90_inquire_variable

implicit none

! Passed variables
class(model_type),intent(inout) :: model                        !< Model
type(mpl_type),intent(inout) :: mpl                             !< MPI data
type(nam_type),intent(in) :: nam                                !< Namelist
character(len=*),intent(in) :: filename                         !< File name
real(kind_real),intent(out) :: fld(model%nmga,model%nl0,nam%nv) !< Field

! Local variables
integer :: offset_lev,offset_l0,iv,icomp,il0,img,ilon,ilat,rank
integer :: ncid,fld_id
real(kind_real) :: fld_mg(model%nmg,model%nl0)
real(kind_real),allocatable :: fld_tmp(:,:,:)
character(len=1024) :: var(model%ncomp)

! Set name
@:set_name(model_cartg_read)

! Probe in
@:probe_in()

if (mpl%main) then
   ! Allocation
   allocate(fld_tmp(model%nlon,model%nlat,model%nl0))

   ! Open file
   ncid = open_file(mpl,filename,0)
end if

do iv=1,nam%nv
   if (mpl%main) then
      ! Initialization
      offset_lev = 0
      offset_l0 = 0

      ! Set variable name for each component
      do icomp=1,model%ncomp
         var(icomp) = ''
         select case (trim(nam%model_comp(icomp)))
         case ('atm')
            ! Atmospheric variables
            select case (trim(nam%variables(iv)))
            case ('T')
               var(icomp) = 'atm_T'
            case ('u')
               var(icomp) = 'atm_u'
            end select
         case ('ocn')
            ! Ocean variables
            select case (trim(nam%variables(iv)))
            case ('T')
               var(icomp) = 'ocn_Temp'
            case ('S')
               var(icomp) = 'ocn_Salt'
            end select
         end select

         if (trim(var(icomp))=='') then
            ! This variable is not present in the component
            fld_tmp(:,:,offset_l0+1:offset_l0+model%nl0_comp(icomp)) = mpl%msv%valr
         else
            ! Get variable ID
            fld_id = inquire_var(mpl,ncid,var(icomp))

            ! Get variable rank
            rank = inquire_var_rank(mpl,ncid,var(icomp))
            ! Read data
            select case (rank)
            case (2)
               ! 2D data
               fld_tmp(:,:,offset_l0+1:offset_l0+model%nl0_comp(icomp)) = mpl%msv%valr
               if (trim(nam%lev2d)=='first') then
                  call get_var(mpl,ncid,fld_id,fld_tmp(:,:,offset_l0+1),(/1,1/),(/model%nlon,model%nlat/))
               elseif (trim(nam%lev2d)=='last') then
                  call get_var(mpl,ncid,fld_id,fld_tmp(:,:,offset_l0+model%nl0_comp(icomp)),(/1,1/), &
 & (/model%nlon,model%nlat/))
               end if
            case (3)
               ! 3D data
               do il0=offset_l0+1,offset_l0+model%nl0_comp(icomp)
                  call get_var(mpl,ncid,fld_id,fld_tmp(:,:,il0),(/1,1,nam%levs(il0)-offset_lev/), &
 & (/model%nlon,model%nlat,1/))
               end do
            case default
               call mpl%abort('${subr}$','wrong number of dimensions for variable '//trim(var(icomp)))
            end select
         end if

         ! Pack
         do il0=offset_l0+1,offset_l0+model%nl0_comp(icomp)
            do img=1,model%nmg
               ilon = model%mg_to_lon(img)
               ilat = model%mg_to_lat(img)
               fld_mg(img,il0) = fld_tmp(ilon,ilat,il0)
            end do
         end do

         ! Update offset
         offset_lev = offset_lev+model%nlev_comp(icomp)
         offset_l0 = offset_l0+model%nl0_comp(icomp)
      end do
   end if
   call mpl%glb_to_loc(model%nmga,model%nmg,model%mga_to_mg,fld_mg,fld(:,:,iv))
end do

if (mpl%main) then
   ! Close file
   call close_file(mpl,ncid)

   ! Release memory
   deallocate(fld_tmp)
end if

! Probe out
@:probe_out()

end subroutine model_cartg_read
#:enddef include_cartg
