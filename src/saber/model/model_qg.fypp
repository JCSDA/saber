#:def include_qg()
#:include '../instrumentation.fypp'
!----------------------------------------------------------------------
! Subroutine: model_qg_coord
!> Get QG coordinates
!----------------------------------------------------------------------
subroutine model_qg_coord(model,mpl,nam)

implicit none

! Passed variables
class(model_type),intent(inout) :: model !< Model
type(mpl_type),intent(inout) :: mpl      !< MPI data
type(nam_type),intent(in) :: nam         !< Namelist

! Local variables
integer :: img,ilon,ilat,il0
integer :: ncid,lon_id,lat_id,z_id,area_id,lmask_id
real(kind_real),allocatable :: lon(:,:),lat(:,:),z(:),area(:,:),lmask(:,:,:)

! Set name
@:set_name(model_qg_coord)

! Probe in
@:probe_in()

! Open file and get dimensions
model%ntile = 1
ncid = open_file(mpl,'grid',0)
model%nlon = inquire_dim_size(mpl,ncid,'nx')
model%nlat = inquire_dim_size(mpl,ncid,'ny')
if (nam%qg_redundant) model%nlon = model%nlon+1
model%nmg = model%nlon*model%nlat
model%nlev = inquire_dim_size(mpl,ncid,'nz')

! Allocation
call model%alloc
allocate(lon(model%nlon,model%nlat))
allocate(lat(model%nlon,model%nlat))
allocate(z(model%nlev))
allocate(area(model%nlon,model%nlat))
allocate(lmask(model%nlon,model%nlat,model%nlev))

! Read data and close file
lon_id = inquire_var(mpl,ncid,'lon')
lat_id = inquire_var(mpl,ncid,'lat')
z_id = inquire_var(mpl,ncid,'z')
area_id = inquire_var(mpl,ncid,'area')
lmask_id = inquire_var(mpl,ncid,'lmask')
if (nam%qg_redundant) then
   call get_var(mpl,ncid,lon_id,lon(1:model%nlon-1,:))
   call get_var(mpl,ncid,lat_id,lat(1:model%nlon-1,:))
   call get_var(mpl,ncid,area_id,area(1:model%nlon-1,:))
   call get_var(mpl,ncid,lmask_id,lmask(1:model%nlon-1,:,:))
else
   call get_var(mpl,ncid,lon_id,lon)
   call get_var(mpl,ncid,lat_id,lat)
   call get_var(mpl,ncid,area_id,area)
   call get_var(mpl,ncid,lmask_id,lmask)
end if
call get_var(mpl,ncid,z_id,z)
call close_file(mpl,ncid)

if (nam%qg_redundant) then
   ! Add redundant longitude for tests
   lon(model%nlon,:) = lon(1,:)
   lat(model%nlon,:) = lat(1,:)
   area(model%nlon,:) = area(1,:)
   lmask(model%nlon,:,:) = lmask(1,:,:)
end if

! Convert to radian
lon = lon*deg2rad
lat = lat*deg2rad

! Model grid
img = 0
do ilon=1,model%nlon
   do ilat=1,model%nlat
      img = img+1
      model%mg_to_tile(img) = 1
      model%mg_to_lon(img) = ilon
      model%mg_to_lat(img) = ilat
      model%lon(img) = lon(ilon,ilat)
      model%lat(img) = lat(ilon,ilat)
      model%area(img) = area(ilon,ilat)/req**2
      do il0=1,model%nl0
        model%mask(img,il0) = (lmask(ilon,ilat,nam%levs(il0))>half)
      end do
   end do
end do

if (nam%qg_regional) then
   ! Reduce domain to a typical regional size
   model%lon = model%lon*tenth
   model%lat = quarter*pi+(model%lat-quarter*pi)*tenth
   model%area = mpl%msv%valr
elseif (nam%qg_urban) then
   ! Reduce domain to a typical urban size
   model%lon = model%lon*0.005_kind_real
   model%lat = quarter*pi+(model%lat-quarter*pi)*0.005_kind_real
   model%area = mpl%msv%valr
end if

! Vertical unit
do il0=1,model%nl0
   model%vunit(1:model%nmg,il0) = z(nam%levs(il0))
end do

! Release memory
deallocate(lon)
deallocate(lat)
deallocate(z)
deallocate(area)
deallocate(lmask)

! Probe out
@:probe_out()

end subroutine model_qg_coord

!----------------------------------------------------------------------
! Subroutine: model_qg_read
!> Read QG field
!----------------------------------------------------------------------
subroutine model_qg_read(model,mpl,nam,filename,fld)

implicit none

! Passed variables
class(model_type),intent(inout) :: model                        !< Model
type(mpl_type),intent(inout) :: mpl                             !< MPI data
type(nam_type),intent(in) :: nam                                !< Namelist
character(len=*),intent(in) :: filename                         !< File name
real(kind_real),intent(out) :: fld(model%nmga,model%nl0,nam%nv) !< Field

! Local variables
integer :: iv,il0,img,ilon,ilat,rank,iv_u,iv_q,imga
integer :: ncid,fld_id
real(kind_real) :: fld_mg(model%nmg,model%nl0)
real(kind_real),allocatable :: fld_tmp(:,:,:)

! Set name
@:set_name(model_qg_read)

! Probe in
@:probe_in()

if (mpl%main) then
   ! Allocation
   allocate(fld_tmp(model%nlon,model%nlat,model%nl0))

   ! Open file
   ncid = open_file(mpl,filename,0)
end if

do iv=1,nam%nv
   if ((trim(nam%variables(iv))=='u').or.(trim(nam%variables(iv))=='q').or.(trim(nam%variables(iv))=='qs')) then
      if (mpl%main) then
         ! Get variable ID
         fld_id = inquire_var(mpl,ncid,nam%variables(iv))

         ! Get variable rank
         rank = inquire_var_rank(mpl,ncid,nam%variables(iv))

         ! Read data
         select case (rank)
         case (2)
            ! 2D data
            fld_tmp = mpl%msv%valr
            if (trim(nam%lev2d)=='first') then
               call get_var(mpl,ncid,fld_id,fld_tmp(1:model%nlon-1,:,1),(/1,1/),(/model%nlon-1,model%nlat/))
               fld_tmp(model%nlon,:,1) = fld_tmp(1,:,1)
            elseif (trim(nam%lev2d)=='last') then
               call get_var(mpl,ncid,fld_id,fld_tmp(1:model%nlon-1,:,model%nl0),(/1,1/),(/model%nlon-1,model%nlat/))
               fld_tmp(model%nlon,:,model%nl0) = fld_tmp(1,:,model%nl0)
            end if
         case (3)
            ! 3D data
            do il0=1,nam%nl
               call get_var(mpl,ncid,fld_id,fld_tmp(1:model%nlon-1,:,il0),(/1,1,nam%levs(il0)/),(/model%nlon-1,model%nlat,1/))
               fld_tmp(model%nlon,:,il0) = fld_tmp(1,:,il0)
            end do
         case default
            call mpl%abort('${subr}$','wrong number of dimensions for variable '//trim(nam%variables(iv)))
         end select

         ! Pack
         do il0=1,model%nl0
            do img=1,model%nmg
               ilon = model%mg_to_lon(img)
               ilat = model%mg_to_lat(img)
               fld_mg(img,il0) = fld_tmp(ilon,ilat,il0)
            end do
         end do
      end if
      call mpl%glb_to_loc(model%nmga,model%nmg,model%mga_to_mg,fld_mg,fld(:,:,iv))
   end if
end do

if (mpl%main) then
   ! Close file
   call close_file(mpl,ncid)

   ! Release memory
   deallocate(fld_tmp)
end if

! Post-processing
iv_u = mpl%msv%vali
iv_q = mpl%msv%vali
do iv=1,nam%nv
   if (trim(nam%variables(iv))=='u') iv_u = iv
   if (trim(nam%variables(iv))=='q') iv_q = iv
end do
do iv=1,nam%nv
   select case(trim(nam%variables(iv)))
   case ('u','q','qs')
      ! Nothing to do
   case ('cosu_plus_q2')
      if (mpl%msv%isnot(iv_u).and.mpl%msv%isnot(iv_q)) then
         do il0=1,model%nl0
            do imga=1,model%nmga
               if (mpl%msv%isnot(fld(imga,il0,iv_u)).and.mpl%msv%isnot(fld(imga,il0,iv_q))) then
                  fld(imga,il0,iv) = cos(fld(imga,il0,iv_u))+(fld(imga,il0,iv_q)/4.0e-6)**2
               else
                  fld(imga,il0,iv) = mpl%msv%valr
               end if
            end do
         end do
      else
         call mpl%abort('${subr}$','u, q and cosu_plus_q2 variables required for cosu_plus_q2 change of variables')
      end if
   case default
      call mpl%abort('${subr}$','wrong variable in QG model')
   end select
end do

! Probe out
@:probe_out()

end subroutine model_qg_read
#:enddef include_qg
