#:def include_res()
#:include '../instrumentation.fypp'
!----------------------------------------------------------------------
! Subroutine: model_res_coord
!> Get RES coordinates
!----------------------------------------------------------------------
subroutine model_res_coord(model,mpl,nam)

implicit none

! Passed variables
class(model_type),intent(inout) :: model !< Model
type(mpl_type),intent(inout) :: mpl      !< MPI data
type(nam_type),intent(in) :: nam         !< Namelist

! Local variables
integer :: img,il0
integer :: ncid,lon_id,lat_id,alt_id,area_id,mask_id
real(kind_real),allocatable :: lon(:,:),lat(:,:),alt(:,:),area(:,:),mask(:,:)

! Set name
@:set_name(model_res_coord)

! Probe in
@:probe_in()

! Open file and get dimensions
model%ntile = 1
model%nlon = mpl%msv%vali
model%nlat = mpl%msv%vali
ncid = open_file(mpl,'grid',0)
model%nmg = inquire_dim_size(mpl,ncid,'nhcells')
model%nlev = inquire_dim_size(mpl,ncid,'nlev')

! Allocation
call model%alloc
allocate(lon(model%nmg,model%nlev))
allocate(lat(model%nmg,model%nlev))
allocate(alt(model%nmg,model%nlev))
allocate(area(model%nmg,model%nlev))
allocate(mask(model%nmg,model%nlev))

! Read data and close file
lon_id = inquire_var(mpl,ncid,'longitude')
lat_id = inquire_var(mpl,ncid,'latitude')
alt_id = inquire_var(mpl,ncid,'altitude')
area_id = inquire_var(mpl,ncid,'horzArea')
mask_id = inquire_var(mpl,ncid,'activeCells')
call get_var(mpl,ncid,lon_id,lon)
call get_var(mpl,ncid,lat_id,lat)
call get_var(mpl,ncid,alt_id,alt)
call get_var(mpl,ncid,area_id,area)
call get_var(mpl,ncid,mask_id,mask)
call close_file(mpl,ncid)

! Model grid
model%mg_to_tile = 1
do img=1,model%nmg
   model%lon(img) = (sum(lon(img,:))/real(model%nlev,kind_real))/req
   model%lat(img) = (sum(lat(img,:))/real(model%nlev,kind_real))/req
   model%area(img) = (sum(area(img,:))/real(model%nlev,kind_real))/req**2
end do
model%mask = (mask(:,nam%levs(1:model%nl0))>half)

! Vertical unit
if (nam%logpres) call mpl%abort('${subr}$','pressure logarithm vertical coordinate is not available for this model')
do il0=1,model%nl0
   do img=1,model%nmg
      model%vunit(img,il0) = alt(img,nam%levs(il0))
   end do
end do

! Release memory
deallocate(lon)
deallocate(lat)
deallocate(alt)
deallocate(area)
deallocate(mask)

! Probe out
@:probe_out()

end subroutine model_res_coord

!----------------------------------------------------------------------
! Subroutine: model_res_read
!> Read RES field
!----------------------------------------------------------------------
subroutine model_res_read(model,mpl,nam,filename,fld)

implicit none

! Passed variables
class(model_type),intent(inout) :: model                        !< Model
type(mpl_type),intent(inout) :: mpl                             !< MPI data
type(nam_type),intent(in) :: nam                                !< Namelist
character(len=*),intent(in) :: filename                         !< File name
real(kind_real),intent(out) :: fld(model%nmga,model%nl0,nam%nv) !< Field

! Local variables
integer :: iv,il0
integer :: ncid,fld_id
real(kind_real) :: fld_mg(model%nmg,model%nl0)

! Set name
@:set_name(model_res_read)

! Probe in
@:probe_in()

! Open file
if (mpl%main) ncid = open_file(mpl,filename,0)

do iv=1,nam%nv
   if (mpl%main) then
      ! Get variable id
      fld_id = inquire_var(mpl,ncid,nam%variables(iv))

      ! Read data
      do il0=1,nam%nl
         call get_var(mpl,ncid,fld_id,fld_mg(:,il0),(/1,nam%levs(il0)/),(/model%nmg,1/))
      end do
   end if
   call mpl%glb_to_loc(model%nmga,model%nmg,model%mga_to_mg,fld_mg,fld(:,:,iv))
end do

! Close file
if (mpl%main) call close_file(mpl,ncid)

! Probe out
@:probe_out()

end subroutine model_res_read
#:enddef include_res
