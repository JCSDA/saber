#:def include_mpas()
#:include '../instrumentation.fypp'
!----------------------------------------------------------------------
! Subroutine: model_mpas_coord
!> Get MPAS coordinates
!----------------------------------------------------------------------
subroutine model_mpas_coord(model,mpl,nam)

implicit none

! Passed variables
class(model_type),intent(inout) :: model !< Model
type(mpl_type),intent(inout) :: mpl      !< MPI data
type(nam_type),intent(in) :: nam         !< Namelist

! Local variables
integer :: img
integer :: ncid,lon_id,lat_id,pres_id
real(kind_float),allocatable :: lon(:),lat(:),pres(:)

! Set name
@:set_name(model_mpas_coord)

! Probe in
@:probe_in()

! Open file and get dimensions
model%ntile = 1
model%nlon = mpl%msv%vali
model%nlat = mpl%msv%vali
ncid = open_file(mpl,'grid',0)
model%nmg = inquire_dim_size(mpl,ncid,'nCells')
model%nlev = inquire_dim_size(mpl,ncid,'nVertLevels')

! Allocation
call model%alloc
allocate(lon(model%nmg))
allocate(lat(model%nmg))
allocate(pres(model%nlev))

! Read data and close file
lon_id = inquire_var(mpl,ncid,'lonCell')
lat_id = inquire_var(mpl,ncid,'latCell')
pres_id = inquire_var(mpl,ncid,'pressure_base')
call get_var(mpl,ncid,lon_id,lon)
call get_var(mpl,ncid,lat_id,lat)
call get_var(mpl,ncid,pres_id,pres)
call close_file(mpl,ncid)

! Model grid
model%mg_to_tile = 1
model%lon = lon
model%lat = lat
model%area = four*pi/real(model%nmg,kind_real)
model%mask = .true.

! Vertical unit
do img=1,model%nmg
   if (nam%logpres) then
      model%vunit(img,1:nam%nl) = log(pres(nam%levs(1:nam%nl)))
      if (model%nl0>nam%nl) model%vunit(img,model%nl0) = log(ps)
   else
      model%vunit(img,:) = real(nam%levs(1:model%nl0),kind_real)
   end if
end do

! Release memory
deallocate(lon)
deallocate(lat)
deallocate(pres)

! Probe out
@:probe_out()

end subroutine model_mpas_coord

!----------------------------------------------------------------------
! Subroutine: model_mpas_read
!> Read MPAS field
!----------------------------------------------------------------------
subroutine model_mpas_read(model,mpl,nam,filename,fld)

implicit none

! Passed variables
class(model_type),intent(inout) :: model                        !< Model
type(mpl_type),intent(inout) :: mpl                             !< MPI data
type(nam_type),intent(in) :: nam                                !< Namelist
character(len=*),intent(in) :: filename                         !< File name
real(kind_real),intent(out) :: fld(model%nmga,model%nl0,nam%nv) !< Field

! Local variables
integer :: iv,il0,rank
integer :: ncid,fld_id
real(kind_real) :: fld_mg(model%nmg,model%nl0)

! Set name
@:set_name(model_mpas_read)

! Probe in
@:probe_in()

! Open file
if (mpl%main) ncid = open_file(mpl,filename,0)

do iv=1,nam%nv
   if (mpl%main) then
      ! Get variable ID
      fld_id = inquire_var(mpl,ncid,nam%variables(iv))

      ! Get variable rank
      rank = inquire_var_rank(mpl,ncid,nam%variables(iv))

      ! Read data
      select case (rank)
      case (2)
         ! 2D data
         fld_mg = mpl%msv%valr
         if (trim(nam%lev2d)=='first') then
            call get_var(mpl,ncid,fld_id,fld_mg(:,1),(/1,1/),(/model%nmg,1/))
         elseif (trim(nam%lev2d)=='last') then
            call get_var(mpl,ncid,fld_id,fld_mg(:,model%nl0),(/1,1/),(/model%nmg,1/))
         end if
      case (3)
         ! 3D data
         do il0=1,nam%nl
            call get_var(mpl,ncid,fld_id,fld_mg(:,il0),(/nam%levs(il0),1,1/),(/1,model%nmg,1/))
         end do
      case default
         call mpl%abort('${subr}$','wrong number of dimensions for variable '//trim(nam%variables(iv)))
      end select
   end if
   call mpl%glb_to_loc(model%nmga,model%nmg,model%mga_to_mg,fld_mg,fld(:,:,iv))
end do

! Close file
if (mpl%main) call close_file(mpl,ncid)

! Probe out
@:probe_out()

end subroutine model_mpas_read
#:enddef include_mpas
