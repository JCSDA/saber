#:def include_fv3()
#:include '../instrumentation.fypp'
!----------------------------------------------------------------------
! Subroutine: model_fv3_coord
!> Get FV3 coordinates
!----------------------------------------------------------------------
subroutine model_fv3_coord(model,mpl,nam)

implicit none

! Passed variables
class(model_type),intent(inout) :: model !< Model
type(mpl_type),intent(inout) :: mpl      !< MPI data
type(nam_type),intent(in) :: nam         !< Namelist

! Local variables
integer :: img,ilon,ilat,itile,il0
integer :: ncid,lon_id,lat_id,a_id,b_id
real(kind_real) :: sigmaup,sigmadn,sigma
real(kind_real),allocatable :: lon(:,:,:),lat(:,:,:),a(:),b(:)

! Set name
@:set_name(model_fv3_coord)

! Probe in
@:probe_in()

! Open file and get dimensions
ncid = open_file(mpl,'grid',0)
model%nlon = inquire_dim_size(mpl,ncid,'fxdim')
model%nlat = inquire_dim_size(mpl,ncid,'fydim')
model%ntile = inquire_dim_size(mpl,ncid,'ntile')
model%nmg = model%nlon*model%nlat*model%ntile
model%nlev = inquire_dim_size(mpl,ncid,'xaxis_1')
model%nlev = model%nlev-1

! Allocation
call model%alloc
allocate(lon(model%nlon,model%nlat,model%ntile))
allocate(lat(model%nlon,model%nlat,model%ntile))
allocate(a(model%nlev+1))
allocate(b(model%nlev+1))

! Read data and close file
lon_id = inquire_var(mpl,ncid,'flons')
lat_id = inquire_var(mpl,ncid,'flats')
a_id = inquire_var(mpl,ncid,'ak')
b_id = inquire_var(mpl,ncid,'bk')
call get_var(mpl,ncid,lon_id,lon)
call get_var(mpl,ncid,lat_id,lat)
call get_var(mpl,ncid,a_id,a,(/1,1/),(/model%nlev+1,1/))
call get_var(mpl,ncid,b_id,b,(/1,1/),(/model%nlev+1,1/))
call close_file(mpl,ncid)

! Model grid
img = 0
do itile=1,model%ntile
   do ilon=1,model%nlon
      do ilat=1,model%nlat
         img = img+1
         model%mg_to_tile(img) = itile
         model%mg_to_lon(img) = ilon
         model%mg_to_lat(img) = ilat
         model%lon(img) = lon(ilon,ilat,itile)
         model%lat(img) = lat(ilon,ilat,itile)
         call lonlatmod(model%lon(img),model%lat(img))
      end do
   end do
end do
model%area = four*pi/real(model%nmg,kind_real)
model%mask = .true.

! Vertical unit
do il0=1,model%nl0
   if (il0<nam%nl0) then
      sigmaup = a(nam%levs(il0)+1)/ps+b(nam%levs(il0)+1)
      sigmadn = a(nam%levs(il0))/ps+b(nam%levs(il0))
      sigma = half*(sigmaup+sigmadn)
   else
      sigma = one
   end if
   if (nam%logpres) then
      model%vunit(:,il0) = log(sigma*ps)
      if (model%nl0>nam%nl0) model%vunit(:,model%nl0) = log(ps)
   else
      model%vunit(:,il0) = sigma
   end if
end do

! Release memory
deallocate(lon)
deallocate(lat)
deallocate(a)
deallocate(b)

! Probe out
@:probe_out()

end subroutine model_fv3_coord

!----------------------------------------------------------------------
! Subroutine: model_fv3_read
!> Read FV3 field
!----------------------------------------------------------------------
subroutine model_fv3_read(model,mpl,nam,filename,fld)

implicit none

! Passed variables
class(model_type),intent(inout) :: model                        !< Model
type(mpl_type),intent(inout) :: mpl                             !< MPI data
type(nam_type),intent(in) :: nam                                !< Namelist
character(len=*),intent(in) :: filename                         !< File name
real(kind_real),intent(out) :: fld(model%nmga,model%nl0,nam%nv) !< Field

! Local variables
integer :: iv,il0,imgt,img,ilon,ilat
integer :: ncid,fld_id,zlen
real(kind_real) :: fld_mgt(model%nmgt,model%nl0)
real(kind_real),allocatable :: fld_tmp(:,:,:)
character(len=1) :: ctile

! Set name
@:set_name(model_fv3_read)

! Probe in
@:probe_in()

if (model%ioproc(model%mytile)==mpl%myproc) then
   ! Allocation
   allocate(fld_tmp(model%nlon,model%nlat,model%nl0))

   ! Open file
   write(ctile,'(i1.1)') model%mytile
   ncid = open_file(mpl,trim(filename)//'_tile'//ctile,0)
end if

do iv=1,nam%nv
   if (model%ioproc(model%mytile)==mpl%myproc) then
      ! Get variable ID
      fld_id = inquire_var(mpl,ncid,nam%variables(iv))

      ! Get vertical dimension size
      zlen = inquire_var_dim_size(mpl,ncid,nam%variables(iv),3)

      ! Read data
      if (zlen==1) then
         ! 2D data
         fld_tmp = mpl%msv%valr
         if (trim(nam%lev2d)=='first') then
            call get_var(mpl,ncid,fld_id,fld_tmp(:,:,1),(/1,1,1,1/),(/model%nlon,model%nlat,1,1/))
         elseif (trim(nam%lev2d)=='last') then
            call get_var(mpl,ncid,fld_id,fld_tmp(:,:,model%nl0),(/1,1,1,1/),(/model%nlon,model%nlat,1,1/))
         end if
      else
         ! 3D data
         do il0=1,nam%nl0
            call get_var(mpl,ncid,fld_id,fld_tmp(:,:,il0),(/1,1,nam%levs(il0),1/),(/model%nlon,model%nlat,1,1/))
         end do
      end if

      ! Pack
      do imgt=1,model%nmgt
         img = model%mgt_to_mg(imgt)
         ilon = model%mg_to_lon(img)
         ilat = model%mg_to_lat(img)
         fld_mgt(imgt,:) = fld_tmp(ilon,ilat,:)
      end do
   end if
   call mpl%glb_to_loc(model%nmga,model%nmgt,model%mga_to_mgt,fld_mgt,fld(:,:,iv), &
 & model%ioproc(model%mytile),model%tilepool(:,model%mytile))
end do

if (model%ioproc(model%mytile)==mpl%myproc) then
   ! Close file
   call close_file(mpl,ncid)

   ! Release memory
   deallocate(fld_tmp)
end if

! Probe out
@:probe_out()

end subroutine model_fv3_read
#:enddef include_fv3
