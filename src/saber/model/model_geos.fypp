#:def include_geos()
#:include '../instrumentation.fypp'
!----------------------------------------------------------------------
! Subroutine: model_geos_coord
!> Get GEOS coordinates
!----------------------------------------------------------------------
subroutine model_geos_coord(model,mpl,nam)

implicit none

! Passed variables
class(model_type),intent(inout) :: model !< Model
type(mpl_type),intent(inout) :: mpl      !< MPI data
type(nam_type),intent(in) :: nam         !< Namelist

! Local variables
integer :: img,il0,ilon,ilat
integer :: ncid,lon_id,lat_id,delp_id
real(kind_real) :: P0
real(kind_double),allocatable :: lon(:,:),lat(:,:),delp(:,:,:)

! Set name
@:set_name(model_geos_coord)

! Probe in
@:probe_in()

! Open file and get dimensions
model%ntile = 1
ncid = open_file(mpl,'grid',0)
model%nlon = inquire_dim_size(mpl,ncid,'Xdim')
model%nlat = inquire_dim_size(mpl,ncid,'Ydim')
model%nmg = model%nlon*model%nlat
model%nlev = inquire_dim_size(mpl,ncid,'lev')

! Allocation
call model%alloc
allocate(lon(model%nlon,model%nlat))
allocate(lat(model%nlon,model%nlat))
allocate(delp(model%nlon,model%nlat,model%nlev))

! Read data and close file
lon_id = inquire_var(mpl,ncid,'lons')
lat_id = inquire_var(mpl,ncid,'lats')
delp_id = inquire_var(mpl,ncid,'delp')
call get_var(mpl,ncid,lon_id,lon)
call get_var(mpl,ncid,lat_id,lat)
call get_var(mpl,ncid,delp_id,delp)
call close_file(mpl,ncid)

! Model grid
img = 0
do ilon=1,model%nlon
   do ilat=1,model%nlat
      img = img+1
      model%mg_to_tile(img) = 1
      model%mg_to_lon(img) = ilon
      model%mg_to_lat(img) = ilat
      model%lon(img) = real(lon(ilon,ilat),kind_real)*deg2rad
      model%lat(img) = real(lat(ilon,ilat),kind_real)*deg2rad
   end do
end do
model%area = four*pi/real(model%nmg,kind_real)
model%mask = .true.

! Vertical unit
do img=1,model%nmg
   if (nam%logpres) then
      ilon = model%mg_to_lon(img)
      ilat = model%mg_to_lat(img)
      P0 = sum(delp(ilon,ilat,:))
      do il0=1,nam%nl
         if (nam%levs(il0)==model%nlev) then
            model%vunit(img,il0) = log(P0-half*delp(ilon,ilat,model%nlev))
         else
            model%vunit(img,il0) = log(P0-sum(delp(ilon,ilat,nam%levs(il0)+1:model%nlev))-half*delp(ilon,ilat,nam%levs(il0)))
         end if
      end do
      if (model%nl0>nam%nl) model%vunit(img,model%nl0) = log(P0)
   else
      model%vunit(img,:) = real(nam%levs(1:model%nl0),kind_real)
   end if
end do

! Release memory
deallocate(lon)
deallocate(lat)
deallocate(delp)

! Probe out
@:probe_out()

end subroutine model_geos_coord

!----------------------------------------------------------------------
! Subroutine: model_geos_read
!> Read GEOS field
!----------------------------------------------------------------------
subroutine model_geos_read(model,mpl,nam,filename,fld)

implicit none

! Passed variables
class(model_type),intent(inout) :: model                        !< Model
type(mpl_type),intent(inout) :: mpl                             !< MPI data
type(nam_type),intent(in) :: nam                                !< Namelist
character(len=*),intent(in) :: filename                         !< File name
real(kind_real),intent(out) :: fld(model%nmga,model%nl0,nam%nv) !< Field

! Local variables
integer :: iv,il0,img,ilon,ilat,rank
integer :: ncid,fld_id
real(kind_real) :: fld_mg(model%nmg,model%nl0)
real(kind_real),allocatable :: fld_tmp(:,:,:)

! Set name
@:set_name(model_geos_read)

! Probe in
@:probe_in()

if (mpl%main) then
   ! Allocation
   allocate(fld_tmp(model%nlon,model%nlat,model%nl0))

   ! Open file
   ncid = open_file(mpl,filename,0)
end if

do iv=1,nam%nv
   if (mpl%main) then
      ! Get variable ID
      fld_id = inquire_var(mpl,ncid,nam%variables(iv))

      ! Get variable rank
      rank = inquire_var_rank(mpl,ncid,nam%variables(iv))

      ! Read data
      select case (rank)
      case (3)
         ! 2D data
         fld_tmp = mpl%msv%valr
         if (trim(nam%lev2d)=='first') then
            call get_var(mpl,ncid,fld_id,fld_tmp(:,:,1),(/1,1,1/),(/model%nlon,model%nlat,1/))
         elseif (trim(nam%lev2d)=='last') then
            call get_var(mpl,ncid,fld_id,fld_tmp(:,:,model%nl0),(/1,1,1/),(/model%nlon,model%nlat,1/))
         end if
      case (4)
         ! 3D data
         do il0=1,nam%nl
            call get_var(mpl,ncid,fld_id,fld_tmp(:,:,il0),(/1,1,nam%levs(il0),1/),(/model%nlon,model%nlat,1,1/))
         end do
      case default
         call mpl%abort('${subr}$','wrong number of dimensions for variable '//trim(nam%variables(iv)))
      end select

      ! Pack
      do il0=1,model%nl0
         do img=1,model%nmg
            ilon = model%mg_to_lon(img)
            ilat = model%mg_to_lat(img)
            fld_mg(img,il0) = fld_tmp(ilon,ilat,il0)
         end do
      end do
   end if
   call mpl%glb_to_loc(model%nmga,model%nmg,model%mga_to_mg,fld_mg,fld(:,:,iv))
end do

if (mpl%main) then
   ! Close file
   call close_file(mpl,ncid)

   ! Release memory
   deallocate(fld_tmp)
end if

! Probe out
@:probe_out()

end subroutine model_geos_read
#:enddef include_geos
