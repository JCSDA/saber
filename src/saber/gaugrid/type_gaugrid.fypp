#:include '../instrumentation.fypp'
!----------------------------------------------------------------------
! (C) Copyright 2018-2019 UCAR
!
! This software is licensed under the terms of the Apache Licence Version 2.0
! which can be obtained at http://www.apache.org/licenses/LICENSE-2.0.
!----------------------------------------------------------------------
! Module: type_gaugrid
!> Gaussian grid type
! Author: Teppei Kinami
!----------------------------------------------------------------------
module type_gaugrid

use tools_const, only: pi,rad2deg
use tools_kinds, only: kind_real
use tools_sp, only: splat
@:use_probe()

implicit none

real(kind_real):: zero = 0.0_kind_real !< Zero
real(kind_real):: two  = 2.0_kind_real !< Two
real(kind_real):: half = 0.5_kind_real !< Half

! Gaussian grid derived type
type gaussian_grid
  integer :: nlat                             !< Number of longitudes
  integer :: nlon                             !< Number of latitudes
  integer :: nlev                             !< Number of levels
  integer :: nvar                             !< Number of variables
  character(len=32),allocatable :: vname(:)   !< Name of variables
  real(kind_real),allocatable :: rlats(:)     !< Gaussian latitudes
  real(kind_real),allocatable :: wlats(:)     !< Gaussian weights
  real(kind_real),allocatable :: rlons(:)     !< Gaussian longitudes
  real(kind_real),allocatable :: fld(:,:,:,:) !< Data
contains
  procedure :: create => gaugrid_create
  procedure :: delete => gaugrid_delete
  procedure :: alloc_coord => gaugrid_alloc_coord
  procedure :: dealloc_coord => gaugrid_dealloc_coord
  procedure :: alloc_field => gaugrid_alloc_field
  procedure :: dealloc_field => gaugrid_dealloc_field
  procedure :: fld3d_pointer => gaugrid_fld3d_pointer
  procedure :: fld2d_pointer => gaugrid_fld2d_pointer
  procedure :: calc_glb_latlon => gaugrid_calc_glb_latlon
  procedure :: gaugrid_equals
  generic :: assignment(=) => gaugrid_equals
end type gaussian_grid

private
public :: gaussian_grid
public :: gaugrid_alloc_coord, gaugrid_dealloc_coord
public :: gaugrid_alloc_field, gaugrid_dealloc_field

contains

!----------------------------------------------------------------------
! Subroutine: gaugrid_create
!> Create Gaussian grid
!----------------------------------------------------------------------
subroutine gaugrid_create(self)

implicit none

! Passed variables
class(gaussian_grid),intent(inout) :: self !< Gaussian grid

! Set name
@:set_name(gaugrid_create)

! Get instance
@:get_instance(gaugrid)

! Probe in
@:probe_in()

! Initialization
call self%alloc_coord
call self%alloc_field

! Probe out
@:probe_out()

end subroutine gaugrid_create

!----------------------------------------------------------------------
! Subroutine: gaugrid_delete
!> Delete Gaussian grid
!----------------------------------------------------------------------
subroutine gaugrid_delete(self)

implicit none

! Passed variables
class(gaussian_grid),intent(inout) :: self !< Gaussian grid

! Set name
@:set_name(gaugrid_delete)

! Get instance
@:get_instance(gaugrid)

! Probe in
@:probe_in()

call self%dealloc_coord
call self%dealloc_field

! Probe out
@:probe_out()

! Release probe instance
@:probe_dealloc()

end subroutine gaugrid_delete

!----------------------------------------------------------------------
! Subroutine: gaugrid_alloc_coord
!> Allocate Gaussian grid coordinate
!----------------------------------------------------------------------
subroutine gaugrid_alloc_coord(self)

implicit none

! Passed variables
class(gaussian_grid),intent(inout) :: self !< Gaussian grid

! Set name
@:set_name(gaugrid_alloc_coord)

! Get instance
@:get_instance(gaugrid)

! Probe in
@:probe_in()

! Initialization
allocate(self%rlons(self%nlon)); self%rlons=zero
allocate(self%rlats(self%nlat)); self%rlats=zero
allocate(self%wlats(self%nlat)); self%wlats=zero
allocate(self%vname(self%nvar))

! Probe out
@:probe_out()

end subroutine gaugrid_alloc_coord

!----------------------------------------------------------------------
! Subroutine: gaugrid_dealloc_coord
!> Deallocate Gaussian grid coordinate
!----------------------------------------------------------------------
subroutine gaugrid_dealloc_coord(self)

implicit none

! Passed variables
class(gaussian_grid),intent(inout) :: self !< Gaussian grid

! Set name
@:set_name(gaugrid_dealloc_coord)

! Get instance
@:get_instance(gaugrid)

! Probe in
@:probe_in()

if (allocated(self%rlons))    deallocate(self%rlons)
if (allocated(self%rlats))    deallocate(self%rlats)
if (allocated(self%wlats))    deallocate(self%wlats)
if (allocated(self%vname))    deallocate(self%vname)

! Probe out
@:probe_out()

end subroutine gaugrid_dealloc_coord

!----------------------------------------------------------------------
! Subroutine: gaugrid_alloc_field
!> Allocate Gaussian grid field
!----------------------------------------------------------------------
subroutine gaugrid_alloc_field(self)

implicit none

! Passed variables
class(gaussian_grid),intent(inout) :: self !< Gaussian grid

! Set name
@:set_name(gaugrid_alloc_field)

! Get instance
@:get_instance(gaugrid)

! Probe in
@:probe_in()

! Initialization
allocate(self%fld(self%nlon,self%nlat,self%nlev,self%nvar))

! Probe out
@:probe_out()

end subroutine gaugrid_alloc_field

!----------------------------------------------------------------------
! Subroutine: gaugrid_dealloc_field
!> Deallocate Gaussian grid field
!----------------------------------------------------------------------
subroutine gaugrid_dealloc_field(self)

implicit none

! Passed variables
class(gaussian_grid),intent(inout) :: self !< Gaussian grid

! Set name
@:set_name(gaugrid_dealloc_field)

! Get instance
@:get_instance(gaugrid)

! Probe in
@:probe_in()

if (allocated(self%fld)) deallocate(self%fld)

! Probe out
@:probe_out()

end subroutine gaugrid_dealloc_field

!----------------------------------------------------------------------
! Subroutine: gaugrid_calc_glb_latlon
!> Calculate global Gaussian latitudes and longitudes
!----------------------------------------------------------------------
subroutine gaugrid_calc_glb_latlon(self)

implicit none

! Passed variables
class(gaussian_grid),intent(inout) :: self !< Gaussian grid

! Local variables
integer :: i,j
real(kind_real) :: dlon
real(kind_real),allocatable :: slat(:)

! Set name
@:set_name(gaugrid_calc_glb_latlon)

! Get instance
@:get_instance(gaugrid)

! Probe in
@:probe_in()

! Gaussian latitudes
allocate(slat(self%nlat-2))
call splat(4,self%nlat-2,slat,self%wlats)
self%rlats = zero
self%rlats(1) =  -pi*half
self%rlats(self%nlat) =  pi*half
do j=1,(self%nlat-2)/2
  self%rlats(self%nlat-j) = asin(slat(j))
  self%rlats(1+j) = -asin(slat(j))
end do
deallocate(slat)

! Equally-spaced longitudes
dlon = two*pi/real(self%nlon,kind_real)
do i=1,self%nlon
  self%rlons(i) = real(i-1,kind_real)*dlon
end do

! Probe out
@:probe_out()

end subroutine gaugrid_calc_glb_latlon

!----------------------------------------------------------------------
! Subroutine: gaugrid_fld3d_pointer
!> Set 3D field pointer
!----------------------------------------------------------------------
subroutine gaugrid_fld3d_pointer(self,iv,var,fldpointer)

implicit none

! Passed variables
class(gaussian_grid),target,intent(inout) :: self          !< Gaussian grid
integer,intent(in) :: iv                                   !< Variable index
character(len=*),intent(in) :: var                         !< Variable name
real(kind_real),pointer,intent(inout) :: fldpointer(:,:,:) !< Field pointer

! Set name
@:set_name(gaugrid_fld3d_pointer)

! Get instance
@:get_instance(gaugrid)

! Probe in
@:probe_in()

self%vname(iv) = trim(var)
fldpointer => self%fld(1:self%nlon,1:self%nlat,1:self%nlev,iv)

! Probe out
@:probe_out()

end subroutine gaugrid_fld3d_pointer

!----------------------------------------------------------------------
! Subroutine: gaugrid_fld2d_pointer
!> Set 2D field pointer
!----------------------------------------------------------------------
subroutine gaugrid_fld2d_pointer(self,iv,var,fldpointer)

implicit none

! Passed variables
class(gaussian_grid),target,intent(inout) :: self        !< Gaussian grid
integer,intent(in) :: iv                                 !< Variable index
character(len=*),intent(in) :: var                       !< Variable name
real(kind_real),pointer,intent(inout) :: fldpointer(:,:) !< Field pointer

! Set name
@:set_name(gaugrid_fld2d_pointer)

! Get instance
@:get_instance(gaugrid)

! Probe in
@:probe_in()

self%vname(iv) = trim(var)
fldpointer => self%fld(1:self%nlon,1:self%nlat,1,iv)

! Probe out
@:probe_out()

end subroutine gaugrid_fld2d_pointer

!----------------------------------------------------------------------
! Subroutine: gaugrid_equals
!> Create new gaussian grid from other
!----------------------------------------------------------------------
subroutine gaugrid_equals(self,rhs)

implicit none

! Passed variables
class(gaussian_grid), intent(inout) :: self !< Gaussian grid
type (gaussian_grid), intent(in)    :: rhs  !< Other Gaussian grid

! Set name
@:set_name(gaugrid_equals)

! Probe in
@:probe_in()

call self%delete
self%nlat = rhs%nlat; self%nlon = rhs%nlon
self%nlev = rhs%nlev; self%nvar = rhs%nvar
call self%create
self%vname = rhs%vname
self%rlats = rhs%rlats; self%rlons = rhs%rlons
self%wlats = rhs%wlats
self%fld = rhs%fld

! Probe out
@:probe_out()

end subroutine gaugrid_equals

end module type_gaugrid
