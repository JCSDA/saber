#:include '../../src/saber/instrumentation.fypp'
!----------------------------------------------------------------------
! Subroutine: bump_main
!> Call to the BUMP library
! Author: Benjamin Menetrier
! Licensing: this code is distributed under the CeCILL-C license
! Copyright 2015-... UCAR, CERFACS, METEO-FRANCE and IRIT
!----------------------------------------------------------------------
subroutine bump_main(c_conf,n2,arg2) bind (c,name='bump_main_f90')

use iso_c_binding, only: c_ptr
use fckit_configuration_module, only: fckit_configuration,fckit_yamlconfiguration
use fckit_mpi_module, only: fckit_mpi_comm
use fckit_pathname_module, only: fckit_pathname
use iso_c_binding, only: c_int,c_char
use iso_fortran_env, only: output_unit
use tools_gc99, only: fit_setup
use tools_kinds, only: kind_real
use type_bump, only: bump_type
use type_model, only: model_type
@:use_probe()

implicit none

! Passed variables
type(c_ptr),intent(in),value :: c_conf   !< FCKIT configuration
integer(c_int),intent(in) :: n2          !< Output filename size
character(c_char),intent(in) :: arg2(n2) !< Output filename

! Local variables
integer :: i,iproc,ie,ifileunit
character(len=1024) :: logdir,filename
type(fckit_configuration) :: f_conf
type(bump_type) :: bump
type(fckit_mpi_comm) :: f_comm
type(model_type) :: model

! Initialize MPI
f_comm = fckit_mpi_comm()

! Configuration file
f_conf = fckit_configuration(c_conf)

! Copy logdir
logdir = ''
do i=1,n2
   logdir(i:i) = arg2(i)
end do

! Set missing values
bump%mpl%msv%vali = -999
bump%mpl%msv%valr = -999.0_kind_real

! Get main instance index
@:get_instance(main)

! Initialize bump%mpl
call bump%mpl%init(f_comm)

! Initialize fitting parameters
call fit_setup(bump%mpl)

! Initialize namelist
call bump%nam%init(bump%mpl%nproc)

! Convert fckit configuration to namelist
call bump%nam%from_conf(f_comm,f_conf)

! Broadcast namelist
call bump%nam%bcast(bump%mpl)

! Define info unit and open file
do iproc=1,bump%mpl%nproc
   if ((trim(bump%nam%verbosity)=='all').or.((trim(bump%nam%verbosity)=='main').and.(iproc==bump%mpl%rootproc))) then
      if (iproc==bump%mpl%myproc) then
         ! Find a free unit
         call bump%mpl%newunit(bump%mpl%lunit)

         ! Open listing file
         write(filename,'(a,i6.6,a)') trim(bump%nam%prefix)//'.',bump%mpl%myproc-1,'.out'
         inquire(file=filename,number=ifileunit)
         if (ifileunit<0) then
            open(unit=bump%mpl%lunit,file=trim(logdir)//'/'//trim(filename),action='write',status='replace')
         else
            close(ifileunit)
            open(unit=bump%mpl%lunit,file=trim(logdir)//'/'//trim(filename),action='write',status='replace')
         end if
      end if
      call bump%mpl%f_comm%barrier
   end if
end do

! Header
write(bump%mpl%info,'(a)') '-------------------------------------------------------------------'
call bump%mpl%flush
write(bump%mpl%info,'(a)') '--- You are running the BUMP main program -------------------------'
call bump%mpl%flush

! Model setup
write(bump%mpl%info,'(a)') '-------------------------------------------------------------------'
call bump%mpl%flush
write(bump%mpl%info,'(a)') '--- Setup model'
call bump%mpl%flush
call model%setup(bump%mpl,bump%nam)

! Load ensembles
if (bump%nam%ens1_ne>0) then
   write(bump%mpl%info,'(a)') '-------------------------------------------------------------------'
   call bump%mpl%flush
   write(bump%mpl%info,'(a)') '--- Load ensemble 1'
   call bump%mpl%flush
   call model%load_ens(bump%mpl,bump%nam,'ens1')
end if
if (bump%nam%ens2_ne>0) then
   write(bump%mpl%info,'(a)') '-------------------------------------------------------------------'
   call bump%mpl%flush
   write(bump%mpl%info,'(a)') '--- Load ensemble 2'
   call bump%mpl%flush
   call model%load_ens(bump%mpl,bump%nam,'ens2')
end if

! BUMP setup
call bump%setup(model%afunctionspace,model%fieldset)

! Add members
if (bump%nam%ens1_ne>0) then
   write(bump%mpl%info,'(a)') '-------------------------------------------------------------------'
   call bump%mpl%flush
   write(bump%mpl%info,'(a)') '--- Add members of ensemble 1'
   call bump%mpl%flush
   do ie=1,bump%nam%ens1_ne
      write(bump%mpl%info,'(a7,a,i4,a,i4)') '','Member ',ie,' / ',bump%nam%ens1_ne
      call bump%mpl%flush
      call bump%add_member(model%ens1(ie),ie,1)
   end do
end if
if (bump%nam%ens2_ne>0) then
   write(bump%mpl%info,'(a)') '-------------------------------------------------------------------'
   call bump%mpl%flush
   write(bump%mpl%info,'(a)') '--- Add members of ensemble 2'
   call bump%mpl%flush
   do ie=1,bump%nam%ens2_ne
      write(bump%mpl%info,'(a7,a,i4,a,i4)') '','Member ',ie,' / ',bump%nam%ens2_ne
      call bump%mpl%flush
      call bump%add_member(model%ens2(ie),ie,2)
   end do
end if

! Test set_parameters interfaces
if (bump%nam%check_set_param_cor.or.bump%nam%check_set_param_hyb.or.bump%nam%check_set_param_lct) then
   write(bump%mpl%info,'(a)') '-------------------------------------------------------------------'
   call bump%mpl%flush
   write(bump%mpl%info,'(a)') '--- Test set_parameters interfaces'
   call bump%mpl%flush()
   call bump%test_set_parameter
   if (bump%nam%default_seed) call bump%rng%reseed(bump%mpl)
end if

! Run drivers
write(bump%mpl%info,'(a)') '-------------------------------------------------------------------'
call bump%mpl%flush
write(bump%mpl%info,'(a)') '--- Run drivers'
call bump%mpl%flush
call bump%run_drivers

! Test get_parameter interfaces
if (bump%nam%check_get_param_cor.or.bump%nam%check_get_param_hyb.or.bump%nam%check_get_param_Dloc &
 & .or.bump%nam%check_get_param_lct) then
   write(bump%mpl%info,'(a)') '-------------------------------------------------------------------'
   call bump%mpl%flush
   write(bump%mpl%info,'(a)') '--- Test get_parameter interfaces'
   call bump%mpl%flush()
   call bump%test_get_parameter
   if (bump%nam%default_seed) call bump%rng%reseed(bump%mpl)
end if

! Release memory (partial)
write(bump%mpl%info,'(a)') '-------------------------------------------------------------------'
call bump%mpl%flush
write(bump%mpl%info,'(a)') '--- Release memory (partial)'
call bump%mpl%flush
call bump%partial_dealloc

! Test interfaces
write(bump%mpl%info,'(a)') '-------------------------------------------------------------------'
call bump%mpl%flush
write(bump%mpl%info,'(a)') '--- Test apply interfaces'
call bump%mpl%flush
call bump%test_apply_interfaces

! Release memory
call bump%dealloc

! Get main instance index
@:get_instance(main)

! Release memory
call model%dealloc

! Execution stats
@:execution_stats()

if ((trim(bump%nam%verbosity)=='all').or.((trim(bump%nam%verbosity)=='main').and.bump%mpl%main)) then
   ! Close listings
   write(bump%mpl%info,'(a)') '-------------------------------------------------------------------'
   call bump%mpl%flush
   write(bump%mpl%info,'(a)') '--- Close listings'
   call bump%mpl%flush
   write(bump%mpl%info,'(a)') '-------------------------------------------------------------------'
   call bump%mpl%flush
   close(unit=bump%mpl%lunit)
end if

! Finalize bump%mpl
call bump%mpl%final

! Release probe instance
@:probe_dealloc()

end subroutine bump_main
