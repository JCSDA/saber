# saber-import.cmake
# find_dependency calls for OOPS target dependencies

include(CMakeFindDependencyMacro)

if(@jedicmake_FOUND@ AND NOT jedicmake_FOUND)
    find_dependency(jedicmake REQUIRED)
endif()

if(@OPENMP@)
    find_dependency(OpenMP REQUIRED COMPONENTS Fortran)
endif()

if(NOT MPI_Fortran_FOUND)
    find_dependency(MPI REQUIRED COMPONENTS Fortran)
endif()

if(NOT NetCDF_Fortran_FOUND)
    find_dependency(NetCDF REQUIRED COMPONENTS Fortran)
endif()

if(NOT eckit_FOUND)
    find_dependency(eckit REQUIRED)
endif()

if(NOT fckit_FOUND)
    find_dependency(fckit REQUIRED)
endif()

if(NOT atlas_FOUND)
    find_package(atlas REQUIRED COMPONENTS OMP_Fortran)
endif()

if((@LAPACK_FOUND@ AND NOT LAPACK_FOUND) OR (@MKL_FOUND@ AND NOT MKL_FOUND))
    if( @MKL_FOUND@ )
        find_dependency( MKL REQUIRED )
        set( LAPACK_LIBRARIES ${MKL_LIBRARIES} )
    else()
        find_dependency( LAPACK REQUIRED )
    endif()
endif()

if(@oops_FOUND@) # oops_FOUND
    find_dependency(oops)
    set(saber_oops_FOUND True) #COMPONENT 'oops'
endif()

#Export Fortran compiler version for checking module compatibility
set(@PROJECT_NAME@_MODULES_Fortran_COMPILER_ID @CMAKE_Fortran_COMPILER_ID@)
set(@PROJECT_NAME@_MODULES_Fortran_COMPILER_VERSION @CMAKE_Fortran_COMPILER_VERSION@)
if(NOT @PROJECT_NAME@_MODULES_Fortran_COMPILER_ID STREQUAL CMAKE_Fortran_COMPILER_ID
   OR NOT @PROJECT_NAME@_MODULES_Fortran_COMPILER_VERSION VERSION_EQUAL CMAKE_Fortran_COMPILER_VERSION)
    message(SEND_ERROR "Package @PROJECT_NAME@ provides Fortran modules built with "
            "${@PROJECT_NAME@_MODULES_Fortran_COMPILER_ID}-${@PROJECT_NAME@_MODULES_Fortran_COMPILER_VERSION} "
            "but this build for ${PROJECT_NAME} uses incompatible compiler ${CMAKE_Fortran_COMPILER_ID}-${CMAKE_Fortran_COMPILER_VERSION}")
endif()
