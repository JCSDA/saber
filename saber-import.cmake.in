# saber-import.cmake
# find_dependency calls for SABER target dependencies

include(CMakeFindDependencyMacro)

if(@jedicmake_FOUND@ AND NOT jedicmake_FOUND)
    find_dependency(jedicmake REQUIRED)
endif()

if(@OPENMP@)
    find_dependency(OpenMP REQUIRED COMPONENTS Fortran)
endif()

if(NOT MPI_Fortran_FOUND)
    find_dependency(MPI REQUIRED COMPONENTS Fortran)
endif()

if(NOT NetCDF_Fortran_FOUND)
    find_dependency(NetCDF REQUIRED COMPONENTS Fortran)
endif()

if(NOT eckit_FOUND)
    find_dependency(eckit REQUIRED)
endif()

if(NOT fckit_FOUND)
    find_dependency(fckit REQUIRED)
endif()

if(NOT atlas_FOUND)
    find_package(atlas REQUIRED COMPONENTS OMP_Fortran)
endif()

if(@ENABLE_MKL@) # ENABLE_MKL
    if (@MKL_FOUND@ AND NOT MKL_FOUND) # MKL_FOUND checks
        find_dependency( MKL REQUIRED )
        set( LAPACK_LIBRARIES ${MKL_LIBRARIES} )
    else()
        if (NOT LAPACK_FOUND)
            find_dependency( LAPACK REQUIRED )
        endif()
    endif()
else()
    if (NOT LAPACK_FOUND)
        find_dependency( LAPACK REQUIRED )
    endif()
endif()

if(NOT oops_FOUND)
    find_dependency(oops)
endif()

if(NOT vader_FOUND)
    find_dependency(vader)
endif()

if(@FFTW_FOUND@) # FFTW_FOUND
   find_dependency(FFTW)
   set(saber_FFTW_FOUND True) #COMPONENT 'FFTW'
endif()

if(@gsibec_FOUND@) # gsibec_FOUND
    find_dependency(gsibec)
    set(saber_gsibec_FOUND True) #COMPONENT 'gsibec'
    if(@sp_FOUND@) # sp_FOUND
       find_dependency(sp)
       set(sp_FOUND True) #COMPONENT 'sp'
    endif()
endif()

if(@eccodes_FOUND@) # eccodes_FOUND
   find_dependency(eccodes)
   set(saber_eccodes_FOUND True) #COMPONENT 'eccodes'
endif()

#Export Fortran compiler version for checking module compatibility
set(@PROJECT_NAME@_MODULES_Fortran_COMPILER_ID @CMAKE_Fortran_COMPILER_ID@)
set(@PROJECT_NAME@_MODULES_Fortran_COMPILER_VERSION @CMAKE_Fortran_COMPILER_VERSION@)
if(NOT @PROJECT_NAME@_MODULES_Fortran_COMPILER_ID STREQUAL CMAKE_Fortran_COMPILER_ID
   OR NOT @PROJECT_NAME@_MODULES_Fortran_COMPILER_VERSION VERSION_EQUAL CMAKE_Fortran_COMPILER_VERSION)
    message(SEND_ERROR "Package @PROJECT_NAME@ provides Fortran modules built with "
            "${@PROJECT_NAME@_MODULES_Fortran_COMPILER_ID}-${@PROJECT_NAME@_MODULES_Fortran_COMPILER_VERSION} "
            "but this build for ${PROJECT_NAME} uses incompatible compiler ${CMAKE_Fortran_COMPILER_ID}-${CMAKE_Fortran_COMPILER_VERSION}")
endif()
